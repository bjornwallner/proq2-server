.\" Automatically generated by Pod::Man version 1.02
.\" Wed Jun 27 13:30:33 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Bio::SeqFeatureI 3"
.TH Bio::SeqFeatureI 3 "perl v5.6.0" "2001-05-16" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Bio::SeqFeatureI \- Abstract interface of a Sequence Feature
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    # get a seqfeature somehow, eg,
.Ve
.Vb 4
\&    foreach $feat ( $annseq->all_seqfeatures() ) {
\&            print "Feature from ", $feat->start, "to ", 
\&                  $feat->end, " Primary tag  ", $feat->primary_tag, 
\&                  ", produced by ", $feat->source_tag(), "\en";
.Ve
.Vb 5
\&            if( $feat->strand == 0 ) {
\&                print "Feature applicable to either strand\en";
\&            } else {
\&                print "Feature on strand ", $feat->strand,"\en"; # -1,1
\&            }
.Ve
.Vb 8
\&            foreach $tag ( $feat->all_tags() ) {
\&                print "Feature has tag ", $tag, "with values, ",
\&                      join(' ',$feat->each_tag_value($tag)), "\en";
\&            }
\&            print "new feature\en" if $feat->has_tag('new');
\&            # features can have sub features
\&            my @subfeat = $feat->sub_SeqFeature();
\&        }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This interface is the functions one can expect for any Sequence Feature, whatever
its implemtation or whether it is a more complex type (eg, a Gene). This object
doesn't actually provide any implemention, it just provides the definitions
of what methods one can call. See Bio::SeqFeature::Generic for a good standard
implementation of this object
.SH "FEEDBACK"
.IX Header "FEEDBACK"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org          - General discussion
\&  http://bio.perl.org/MailList.html             - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via email
or the web:
.PP
.Vb 2
\&  bioperl-bugs@bio.perl.org
\&  http://bio.perl.org/bioperl-bugs/
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "start"
.IX Subsection "start"
.Vb 5
\& Title   : start
\& Usage   : $start = $feat->start
\& Function: Returns the start coordinate of the feature
\& Returns : integer
\& Args    : none
.Ve
.Sh "end"
.IX Subsection "end"
.Vb 5
\& Title   : end
\& Usage   : $end = $feat->end
\& Function: Returns the end coordinate of the feature
\& Returns : integer
\& Args    : none
.Ve
.Sh "strand"
.IX Subsection "strand"
.Vb 5
\& Title   : strand
\& Usage   : $strand = $feat->strand()
\& Function: Returns strand information, being 1,-1 or 0
\& Returns : -1,1 or 0
\& Args    : none
.Ve
.Sh "sub_SeqFeature"
.IX Subsection "sub_SeqFeature"
.Vb 5
\& Title   : sub_SeqFeature
\& Usage   : @feats = $feat->sub_SeqFeature();
\& Function: Returns an array of sub Sequence Features
\& Returns : An array
\& Args    : none
.Ve
.Sh "primary_tag"
.IX Subsection "primary_tag"
.Vb 6
\& Title   : primary_tag
\& Usage   : $tag = $feat->primary_tag()
\& Function: Returns the primary tag for a feature,
\&           eg 'exon'
\& Returns : a string 
\& Args    : none
.Ve
.Sh "source_tag"
.IX Subsection "source_tag"
.Vb 6
\& Title   : source_tag
\& Usage   : $tag = $feat->source_tag()
\& Function: Returns the source tag for a feature,
\&           eg, 'genscan' 
\& Returns : a string 
\& Args    : none
.Ve
.Sh "has_tag"
.IX Subsection "has_tag"
.Vb 5
\& Title   : has_tag
\& Usage   : $tag_exists = $self->has_tag('some_tag')
\& Function: 
\& Returns : TRUE if the specified tag exists, and FALSE otherwise
\& Args    :
.Ve
.Sh "each_tag_value"
.IX Subsection "each_tag_value"
.Vb 5
\& Title   : each_tag_value
\& Usage   : @values = $self->each_tag_value('some_tag')
\& Function: 
\& Returns : An array comprising the values of the specified tag.
\& Args    :
.Ve
.Sh "all_tags"
.IX Subsection "all_tags"
.Vb 5
\& Title   : all_tags
\& Usage   : @tags = $feat->all_tags()
\& Function: gives all tags for this feature
\& Returns : an array of strings
\& Args    : none
.Ve
.Sh "gff_string"
.IX Subsection "gff_string"
.Vb 4
\& Title   : gff_string
\& Usage   : $str = $feat->gff_string;
\&           $str = $feat->gff_string($gff_formatter);
\& Function: Provides the feature information in GFF format.
.Ve
.Vb 4
\&           The implementation provided here returns GFF2 by default. If you
\&           want a different version, supply an object implementing a method
\&           gff_string() accepting a SeqFeatureI object as argument. E.g., to
\&           obtain GFF1 format, do the following:
.Ve
.Vb 2
\&                my $gffio = Bio::Tools::GFF->new(-gff_version => 1);
\&                $gff1str = $feat->gff_string($gff1io);
.Ve
.Vb 2
\& Returns : A string
\& Args    : Optionally, an object implementing gff_string().
.Ve
.Sh "_static_gff_formatter"
.IX Subsection "_static_gff_formatter"
.Vb 6
\& Title   : _static_gff_formatter
\& Usage   :
\& Function:
\& Example :
\& Returns : 
\& Args    :
.Ve
.SH "RangeI methods"
.IX Header "RangeI methods"
These methods are inherited from RangeI and can be used
directly from a SeqFeatureI interface. Remember that a 
SeqFeature is-a RangeI, and so wherever you see RangeI you
can use a feature ($r in the below documentation).
.Sh "overlaps"
.IX Subsection "overlaps"
.Vb 6
\&  Title   : overlaps
\&  Usage   : if($feat->overlaps($r)) { do stuff }
\&            if($feat->overlaps(200)) { do stuff }
\&  Function: tests if $feat overlaps $r
\&  Args    : a RangeI to test for overlap with, or a point
\&  Returns : true if the Range overlaps with the feature, false otherwise
.Ve
.Sh "contains"
.IX Subsection "contains"
.Vb 5
\&  Title   : contains
\&  Usage   : if($feat->contains($r) { do stuff }
\&  Function: tests whether $feat totally contains $r
\&  Args    : a RangeI to test for being contained
\&  Returns : true if the argument is totaly contained within this range
.Ve
.Sh "equals"
.IX Subsection "equals"
.Vb 5
\&  Title   : equals
\&  Usage   : if($feat->equals($r))
\&  Function: test whether $feat has the same start, end, strand as $r
\&  Args    : a RangeI to test for equality
\&  Returns : true if they are describing the same range
.Ve
.SH "Geometrical methods"
.IX Header "Geometrical methods"
These methods do things to the geometry of ranges, and return
triplets (start, stop, strand) from which new ranges could be built.
.Sh "intersection"
.IX Subsection "intersection"
.Vb 5
\&  Title   : intersection
\&  Usage   : ($start, $stop, $strand) = $feat->intersection($r)
\&  Function: gives the range that is contained by both ranges
\&  Args    : a RangeI to compare this one to
\&  Returns : nothing if they do not overlap, or the range that they do overlap
.Ve
.Sh "union"
.IX Subsection "union"
.Vb 6
\&  Title   : union
\&  Usage   : ($start, $stop, $strand) = $feat->union($r);
\&          : ($start, $stop, $strand) = Bio::RangeI->union(@ranges);
\&  Function: finds the minimal range that contains all of the ranges
\&  Args    : a range or list of ranges to find the union of
\&  Returns : the range containing all of the ranges
.Ve
.Sh "location"
.IX Subsection "location"
.Vb 6
\& Title   : location
\& Usage   : my $location = $seqfeature->location()
\& Function: returns a location object suitable for identifying location 
\&           of feature on sequence or parent feature  
\& Returns : Bio::LocationI object
\& Args    : none
.Ve
