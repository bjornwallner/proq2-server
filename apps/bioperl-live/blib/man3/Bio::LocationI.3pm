.\" Automatically generated by Pod::Man version 1.02
.\" Wed Jun 27 13:30:30 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Bio::LocationI 3"
.TH Bio::LocationI 3 "perl v5.6.0" "2001-05-16" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Bio::LocationI \- Abstract interface of a Location on a Sequence
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&    # get a LocationI somehow
\&    printf( "start = %d, end = %d, strand = %s, seq_id = %s\en", 
\&            $location->start, $location->end, $location->strand,
\&            $location->seq_id);
\&    print "location str is ", $location->to_FTstring(), "\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This Interface defines the methods for a Bio::LocationI, an object
which encapsulates a location on a biological sequence.  Locations
need not be attached to actual sequences as they are stand alone
objects.  LocationI objects are used by Bio::SeqFeatureI objects to
manage and represent locations for a Sequence Feature.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org             - General discussion
\&  http://bio.perl.org/MailList.html - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via email
or the web:
.PP
.Vb 2
\&  bioperl-bugs@bio.perl.org
\&  http://bio.perl.org/bioperl-bugs/
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason@chg.mc.duke.edu
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "start"
.IX Subsection "start"
.Vb 7
\&  Title   : start
\&  Usage   : $start = $location->start();
\&  Function: Get the start coordinate of this location as defined by the
\&            currently active coordinate computation policy. In simple cases,
\&            this will return the same number as min_start() and max_start(),
\&            in more ambiguous cases like fuzzy locations the number may be
\&            equal to one or neither of both.
.Ve
.Vb 5
\&            We override this here from RangeI in order to delegate 'get' to
\&            a Bio::Location::CoordinatePolicy implementing object. Implementing
\&            classes may also wish to provide 'set' functionality, in which
\&            case they *must* override this method. The implementation
\&            provided here will throw an exception if called with arguments.
.Ve
.Vb 2
\&  Returns : A positive integer value.
\&  Args    : none
.Ve
.Sh "end"
.IX Subsection "end"
.Vb 7
\&  Title   : end
\&  Usage   : $end = $location->end();
\&  Function: Get the end coordinate of this location as defined by the
\&            currently active coordinate computation policy. In simple cases,
\&            this will return the same number as min_end() and max_end(),
\&            in more ambiguous cases like fuzzy locations the number may be
\&            equal to one or neither of both.
.Ve
.Vb 5
\&            We override this here from RangeI in order to delegate 'get' to
\&            a Bio::Location::CoordinatePolicy implementing object. Implementing
\&            classes may also wish to provide 'set' functionality, in which
\&            case they *must* override this method. The implementation
\&            provided here will throw an exception if called with arguments.
.Ve
.Vb 2
\&  Returns : A positive integer value.
\&  Args    : none
.Ve
.Sh "min_start"
.IX Subsection "min_start"
.Vb 3
\&  Title   : min_start
\&  Usage   : my $minstart = $location->min_start();
\&  Function: Get minimum starting point of feature.
.Ve
.Vb 1
\&            Note that an implementation must not call start() in this method.
.Ve
.Vb 2
\&  Returns : integer or undef if no minimum starting point.
\&  Args    : none
.Ve
.Sh "max_start"
.IX Subsection "max_start"
.Vb 3
\&  Title   : max_start
\&  Usage   : my $maxstart = $location->max_start();
\&  Function: Get maximum starting point of feature.
.Ve
.Vb 3
\&            Note that an implementation must not call start() in this method
\&            unless start() is overridden such as not to delegate to the
\&            coordinate computation policy object.
.Ve
.Vb 2
\&  Returns : integer or undef if no maximum starting point.
\&  Args    : none
.Ve
.Sh "start_pos_type"
.IX Subsection "start_pos_type"
.Vb 3
\&  Title   : start_pos_type
\&  Usage   : my $start_pos_type = $location->start_pos_type();
\&  Function: Get start position type encoded as text
.Ve
.Vb 4
\&            Known valid values are 'BEFORE' (<5..100), 'AFTER' (>5..100), 
\&            'EXACT' (5..100), 'WITHIN' ((5.10)..100), 'BETWEEN', (5^6), with
\&            their meaning best explained by their GenBank/EMBL location string
\&            encoding in brackets.
.Ve
.Vb 2
\&  Returns : string ('BEFORE', 'AFTER', 'EXACT','WITHIN', 'BETWEEN')
\&  Args    : none
.Ve
.Sh "min_end"
.IX Subsection "min_end"
.Vb 3
\&  Title   : min_end
\&  Usage   : my $minend = $location->min_end();
\&  Function: Get minimum ending point of feature.
.Ve
.Vb 3
\&            Note that an implementation must not call end() in this method
\&            unless end() is overridden such as not to delegate to the
\&            coordinate computation policy object.
.Ve
.Vb 2
\&  Returns : integer or undef if no minimum ending point.
\&  Args    : none
.Ve
.Sh "max_end"
.IX Subsection "max_end"
.Vb 3
\&  Title   : max_end
\&  Usage   : my $maxend = $location->max_end();
\&  Function: Get maximum ending point of feature.
.Ve
.Vb 3
\&            Note that an implementation must not call end() in this method
\&            unless end() is overridden such as not to delegate to the
\&            coordinate computation policy object.
.Ve
.Vb 2
\&  Returns : integer or undef if no maximum ending point.
\&  Args    : none
.Ve
.Sh "end_pos_type"
.IX Subsection "end_pos_type"
.Vb 3
\&  Title   : end_pos_type
\&  Usage   : my $end_pos_type = $location->end_pos_type();
\&  Function: Get end position encoded as text.
.Ve
.Vb 4
\&            Known valid values are 'BEFORE' (5..<100), 'AFTER' (5..>100), 
\&            'EXACT' (5..100), 'WITHIN' (5..(90.100)), 'BETWEEN', (5^6), with
\&            their meaning best explained by their GenBank/EMBL location string
\&            encoding in brackets.
.Ve
.Vb 2
\&  Returns : string ('BEFORE', 'AFTER', 'EXACT','WITHIN', 'BETWEEN')
\&  Args    : none
.Ve
.Sh "seq_id"
.IX Subsection "seq_id"
.Vb 5
\&  Title   : seq_id
\&  Usage   : my $seqid = $location->seq_id();
\&  Function: Get/Set seq_id that location refers to
\&  Returns : seq_id (a string)
\&  Args    : [optional] seq_id value to set
.Ve
.Sh "coordinate_policy"
.IX Subsection "coordinate_policy"
.Vb 4
\&  Title   : coordinate_policy
\&  Usage   : $policy = $location->coordinate_policy();
\&            $location->coordinate_policy($mypolicy); # set may not be possible
\&  Function: Get the coordinate computing policy employed by this object.
.Ve
.Vb 2
\&            See Bio::Location::CoordinatePolicyI for documentation about
\&            the policy object and its use.
.Ve
.Vb 3
\&            The interface *does not* require implementing classes to accept
\&            setting of a different policy. The implementation provided here
\&            does, however, allow to do so.
.Ve
.Vb 7
\&            Implementors of this interface are expected to initialize every
\&            new instance with a CoordinatePolicyI object. The implementation
\&            provided here will return a default policy object if none has
\&            been set yet. To change this default policy object call this
\&            method as a class method with an appropriate argument. Note that
\&            in this case only subsequently created Location objects will be
\&            affected.
.Ve
.Vb 2
\&  Returns : A Bio::Location::CoordinatePolicyI implementing object.
\&  Args    : On set, a Bio::Location::CoordinatePolicyI implementing object.
.Ve
.Sh "to_FTstring"
.IX Subsection "to_FTstring"
.Vb 5
\&  Title   : to_FTstring
\&  Usage   : my $locstr = $location->to_FTstring()
\&  Function: returns the FeatureTable string of this location
\&  Returns : string
\&  Args    : none
.Ve
