.\" Automatically generated by Pod::Man version 1.02
.\" Wed Jun 27 13:29:55 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "BIOBACK 1"
.TH BIOBACK 1 "perl v5.6.0" "2001-05-16" "User Contributed Perl Documentation"
.UC
.SH "NAME"
bioperl backend \- how to customise bioperl for your site
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Not really appropiate for a synopsis. Read on
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document is designed to let you customise bioperl on
your site. Bioperl can work with a number of database formats
(at the moment, simple fasta flat file formats and EMBL/Swissprot
\&.dat format), allowing users to retrieve sequences from these
databases. In addition another layer, above flat file indexing
is provided, allowing sites to retrieve sequences from GenBank via
the web or via flat file indexing, or \- if you have the time to 
do so, you can write your own interface to an in-house \s-1RDB\s0. Using
\&\s-1DBI\s0 this should be quite simple.
.PP
Two scripts are provided to get you started with the bioperl backend:
.Ip "bpfetch" 2
.IX Item "bpfetch"
Fetches sequences from a Database
.Ip "bpindex" 2
.IX Item "bpindex"
Builds indexes for flat files databases which are easily accessible
by bpfetch
.PP
The core of the backend system is found in following modules
.Ip "Bio::DB::*" 2
.IX Item "Bio::DB::*"
generic access to databases, whether flat file, web or rdb. At the
moment, this provides random access retrieval, on the basis of ids or
accession numbers, but does not provide the ability to loop over the
entire database, nor does it provide any complex querying ability.
.Sp
Bio::DB::BioSeqI is the abstract interface (hence the I) for the
databases.  Bio::DB::GenBank and Bio::DB::GenPept are concrete
implementations for network access to the GenBank and GenPept
databases held at \s-1NCBI\s0, using http as a protocol.
.Ip "Bio::Index::*" 2
.IX Item "Bio::Index::*"
flat file indexing system, for read-only, flat file distributions. These
provide for specific instances generic type access, but the underlying
machinery can be customised for any number of different flat file systems.
.Sp
The Index modules \s-1EMBL\s0 and Fasta, as they are designed as Sequence databases
conform to the Bio::DB::BioSeqI interface, meaning they can be used whereever
the Bio::DB::BioSeqI is expected.
.Ip "Bio::SeqIO::*" 2
.IX Item "Bio::SeqIO::*"
conversion systems for Bio::Seq objects, either to or from sequence
streams. The move of things into SeqIO prevents the Bio::Seq object
bloating up with format code, and the SeqIO system has the benefit
of being very easy to extend to new formats.
.SH "SETTING UP BIOPERL INDICES"
.IX Header "SETTING UP BIOPERL INDICES"
If you want to use the bioperl indexing of fasta and embl/swissprot
\&.dat files then the bpfetch and bpindex scripts are great ways to
start off (and also reading the scripts shows you how to use the
bioperl indexing stuff). bpfetch and bpindex coordinate by the use
of two environment variables
.PP
.Vb 1
\&  BIOPERL_INDEX - directory where the indices are kept
.Ve
.Vb 1
\&  BIOPERL_INDEX_TYPE - type of DBM file to use for the index
.Ve
The basic way of indexing a database, once \s-1BIOPERL_INDEX\s0 has been
set up, is to go
.PP
.Vb 1
\&  bpindex <index-name> <filenames as full path>
.Ve
eg, for Fasta files
.PP
.Vb 1
\&  bpindex est /nfs/somewhere/fastafiles/est*.fa
.Ve
Or, for embl/swissprot files
.PP
.Vb 1
\&  bpindex -fmt=EMBL swiss /nfs/somewhere/swiss/swissprot.dat
.Ve
To retrieve sequences from the index go
.PP
.Vb 1
\&  bpfetch <index-name>:<id>
.Ve
eg,
.PP
.Vb 1
\&  bpfetch est:AA01234
.Ve
or
.PP
.Vb 1
\&  bpfetch swiss:VAV_HUMAN
.Ve
bpfetch has other options to connect to genbank across the network.
.SH "CHECKLIST"
.IX Header "CHECKLIST"
.Vb 1
\&   make a directory called /nfs/datadisk/bioperlindex/
.Ve
.Vb 2
\&   setenv BIOPERL_INDEX (or export in Bash) in the system login
\&   script to /nfs/datadisk/bioperlindex/
.Ve
.Vb 2
\&   go bpindex swissprot /nfs/datadisk/swiss/swissprot.dat
\&   etc
.Ve
.Vb 1
\&   You are ready to use bpfetch
.Ve
