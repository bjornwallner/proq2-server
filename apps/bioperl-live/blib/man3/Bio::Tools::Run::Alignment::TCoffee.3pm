.\" Automatically generated by Pod::Man version 1.02
.\" Wed Jun 27 13:30:43 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Bio::Tools::Run::Alignment::TCoffee 3"
.TH Bio::Tools::Run::Alignment::TCoffee 3 "perl v5.6.0" "2001-06-20" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Bio::Tools::Run::Alignment::TCoffee \- Object for the calculation of a
multiple sequence alignment from a set of unaligned sequences or
alignments using the TCoffee program
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  # Build a tcoffee alignment factory
\&  @params = ('ktuple' => 2, 'matrix' => 'BLOSUM');
\&  $factory = new Bio::Tools::Run::Alignment::TCoffee (@params);
.Ve
.Vb 4
\&  # Pass the factory a list of sequences to be aligned.
\&  $inputfilename = 't/cysprot.fa';
\&  # $aln is a SimpleAlign object.
\&  $aln = $factory->align($inputfilename);
.Ve
.Vb 3
\&  # or where @seq_array is an array of Bio::Seq objects
\&  $seq_array_ref = \e@seq_array;
\&  $aln = $factory->align($seq_array_ref);
.Ve
.Vb 2
\&  # Or one can pass the factory a pair of (sub)alignments
\&  #to be aligned against each other, e.g.:
.Ve
.Vb 2
\&  # where $aln1 and $aln2 are Bio::SimpleAlign objects.
\&  $aln = $factory->profile_align($aln1,$aln2);
.Ve
.Vb 2
\&  # Or one can pass the factory an alignment and one or more
\&  # unaligned sequences to be added to the alignment. For example:
.Ve
.Vb 2
\&  # $seq is a Bio::Seq object.
\&  $aln = $factory->profile_align($aln1,$seq);
.Ve
There are various additional options and input formats available.  See
the \s-1DESCRIPTION\s0 section that follows for additional details.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Note: this \s-1DESCRIPTION\s0 only documents the (Bio)perl interface to
TCoffee.
.PP
There are a number of possible parameters one can pass in TCoffee.
One should really read the online manual for the best explaination of
all the features.  See
http://igs-server.cnrs-mrs.fr/~cnotred/Documentation/t_coffee/t_coffee_doc.html
.PP
These can be specified as parameters when instantiating a new TCoffee
object, or through get/set methods of the same name (lowercase).
.SH "PARAMETERS FOR ALIGNMENT COMPUTATION"
.IX Header "PARAMETERS FOR ALIGNMENT COMPUTATION"
.Sh "\s-1IN\s0"
.IX Subsection "IN"
.Vb 4
\& Title       : IN
\& Description : (optional) input filename, this is specified when
\&               align so should not use this directly unless one
\&               understand TCoffee program very well.
.Ve
.Sh "\s-1TYPE\s0"
.IX Subsection "TYPE"
.Vb 4
\& Title       : TYPE
\& Args        : [string] DNA, PROTEIN
\& Description : (optional) set the sequence type, guessed automatically
\&               so should not use this directly
.Ve
.Sh "\s-1PARAMETERS\s0"
.IX Subsection "PARAMETERS"
.Vb 2
\& Title       : PARAMETERS
\& Description : (optional) Indicates a file containing extra parameters
.Ve
.Sh "\s-1EXTEND\s0"
.IX Subsection "EXTEND"
.Vb 10
\& Title       : EXTEND
\& Args        : 0, 1, or positive value
\& Default     : 1
\& Description : Flag indicating that library extension should be
\&               carried out when performing multiple alignments, if set
\&               to 0 then extension is not made, if set to 1 extension
\&               is made on all pairs in the library.  If extension is
\&               set to another positive value, the extension is only
\&               carried out on pairs having a weigth value superior to
\&               the specified limit.
.Ve
.Sh "\s-1DP_NORMALISE\s0"
.IX Subsection "DP_NORMALISE"
.Vb 5
\& Title       : DP_NORMALISE
\& Args        : 0 or positive value
\& Default     : 1000
\& Description : When using a value different from 0, this flag sets the
\&               score of the highest scoring pair to 1000.
.Ve
.Sh "\s-1DP_MODE\s0"
.IX Subsection "DP_MODE"
.Vb 6
\& Title       : DP_MODE
\& Args        : [string] gotoh_pair_wise, myers_miller_pair_wise,
\&               fasta_pair_wise cfasta_pair_wise
\& Default     : cfast_fair_wise
\& Description : Indicates the type of dynamic programming used by
\&               the program
.Ve
.Vb 2
\&    gotoh_pair_wise : implementation of the gotoh algorithm
\&    (quadratic in memory and time)
.Ve
.Vb 4
\&    myers_miller_pair_wise : implementation of the Myers and Miller
\&    dynamic programming algorithm ( quadratic in time and linear in
\&    space). This algorithm is recommended for very long sequences. It
\&    is about 2 time slower than gotoh. It only accepts tg_mode=1.
.Ve
.Vb 4
\&    fasta_pair_wise: implementation of the fasta algorithm. The
\&    sequence is hashed, looking for ktuples words. Dynamic programming
\&    is only carried out on the ndiag best scoring diagonals. This is
\&    much faster but less accurate than the two previous.
.Ve
.Vb 6
\&    cfasta_pair_wise : c stands for checked. It is the same
\&    algorithm. The dynamic programming is made on the ndiag best
\&    diagonals, and then on the 2*ndiags, and so on until the scores
\&    converge. Complexity will depend on the level of divergence of the
\&    sequences, but will usually be L*log(L), with an accuracy
\&    comparable to the two first mode ( this was checked on BaliBase).
.Ve
.Sh "\s-1KTUPLE\s0"
.IX Subsection "KTUPLE"
.Vb 3
\& Title       : KTUPLE
\& Args        : numeric value
\& Default     : 1 or 2 (1 for protein, 2 for DNA )
.Ve
.Vb 8
\& Description : Indicates the ktuple size for cfasta_pair_wise dp_mode
\&               and fasta_pair_wise. It is set to 1 for proteins, and 2
\&               for DNA. The alphabet used for protein is not the 20
\&               letter code, but a mildly degenerated version, where
\&               some residues are grouped under one letter, based on
\&               physicochemical properties:
\&               rk, de, qh, vilm, fy (the other residues are
\&               not degenerated).
.Ve
.Sh "\s-1NDIAGS\s0"
.IX Subsection "NDIAGS"
.Vb 6
\& Title       : NDIAGS
\& Args        : numeric value
\& Default     : 0
\& Description : Indicates the number of diagonals used by the
\&               fasta_pair_wise algorithm. When set to 0,
\&               n_diag=Log (length of the smallest sequence)
.Ve
.Sh "\s-1DIAG_MODE\s0"
.IX Subsection "DIAG_MODE"
.Vb 3
\& Title       : DIAG_MODE
\& Args        : numeric value
\& Default     : 0
.Ve
.Vb 2
\& Description : Indicates the manner in which diagonals are scored
\&              during the fasta hashing.
.Ve
.Vb 2
\&              0 indicates that the score of a diagonal is equal to the
\&              sum of the scores of the exact matches it contains.
.Ve
.Vb 2
\&              1 indicates that this score is set equal to the score of
\&              the best uninterrupted segment
.Ve
.Vb 1
\&              1 can be useful when dealing with fragments of sequences.
.Ve
.Sh "\s-1SIM_MATRIX\s0"
.IX Subsection "SIM_MATRIX"
.Vb 8
\& Title       : SIM_MATRIX
\& Args        : string
\& Default     : vasiliky
\& Description : Indicates the manner in which the amino acid is being
\&               degenerated when hashing. All the substitution matrix
\&               are acceptable. Categories will be defined as sub-group
\&               of residues all having a positive substitution score
\&               (they can overlap).
.Ve
.Vb 2
\&               If you wish to keep the non degenerated amino acid
\&               alphabet, use 'idmat'
.Ve
.Sh "\s-1MATRIX\s0"
.IX Subsection "MATRIX"
.Vb 9
\& Title       : MATRIX
\& Args        :
\& Default     :
\& Description : This flag is provided for compatibility with
\&               ClustalW. Setting matrix = 'blosum' is equivalent to
\&               -in=Xblosum62mt , -matrix=pam is equivalent to
\&               in=Xpam250mt . Apart from this, the rules are similar
\&               to those applying when declaring a matrix with the
\&               -in=X fl
.Ve
.Sh "\s-1GAPOPEN\s0"
.IX Subsection "GAPOPEN"
.Vb 8
\& Title       : GAPOPEN
\& Args        : numeric
\& Default     : 0
\& Description : Indicates the penalty applied for opening a gap. The
\&               penalty must be negative. If you provide a positive
\&               value, it will automatically be turned into a negative
\&               number. We recommend a value of 10 with pam matrices,
\&               and a value of 0 when a library is used.
.Ve
.Sh "\s-1GAPEXT\s0"
.IX Subsection "GAPEXT"
.Vb 4
\& Title       : GAPEXT
\& Args        : numeric
\& Default     : 0
\& Description : Indicates the penalty applied for extending a gap.
.Ve
.Sh "\s-1COSMETIC_PENALTY\s0"
.IX Subsection "COSMETIC_PENALTY"
.Vb 9
\& Title       : COSMETIC_PENALTY
\& Args        : numeric
\& Default     : 100
\& Description : Indicates the penalty applied for opening a gap. This
\&               penalty is set to a very low value. It will only have
\&               an influence on the portions of the alignment that are
\&               unalignable. It will not make them more correct, but
\&               only more pleasing to the eye ( i.e. Avoid stretches of
\&               lonely residues).
.Ve
.Vb 2
\&               The cosmetic penalty is automatically turned off if a
\&               substitution matrix is used rather than a library.
.Ve
.Sh "\s-1TG_MODE\s0"
.IX Subsection "TG_MODE"
.Vb 9
\& Title       : TG_MODE
\& Args        : 0,1,2
\& Default     : 1
\& Description : (Terminal Gaps)
\&               0: indicates that terminal gaps must be panelized with
\&                  a gapopen and a gapext penalty.
\&               1: indicates that terminal gaps must be penalized only
\&                  with a gapext penalty
\&               2: indicates that terminal gaps must not be penalized.
.Ve
.Sh "\s-1WEIGHT\s0"
.IX Subsection "WEIGHT"
.Vb 3
\& Title       : WEIGHT
\& Args        : sim or sim_<matrix_name or matrix_file> or integer value
\& Default     : sim
.Ve
.Vb 2
\& Description : Weight defines the way alignments are weighted when
\&               turned into a library.
.Ve
.Vb 2
\&               sim indicates that the weight equals the average
\&                   identity within the match residues.
.Ve
.Vb 10
\&               sim_matrix_name indicates the average identity with two
\&                   residues regarded as identical when their
\&                   substitution value is positive. The valid matrices
\&                   names are in matrices.h (pam250mt) . Matrices not
\&                   found in this header are considered to be
\&                   filenames. See the format section for matrices. For
\&                   instance, -weight=sim_pam250mt indicates that the
\&                   grouping used for similarity will be the set of
\&                   classes with positive substitutions. Other groups
\&                   include
.Ve
.Vb 2
\&                       sim_clustalw_col ( categories of clustalw
\&                       marked with :)
.Ve
.Vb 2
\&                       sim_clustalw_dot ( categories of clustalw
\&                       marked with .)
.Ve
.Vb 6
\&               Value indicates that all the pairs found in the
\&               alignments must be given the same weight equal to
\&               value. This is useful when the alignment one wishes to
\&               turn into a library must be given a pre-specified score
\&               (for instance if they come from a structure
\&               super-imposition program). Value is an integer:
.Ve
.Vb 1
\&                       -weight=1000
.Ve
.Vb 5
\&  Note       : Weight only affects methods that return an alignment to
\&               T-Coffee, such as ClustalW. On the contrary, the
\&               version of Lalign we use here returns a library where
\&               weights have already been applied and are therefore
\&               insensitive to the -weight flag.
.Ve
.Sh "\s-1SEQ_TO_ALIGN\s0"
.IX Subsection "SEQ_TO_ALIGN"
.Vb 3
\& Title       : SEQ_TO_ALIGN
\& Args        : filename
\& Default     : no file - align all the sequences
.Ve
.Vb 4
\& Description : You may not wish to align all the sequences brought in
\&               by the -in flag. Supplying the seq_to_align flag allows
\&               for this, the file is simply a list of names in Fasta
\&               format.
.Ve
.Vb 2
\&               However, note that library extension will be carried out
\&               on all the sequences.
.Ve
.SH "PARAMETERS FOR TREE COMPUTATION AND OUTPUT"
.IX Header "PARAMETERS FOR TREE COMPUTATION AND OUTPUT"
.Sh "\s-1NEWTREE\s0"
.IX Subsection "NEWTREE"
.Vb 6
\& Title       : NEWTREE
\& Args        : treefile
\& Default     : no file
\& Description : Indicates the name of the new tree to compute. The
\&               default will be <sequence_name>.dnd, or <run_name.dnd>.
\&               Format is Phylips tree format
.Ve
.Sh "\s-1USETREE\s0"
.IX Subsection "USETREE"
.Vb 10
\& Title       : USETREE
\& Args        : treefile
\& Default     : no file specified
\& Description : This flag indicates that rather than computing a new
\&               dendrogram, t_coffee can use a pre-computed one. The
\&               tree files are in phylips format and compatible with
\&               ClustalW. In most cases, using a pre-computed tree will
\&               halve the computation time required by t_coffee. It is
\&               also possible to use trees output by ClustalW or
\&               Phylips. Format is Phylips tree format
.Ve
.Sh "\s-1TREE_MODE\s0"
.IX Subsection "TREE_MODE"
.Vb 8
\& Title       : TREE_MODE
\& Args        : slow, fast, very_fast
\& Default     : very_fast
\& Description : This flag indicates the method used for computing the
\&               dendrogram.
\&               slow : the chosen dp_mode using the extended library,
\&               fast : The fasta dp_mode using the extended library.
\&               very_fast: The fasta dp_mode using pam250mt.
.Ve
.Sh "\s-1QUICKTREE\s0"
.IX Subsection "QUICKTREE"
.Vb 5
\& Title       : QUICKTREE
\& Args        :
\& Default     :
\& Description : This flag is kept for compatibility with ClustalW.
\&               It indicates that:  -tree_mode=very_fast
.Ve
.SH "PARAMETERS FOR ALIGNMENT OUTPUT"
.IX Header "PARAMETERS FOR ALIGNMENT OUTPUT"
.Sh "\s-1OUTFILE\s0"
.IX Subsection "OUTFILE"
.Vb 4
\& Title       : OUTFILE
\& Args        : out_aln file, default, no
\& Default     : default ( yourseqfile.aln)
\& Description : indicates name of output alignment file
.Ve
.Sh "\s-1OUTPUT\s0"
.IX Subsection "OUTPUT"
.Vb 5
\& Title       : OUTPUT
\& Args        : format1, format2
\& Default     : clustalw
\& Description : Indicated format for outputting outputfile
\&               Supported formats are:
.Ve
.Vb 12
\&               clustalw_aln, clustalw: ClustalW format.
\&               gcg, msf_aln : Msf alignment.
\&               pir_aln : pir alignment.
\&               fasta_aln : fasta alignment.
\&               phylip : Phylip format.
\&               pir_seq : pir sequences (no gap).
\&               fasta_seq : fasta sequences (no gap).
\&    As well as:
\&                score_html : causes the output to be a reliability
\&                             plot in HTML
\&                score_pdf : idem in PDF.
\&                score_ps : idem in postscript.
.Ve
.Vb 2
\&    More than one format can be indicated:
\&                -output=clustalw,gcg, score_html
.Ve
.Sh "\s-1CASE\s0"
.IX Subsection "CASE"
.Vb 4
\& Title       : CASE
\& Args        : upper, lower
\& Default     : upper
\& Description : triggers choice of the case for output
.Ve
.Sh "\s-1CPU\s0"
.IX Subsection "CPU"
.Vb 5
\& Title       : CPU
\& Args        : value
\& Default     : 0
\& Description : Indicates the cpu time (micro seconds) that must be
\&               added to the t_coffee computation time.
.Ve
.Sh "\s-1OUT_LIB\s0"
.IX Subsection "OUT_LIB"
.Vb 5
\& Title       : OUT_LIB
\& Args        : name of library, default, no
\& Default     : default
\& Description : Sets the name of the library output. Default implies
\&               <run_name>.tc_lib
.Ve
.Sh "\s-1OUTORDER\s0"
.IX Subsection "OUTORDER"
.Vb 5
\& Title       : OUTORDER
\& Args        : input or aligned
\& Default     : input
\& Description : Sets the name of the library output. Default implies
\&               <run_name>.tc_lib
.Ve
.Sh "\s-1SEQNOS\s0"
.IX Subsection "SEQNOS"
.Vb 5
\& Title       : SEQNOS
\& Args        : on or off
\& Default     : off
\& Description : Causes the output alignment to contain residue numbers
\&               at the end of each line:
.Ve
.SH "PARAMETERS FOR GENERIC OUTPUT"
.IX Header "PARAMETERS FOR GENERIC OUTPUT"
.Sh "\s-1RUN_NAME\s0"
.IX Subsection "RUN_NAME"
.Vb 6
\& Title       : RUN_NAME
\& Args        : your run name
\& Default     :
\& Description : This flag causes the prefix <your sequences> to be
\&               replaced by <your run name> when renaming the default
\&               files.
.Ve
.Sh "\s-1ALIGN\s0"
.IX Subsection "ALIGN"
.Vb 6
\& Title       : ALIGN
\& Args        :
\& Default     :
\& Description : Indicates that the program must produce the
\&               alignment. This flag is here for compatibility with
\&               ClustalW
.Ve
.Sh "\s-1QUIET\s0"
.IX Subsection "QUIET"
.Vb 5
\& Title       : QUIET
\& Args        : stderr, stdout, or filename, or nothing
\& Default     : stderr
\& Description : Redirects the standard output to either a file.
\&              -quiet on its own redirect the output to /dev/null.
.Ve
.Sh "\s-1CONVERT\s0"
.IX Subsection "CONVERT"
.Vb 9
\& Title       : CONVERT
\& Args        :
\& Default     :
\& Description : Indicates that the program must not compute the
\&               alignment but simply convert all the sequences,
\&               alignments and libraries into the format indicated with
\&               -output. This flag can also be used if you simply want
\&               to compute a library ( i.e. You have an alignment and
\&               you want to turn it into a library).
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org          - General discussion
\&  http://bio.perl.org/MailList.html             - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
 the bugs and their resolution.  Bug reports can be submitted via
 email or the web:
.PP
.Vb 2
\&  bioperl-bugs@bio.perl.org
\&  http://bio.perl.org/bioperl-bugs/
.Ve
.SH "AUTHOR \-  Jason Stajich, Peter Schattner"
.IX Header "AUTHOR -  Jason Stajich, Peter Schattner"
Email jason@chg.mc.duke.edu, schattner@alum.mit.edu
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "exists_tcoffee"
.IX Subsection "exists_tcoffee"
.Vb 6
\& Title   : exists_tcoffee
\& Usage   : $coffeefound = Bio::Tools::Run::Alignment::TCoffee->exists_tcoffee()
\& Function: Determine whether tcoffee program can be found on current host
\& Example :
\& Returns : 1 if tcoffee program found at expected location, 0 otherwise.
\& Args    :  none
.Ve
.Sh "align"
.IX Subsection "align"
.Vb 13
\& Title   : align
\& Usage   :
\&        $inputfilename = 't/cysprot.fa';
\&        $aln = $factory->align($inputfilename);
\&or
\&        $seq_array_ref = \e@seq_array; @seq_array is array of Seq objs
\&        $aln = $factory->align($seq_array_ref);
\& Function: Perform a multiple sequence alignment
\& Example :
\& Returns : Reference to a SimpleAlign object containing the
\&           sequence alignment.
\& Args    : Name of a file containing a set of unaligned fasta sequences
\&           or else an array of references to Bio::Seq objects.
.Ve
.Vb 5
\& Throws an exception if argument is not either a string (eg a
\& filename) or a reference to an array of Bio::Seq objects.  If
\& argument is string, throws exception if file corresponding to string
\& name can not be found. If argument is Bio::Seq array, throws
\& exception if less than two sequence objects are in array.
.Ve
.Sh "profile_align"
.IX Subsection "profile_align"
.Vb 7
\& Title   : profile_align
\& Usage   :
\& Function: Perform an alignment of 2 (sub)alignments
\& Example :
\& Returns : Reference to a SimpleAlign object containing the (super)alignment.
\& Args    : Names of 2 files containing the subalignments
\&         or references to 2 Bio::SimpleAlign objects.
.Ve
Throws an exception if arguments are not either strings (eg filenames)
or references to SimpleAlign objects.
.Sh "_run"
.IX Subsection "_run"
.Vb 8
\& Title   :  _run
\& Usage   :  Internal function, not to be called directly        
\& Function:  makes actual system call to tcoffee program
\& Example :
\& Returns : nothing; tcoffee output is written to a
\&           temporary file $TMPOUTFILE
\& Args    : Name of a file containing a set of unaligned fasta sequences
\&           and hash of parameters to be passed to tcoffee
.Ve
.Sh "_setinput"
.IX Subsection "_setinput"
.Vb 6
\& Title   :  _setinput
\& Usage   :  Internal function, not to be called directly        
\& Function:  Create input file for tcoffee program
\& Example :
\& Returns : name of file containing tcoffee data input
\& Args    : Seq or Align object reference or input file name
.Ve
.Sh "_setparams"
.IX Subsection "_setparams"
.Vb 7
\& Title   :  _setparams
\& Usage   :  Internal function, not to be called directly        
\& Function:  Create parameter inputs for tcoffee program
\& Example :
\& Returns : parameter string to be passed to tcoffee
\&           during align or profile_align
\& Args    : name of calling object
.Ve
