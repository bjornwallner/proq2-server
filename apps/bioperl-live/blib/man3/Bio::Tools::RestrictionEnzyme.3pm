.\" Automatically generated by Pod::Man version 1.02
.\" Wed Jun 27 13:31:01 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Bio::Tools::RestrictionEnzyme 3"
.TH Bio::Tools::RestrictionEnzyme 3 "perl v5.6.0" "2001-06-18" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Bio::Tools::RestrictionEnzyme.pm \- Bioperl object for a restriction endonuclease object.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Sh "Object Creation"
.IX Subsection "Object Creation"
.Vb 1
\&    require Bio::Tools::RestrictionEnzyme;
.Ve
.Vb 1
\&    ## Create a new object by name.
.Ve
.Vb 1
\&    $re1 = new Bio::Tools::RestrictionEnzyme(-NAME =>'EcoRI');
.Ve
.Vb 3
\&    ## Create a new object using special syntax
\&    ## which specifies the enzyme name, recognition site, and cut position.
\&    ## Used for enzymes not known to this module.
.Ve
.Vb 2
\&    $re2 = new Bio::Tools::RestrictionEnzyme(-NAME =>'EcoRV--GAT^ATC', 
\&                                             -MAKE =>'custom');
.Ve
.SH "INSTALLATION"
.IX Header "INSTALLATION"
This module is included with the central Bioperl distribution:
.PP
.Vb 2
\&   http://bio.perl.org/Core/Latest
\&   ftp://bio.perl.org/pub/DIST
.Ve
Follow the installation instructions included in the \s-1README\s0 file.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Bio::Tools::RestrictionEnzyme.pm module encapsulates generic data and 
methods for using restriction endonucleases for in silico restriction
analysis of \s-1DNA\s0 sequences.
.Sh "Considerations"
.IX Subsection "Considerations"
This module is a precursor for a more full featured version that may do such things as
download data from online databases such as REBase http://www.neb.com/rebase/.
Thus, there is currently no functionality for obtaining data about commercial
availability for a restriction enzyme.
.PP
At some point in the future, it may be best to derive RestrictionEnzymes from
a class such as Bio::Enzyme.pm or Bio::Prot::Protein.pm so that more data about 
the enzyme and related information can be easily obtained.
.PP
This module is currently in use at 
.PP
.Vb 1
\& http://genome-www.stanford.edu/Sacch3D/analysis/
.Ve
\&\fBThis module is at an early stage of development and is not yet ready for general use. \s-1API\s0 documentation is presently incomplete.\fR
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
Bio::Tools::RestrictionEnzyme.pm is a concrete class that inherits from \fBBio::Root::Object.pm\fR
and uses by delegation \fBBio::Seq.pm\fR.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other Bioperl modules.
Send your comments and suggestions preferably to one of the Bioperl mailing lists.
Your participation is much appreciated.
.PP
.Vb 2
\&   bioperl-l@bioperl.org             - General discussion
\&   http://bioperl.org/MailList.shtml - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track the bugs and 
their resolution. Bug reports can be submitted via email or the web:
.PP
.Vb 2
\&    bioperl-bugs@bio.perl.org                   
\&    http://bio.perl.org/bioperl-bugs/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Steve A. Chervitz, sac@genome.stanford.edu
.SH "VERSION"
.IX Header "VERSION"
Bio::Tools::RestrictionEnzyme.pm, 0.04
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1997\-8 Steve A. Chervitz. All Rights Reserved.
This module is free software; you can redistribute it and/or 
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 2
\&  Bio::Root::Object.pm    - Base class.
\&  Bio::Seq.pm             - Lightweight sequence object.
.Ve
.Vb 3
\&  http://bio.perl.org/Projects/modules.html  - Online module documentation
\&  http://bio.perl.org/Projects/Blast/        - Bioperl Blast Project     
\&  http://bio.perl.org/                       - Bioperl Project Homepage
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
Methods beginning with a leading underscore are considered private
and are intended for internal use by this module. They are
\&\fBnot\fR considered part of the public interface and are described here
for documentation purposes only.
.SH "new"
.IX Header "new"
.Vb 7
\& Title     : new
\& Purpose   : Initializes the RestrictionEnzyme object and calls
\&           : superclass constructor last (Bio:Seq.pm).
\& Returns   : n/a
\& Argument  : Parameters passed to new()
\& Comments  : The process of creating a new SeqPattern.pm object
\&           : ensures that the pattern string is untained.
.Ve
See Also   : the _make_custom manpage(), the _make_standard manpage(), \fBBio::Seq.\f(BIpm::_initialize()\fB\fR
.SH "_make_standard"
.IX Header "_make_standard"
.Vb 8
\& Title     : _make_standard
\& Usage     : n/a; automatically called by _initialize()
\& Purpose   : Permits custom RE object construction from name.
\&           : 'EcoRI'.
\& Returns   : Hash containing named parameters for Bio::Seq.pm constructor.
\& Argument  : String containing string with special syntax.
\& Throws    : Exception if the requested enzyme name is unavailable.
\&           : NOTE: Case sensitive.
.Ve
See Also   : the _initialize manpage(), the _make_custom manpage()
.SH "_make_custom"
.IX Header "_make_custom"
.Vb 9
\& Title     : _make_custom
\& Usage     : n/a; automatically called by _initialize()
\& Purpose   : Permits custom RE object construction from strings 
\&           : such as 'EcoRI--G^AATTC' as the name of the enzyme.
\& Returns   : Hash containing named parameters for Bio::Seq.pm constructor.
\& Argument  : String containing string with special syntax.
\& Throws    : Exception if the string has bad syntax.
\&           : Warning if the string did not specify cut position.
\&           :         Places cut site after 5'-most position.
.Ve
See Also   : the _initialize manpage()
.SH "cuts_after"
.IX Header "cuts_after"
.Vb 11
\& Title     : cuts_after
\& Usage     : $re->cuts_after();
\& Purpose   : Sets/Gets the position of cleavage relative to the 5' end.
\& Example   : $num = $re->cuts_after() 
\& Returns   : Integer
\& Argument  : Integer (optional)
\& Throws    : Exception if argument is non-numeric.
\& Access    : Public
\& Comments  : This method is only needed to change the cuts at
\&           : position. This data is automatically set during
\&           : construction.
.Ve
See Also   : the _make_standard manpage(), the _make_custom manpage()
.SH "site"
.IX Header "site"
.Vb 8
\& Title     : site
\& Usage     : $re->site();
\& Purpose   : Gets the recognition sequence for the enzyme. 
\& Example   : $seq_string = $re->site();
\& Returns   : String containing recognition sequence indicating 
\&           : cleavage site as in  'G^AATTC'.
\& Argument  : n/a
\& Throws    : n/a
.Ve
.SH "seq"
.IX Header "seq"
.Vb 7
\& Title     : seq
\& Usage     : $re->seq();
\& Purpose   : Get the Bio::Seq.pm-derived object representing 
\&           : the recognition sequence
\& Returns   : String
\& Argument  : n/a
\& Throws    : n/a
.Ve
See Also   : the string manpage(), the revcom manpage()
.SH "string"
.IX Header "string"
.Vb 7
\& Title     : string
\& Usage     : $re->string();
\& Purpose   : Get a string representing the recognition sequence.
\& Returns   : String
\& Argument  : n/a
\& Throws    : n/a
\& Comments  : Delegates to the Bio::Seq.pm-derived object.
.Ve
See Also   : the seq manpage(), the revcom manpage()
.SH "revcom"
.IX Header "revcom"
.Vb 10
\& Title     : revcom
\& Usage     : $re->revcom();
\& Purpose   : Get a string representing the reverse complement of
\&           : the recognition sequence.
\& Returns   : String
\& Argument  : n/a
\& Throws    : n/a
\& Comments  : Delegates to the Bio::Seq.pm-derived object, but needs to get
\&             out the string from it, as now Bio::Seq->revcom makes a Bio::Seq
\&             object
.Ve
See Also   : the seq manpage(), the string manpage()
.SH "cut_seq"
.IX Header "cut_seq"
.Vb 12
\& Title     : cut_seq
\& Usage     : $re->cut_seq(<sequence object>);
\& Purpose   : Conceptually cut or "digest" a DNA sequence with the given enzyme.
\& Example   : $string = $re->cut_seq(<sequence object>); 
\& Returns   : List of strings containing the resulting fragments.
\& Argument  : Reference to a Bio::Seq.pm-derived object.
\& Throws    : Exception if argument is not an object.
\&           : (Does not yet verify that it is derived from Bio::Seq.pm.)
\& Comments  : Strategy relies on Perl's built-in split() function.
\&           : Since split removes the recognition pattern, the resulting
\&           : fragments must be repaired after split()-ing.
\&           : There is currently no support for partial digestions.
.Ve
.SH "cut_locations"
.IX Header "cut_locations"
.Vb 9
\& Title     : cut_locations
\& Usage     : my $locations = $re->cut_locations(<sequence_object>);
\& Purpose   : Report the location of the recognition site(s) within
\&           : an input sequence. 
\& Example   : my $locations = $re->annotate_seq($seqObj);
\& Returns   : Arrayref of starting locations where enzyme would cut 
\& Argument  : Reference to a Bio::SeqI-derived sequence object.
\& Throws    : n/a
\& Comments  :
.Ve
.SH "annotate_seq"
.IX Header "annotate_seq"
.Vb 10
\& Title     : annotate_seq
\& Usage     : $re->annotate_seq(<sequence_object>);
\& Purpose   : Identify the location of the recognition site(s) within
\&           : an input sequence. Uses HTML.
\& Example   : $annot_seq = $re->annotate_seq($seqObj);
\& Returns   : String containing the annotated sequence.
\& Argument  : Reference to a Bio::Seq.pm-derived sequence object.
\& Throws    : n/a
\& Comments  : The annotated sequence must be viewed with a web
\&           : browser to see the location(s) of the recognition site(s).
.Ve
.SH "palindromic"
.IX Header "palindromic"
.Vb 10
\& Title     : palindromic
\& Usage     : $re->palindromic();
\& Purpose   : Determines if the recognition sequence is palindromic
\&           : for the current restriction enzyme.
\& Returns   : Boolean
\& Argument  : n/a
\& Throws    : n/a
\& Access    : Public 
\& Comments  : A palindromic site (EcoRI): 5-GAATTC-3
\&           :                             3-CTTAAG-5
.Ve
.SH "is_available"
.IX Header "is_available"
.Vb 12
\& Title     : is_available
\& Usage     : $re->is_available(<string containing name of enzyme>);
\& Purpose   : Determine if an enzyme is available (to this module).
\&           : (see the package lexical %RE).
\& Example   : $re->is_available('EcoRI');
\&           : &Bio::Tools::RestrictionEnzyme::is_available($object,'EcoRI');
\& Returns   : Boolean
\& Argument  : String
\& Throws    : n/a
\& Comments  : This method does NOT give information about
\&           : commercial availability (yet). 
\&           : Enzyme names are CASE SENSITIVE.
.Ve
See Also   : the available_list manpage()
.Sh "name"
.IX Subsection "name"
.Vb 6
\& Title   : name
\& Usage   : $obj->name($newval)
\& Function: 
\& Example : 
\& Returns : value of name
\& Args    : newvalue (optional)
.Ve
.SH "available_list"
.IX Header "available_list"
.Vb 9
\& Title     : available_list
\& Usage     : $re->available_list([<integer>]);
\& Purpose   : Retrieve a list of currently available enzymes.
\& Example   : @all = $re->available_list();  ## All enzymes
\&           : @six_cutters = $re->available_list(6);  ## All 6-cutters
\& Returns   : List of strings
\& Argument  : Integer (optional)
\& Throws    : n/a
\& Comments  : This method may be more appropriate for a REData.pm class.
.Ve
See Also   : the is_available manpage()
.SH "FOR DEVELOPERS ONLY"
.IX Header "FOR DEVELOPERS ONLY"
.Sh "Data Members"
.IX Subsection "Data Members"
Information about the various data members of this module is provided for those 
wishing to modify or understand the code. Two things to bear in mind: 
.Ip "1 Do \s-1NOT\s0 rely on these in any code outside of this module." 4
.IX Item "1 Do NOT rely on these in any code outside of this module."
All data members are prefixed with an underscore to signify that they are private.
Always use accessor methods. If the accessor doesn't exist or is inadequate, 
create or modify an accessor (and let me know, too!). 
.Ip "2 This documentation may be incomplete and out of date." 4
.IX Item "2 This documentation may be incomplete and out of date."
It is easy for this documentation to become obsolete as this module is still evolving. 
Always double check this info and search for members not described here.
.PP
An instance of Bio::Tools::RestrictionEnzyme.pm is a blessed reference to a hash
containing all or some of the following fields:
.PP
.Vb 8
\& FIELD          VALUE
\& ------------------------------------------------------------------------
\& _seq         : A Bio::Seq.pm-derived object.
\&              :
\& _site        : String containing the recognition sequence.
\&              :
\& _cuts_after  : Integer indicating the cleavage position relative to the 
\&              : 5' end of the recognition sequence.
.Ve
.Vb 1
\& INHERITED DATA MEMBERS:
.Ve
.Vb 1
\& _name      : (From Bio::Bio::Root::Object.pm) String containing name of the enzyme.
.Ve
