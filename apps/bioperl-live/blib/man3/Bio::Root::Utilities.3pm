.\" Automatically generated by Pod::Man version 1.02
.\" Wed Jun 27 13:30:55 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Bio::Root::Utilities 3"
.TH Bio::Root::Utilities 3 "perl v5.6.0" "2001-05-16" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Bio::Root::Utilities \- General-purpose utility module
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Sh "Object Creation"
.IX Subsection "Object Creation"
.Vb 1
\&    use Bio::Root::Utilities qw(:obj);
.Ve
There is no need to create a new Bio::Root::Utilities.pm object when
the \f(CW\*(C`:obj\*(C'\fR tag is used. This tag will import the static \f(CW$Util\fR
object created by Bio::Root::Utilities.pm into your name space. This
saves you from having to call \f(CW\*(C`new Bio::Root::Utilities\*(C'\fR.
.PP
You are free to not use the :obj tag and create the object as you
like, but a Bio::Root::Utilities object is not configurable; any given
script only needs a single copy.
.PP
.Vb 1
\&    $date_stamp = $Util->date_format('yyy-mm-dd');
.Ve
.Vb 1
\&    $clean = $Util->untaint($dirty);
.Ve
.Vb 1
\&    $Util->mail_authority("Something you should know about...");
.Ve
.Vb 1
\&    ...and other methods. See below.
.Ve
.SH "INSTALLATION"
.IX Header "INSTALLATION"
This module is included with the central Bioperl distribution:
.PP
.Vb 2
\&   http://bio.perl.org/Core/Latest
\&   ftp://bio.perl.org/pub/DIST
.Ve
Follow the installation instructions included in the \s-1README\s0 file.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Provides general-purpose utilities of potential interest to any Perl script.
Scripts and modules are expected to use the static \f(CW$Util\fR object exported by
this package with the \f(CW\*(C`:obj\*(C'\fR tag.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
\&\fBBio::Root::Utilities.pm\fR inherits from \fBBio::Root::Object.pm\fR.
It also relies on the \s-1GNU\s0 gzip program for file compression/uncompression.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 2
\&  Bio::Root::Object.pm       - Core object
\&  Bio::Root::Global.pm       - Manages global variables/constants
.Ve
.Vb 2
\&  http://bio.perl.org/Projects/modules.html  - Online module documentation
\&  http://bio.perl.org/                       - Bioperl Project Homepage
.Ve
.Vb 1
\&  FileHandle.pm (included in the Perl distribution or CPAN).
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other Bioperl modules.
Send your comments and suggestions preferably to one of the Bioperl mailing lists.
Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org             - General discussion
\&  http://bioperl.org/MailList.shtml - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track the bugs and 
their resolution. Bug reports can be submitted via email or the web:
.PP
.Vb 2
\&    bioperl-bugs@bio.perl.org                   
\&    http://bio.perl.org/bioperl-bugs/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Steve A. Chervitz, sac@genome.stanford.edu
.PP
See the the FEEDBACK manpage section for where to send bug reports and comments.
.SH "VERSION"
.IX Header "VERSION"
Bio::Root::Utilities.pm, 0.042
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
This module was developed under the auspices of the Saccharomyces Genome
Database:
    http://genome-www.stanford.edu/Saccharomyces
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1997\-98 Steve A. Chervitz. All Rights Reserved.
This module is free software; you can redistribute it and/or 
modify it under the same terms as Perl itself.
.SH "APPENDIX"
.IX Header "APPENDIX"
Methods beginning with a leading underscore are considered private
and are intended for internal use by this module. They are
\&\fBnot\fR considered part of the public interface and are described here
for documentation purposes only.
.Sh "date_format"
.IX Subsection "date_format"
.Vb 47
\& Title     : date_format
\& Usage     : $Util->date_format( [FMT], [DATE]) 
\& Purpose   : -- Get a string containing the formated date or time
\&           :    taken when this routine is invoked.
\&           : -- Provides a way to avoid using `date`.
\&           : -- Provides an interface to localtime().
\&           : -- Interconverts some date formats.
\&           :
\&           : (For additional functionality, use Date::Manip or
\&           :  Date::DateCalc available from CPAN).
\& Example   : $Util->date_format();
\&           : $date = $Util->date_format('yyyy-mmm-dd', '11/22/92');
\& Returns   : String (unless 'list' is provided as argument, see below)
\&           :
\&           :   'yyyy-mm-dd'  = 1996-05-03    # default format. 
\&           :   'yyyy-dd-mm'  = 1996-03-05   
\&           :   'yyyy-mmm-dd' = 1996-May-03
\&           :   'd-m-y'       = 3-May-1996
\&           :   'd m y'       = 3 May 1996
\&           :   'dmy'         = 3may96
\&           :   'mdy'         = May 3, 1996
\&           :   'ymd'         = 96may3
\&           :   'md'          = may3
\&           :   'year'        = 1996
\&           :   'hms'         = 23:01:59  # 'hms' can be tacked on to any of the above options
\&           :                             # to add the time stamp: eg 'dmyhms'
\&           :   'full' | 'unix' = UNIX-style date: Tue May  5 22:00:00 1998
\&           :   'list'          = the contents of localtime(time) in an array.
\& Argument  : (all are optional)
\&           : FMT  = yyyy-mm-dd | yyyy-dd-mm | yyyy-mmm-dd |
\&           :        mdy | ymd | md | d-m-y | hms | hm 
\&           :        ('hms' may be appended to any of these to 
\&           :        add a time stamp)
\&           :
\&           : DATE = String containing date to be converted.
\&           :        Acceptable input formats:
\&           :           12/1/97 (for 1 December 1997)
\&           :           1997-12-01 
\&           :           1997-Dec-01
\& Throws    : 
\& Comments  : Relies on the $BASE_YEAR constant exported by Bio:Root::Global.pm.
\&           :
\&           : If you don't care about formatting or using backticks, you can
\&           : always use: $date = `date`;
\&           :
\&           : For more features, use Date::Manip.pm, (which I should 
\&           : probably switch to...)
.Ve
See Also   : the file_date manpage(), the month2num manpage()
.Sh "month2num"
.IX Subsection "month2num"
.Vb 7
\& Title      : month2num
\& Purpose    : Converts a string containing a name of a month to integer
\&            : representing the number of the month in the year.
\& Example    : $Util->month2num("march");  # returns 3
\& Argument   : The string argument must contain at least the first
\&            : three characters of the month's name. Case insensitive.
\& Throws     : Exception if the conversion fails.
.Ve
.Sh "num2month"
.IX Subsection "num2month"
.Vb 5
\& Title   : num2month
\& Purpose : Does the opposite of month2num.
\&         : Converts a number into a string containing a name of a month.
\& Example : $Util->num2month(3);  # returns 'Mar'
\& Throws  : Exception if supplied number is out of range.
.Ve
.Sh "compress"
.IX Subsection "compress"
.Vb 23
\& Title     : compress
\& Usage     : $Util->compress(filename, [tmp]);
\& Purpose   : Compress a file to conserve disk space.
\& Example   : $Util->compress("/usr/people/me/data.txt");
\& Returns   : String (name of compressed file, full path).
\& Argument  : filename = String (name of file to be compressed, full path).
\&           :            If the supplied filename ends with '.gz' or '.Z',
\&           :            that extension will be removed before attempting to compress.
\&           : tmp = boolean, 
\&           :    If true, (or if user is not the owner of the file)
\&           :         the file is compressed to a tmp file
\&           :    If false, file is clobbered with the compressed version.
\& Throws    : Exception if file cannot be compressed
\&           : If user is not owner of the file, generates a warning
\&           :   and compresses to a tmp file.
\&           :   To avoid this warning, use the -o file test operator
\&           :   and call this function with a true second argument.
\& Comments  : Attempts to compress using gzip (default compression level).
\&           : If that fails, will attempt to use compress.
\&           : In some situations, the full path to the gzip executable
\&           : may be required. This can be specified with the $GNU_PATH
\&           : package global variable. When installed, $GNU_PATH is an
\&           : empty string.
.Ve
See Also   : the uncompress manpage()
.Sh "uncompress"
.IX Subsection "uncompress"
.Vb 23
\& Title     : uncompress
\& Usage     : $Util->uncompress(filename, [tmp]);
\& Purpose   : Uncompress a file to conserve disk space.
\& Example   : $Util->uncompress("/usr/people/me/data.txt.gz");
\& Returns   : String (name of uncompressed file, full path).
\& Argument  : filename = String (name of file to be uncompressed, full path).
\&           :           If the supplied filename does not end with '.gz' or '.Z'
\&           :           a '.gz' will be appended before attempting to uncompress.
\&           : tmp = boolean, 
\&           :    If true, (or if user is not the owner of the file)
\&           :         the file is uncompressed to a tmp file
\&           :    If false, file is clobbered with the uncompressed version.
\& Throws    : Exception if file cannot be uncompressed
\&           : If user is not owner of the file, generates a warning
\&           :   and uncompresses to a tmp file.
\&           :   To avoid this warning, use the -o file test operator
\&           :   and call this function with a true second argument.
\& Comments  : Attempts to uncompress using gunzip.
\&           : If that fails, will use uncompress.
\&           : In some situations, the full path to the gzip executable
\&           : may be required. This can be specified with the $GNU_PATH
\&           : package global variable. When installed, $GNU_PATH is an
\&           : empty string.
.Ve
See Also   : the compress manpage()
.Sh "file_date"
.IX Subsection "file_date"
.Vb 10
\& Title    : file_date
\& Usage    : $Util->file_date( filename [,date_format])
\& Purpose  : Obtains the date of a given file.
\&          : Provides flexible formatting via date_format().
\& Returns  : String = date of the file as: yyyy-mm-dd (e.g., 1997-10-15)
\& Argument : filename = string, full path name for file
\&          : date_format = string, desired format for date (see date_format()).
\&          :               Default = yyyy-mm-dd
\& Thows    : Exception if no file is provided or does not exist.
\& Comments : Uses the mtime field as obtained by stat().
.Ve
.Sh "untaint"
.IX Subsection "untaint"
.Vb 16
\& Title   : untaint
\& Purpose : To remove nasty shell characters from untrusted data
\&         : and allow a script to run with the -T switch.
\&         : Potentially dangerous shell meta characters:  &;`'\e"|*?!~<>^()[]{}$\en\er
\&         : Accept only the first block of contiguous characters:
\&         :  Default allowed chars = "-\ew.', ()"
\&         :  If $relax is true  = "-\ew.', ()\e/=%:^<>*"
\& Usage   : $Util->untaint($value, $relax)
\& Returns : String containing the untained data.
\& Argument: $value = string 
\&         : $relax = boolean
\& Comments:
\&     This general untaint() function may not be appropriate for every situation.
\&     To allow only a more restricted subset of special characters 
\&     (for example, untainting a regular expression), then using a custom 
\&     untainting mechanism would permit more control.
.Ve
.Vb 1
\&     Note that special trusted vars (like $0) require untainting.
.Ve
.Sh "mean_stdev"
.IX Subsection "mean_stdev"
.Vb 6
\& Title    : mean_stdev
\& Usage    : ($mean, $stdev) = $Util->mean_stdev( @data )
\& Purpose  : Calculates the mean and standard deviation given a list of numbers.
\& Returns  : 2-element list (mean, stdev)
\& Argument : list of numbers (ints or floats)
\& Thows    : n/a
.Ve
.Sh "count_files"
.IX Subsection "count_files"
.Vb 17
\& Title    : count_files
\& Purpose  : Counts the number of files/directories within a given directory.
\&          : Also reports the number of text and binary files in the dir
\&          : as well as names of these files and directories.
\& Usage    : count_files(\e%data)
\&          :   $data{-DIR} is the directory to be analyzed. Default is ./
\&          :   $data{-PRINT} = 0|1; if 1, prints results to STDOUT, (default=0).
\& Argument : Hash reference (empty)
\& Returns  : n/a;
\&          : Modifies the hash ref passed in as the sole argument.
\&          :  $$href{-TOTAL}            scalar
\&          :  $$href{-NUM_TEXT_FILES}   scalar
\&          :  $$href{-NUM_BINARY_FILES} scalar
\&          :  $$href{-NUM_DIRS}         scalar
\&          :  $$href{-T_FILE_NAMES}     array ref
\&          :  $$href{-B_FILE_NAMES}     array ref
\&          :  $$href{-DIRNAMES}         array ref
.Ve
.Sh "create_filehandle"
.IX Subsection "create_filehandle"
.Vb 22
\& Usage     : $object->create_filehandle(<named parameters>);
\& Purpose   : Create a FileHandle object from a file or STDIN.
\&           : Mainly used as a helper method by read() and get_newline().
\& Example   : $data = $object->create_filehandle(-FILE =>'usr/people/me/data.txt')
\& Argument  : Named parameters (case-insensitive):
\&           :  (all optional)
\&           :    -CLIENT  => object reference for the object submitting
\&           :                the request. This facilitates use by
\&           :                Bio::Root::IOManager::read(). Default = $Util.
\&           :    -FILE    => string (full path to file) or a reference
\&           :                to a FileHandle object or typeglob. This is an
\&           :                optional parameter (if not defined, STDIN is used).
\& Returns   : Reference to a FileHandle object.   
\& Throws    : Exception if cannot open a supplied file or if supplied with a
\&           : reference that is not a FileHandle ref.
\& Comments  : If given a FileHandle reference, this method simply returns it.
\&           : This method assumes the user wants to read ascii data. So, if
\&           : the file is binary, it will be treated as a compressed (gzipped)
\&           : file and access it using gzip -ce. The problem here is that not
\&           : all binary files are necessarily compressed. Therefore, 
\&           : this method should probably have a -mode parameter to
\&           : specify ascii or binary.
.Ve
See Also :  the get_newline manpage(), the Bio::Root::IOManager::read manpage(),
.Sh "get_newline"
.IX Subsection "get_newline"
.Vb 8
\& Usage     : $object->get_newline(<named parameters>);
\& Purpose   : Determine the character(s) used for newlines in a given file or
\&           : input stream. Delegates to Bio::Root::Utilities::get_newline()
\& Example   : $data = $object->get_newline(-CLIENT => $anObj,
\&           :                                   -FILE =>'usr/people/me/data.txt')
\& Argument  : Same arguemnts as for create_filehandle().
\& Returns   : Reference to a FileHandle object.   
\& Throws    : Propogates and exceptions thrown by Bio::Root::Utilities::get_newline().
.Ve
See Also : the taste_file manpage(), the create_filehandle manpage()
.Sh "taste_file"
.IX Subsection "taste_file"
.Vb 13
\& Usage     : $object->taste_file( <FileHandle> );
\&           : Mainly a utility method for get_newline().
\& Purpose   : Sample a filehandle to determine the character(s) used for a newline.
\& Example   : $char = $Util->taste_file($FH)
\& Argument  : Reference to a FileHandle object.
\& Returns   : String containing an octal represenation of the newline character string.
\&           :   Unix = "\e012"  ("\en")
\&           :   Win32 = "\e012\e015" ("\er\en")
\&           :   Mac = "\e015"  ("\er")
\& Throws    : Exception if no input is read within $TIMEOUT_SECS seconds.
\&           : Exception if argument is not FileHandle object reference.
\&           : Warning if cannot determine neewline char(s).
\& Comments  : Based on code submitted by Vicki Brown (vlb@deltagen.com).
.Ve
See Also : the get_newline manpage()
.Sh "mail_authority"
.IX Subsection "mail_authority"
.Vb 3
\& Title    : mail_authority
\& Usage    : $Util->mail_authority( $message )
\& Purpose  : Syntactic sugar to send email to $Bio::Root::Global::AUTHORITY
.Ve
See Also  : the send_mail manpage()
.Sh "send_mail"
.IX Subsection "send_mail"
.Vb 19
\& Title    : send_mail
\& Usage    : $Util->send_mail( named_parameters )
\& Purpose  : Provides an interface to /usr/lib/sendmail  
\& Returns  : n/a
\& Argument : Named parameters:  (case-insensitive)
\&          :  -TO   => e-mail address to send to
\&          :  -SUBJ => subject for message  (optional)
\&          :  -MSG  => message to be sent   (optional)
\&          :  -CC   => cc: e-mail address   (optional)
\& Thows    : Exception if TO: address appears bad or is missing
\& Comments : Based on  TomC's tip at:
\&          :   http://www.perl.com/CPAN-local/doc/FMTEYEWTK/safe_shellings
\&          :
\&          : Using default 'From:' information.
\&          :   sendmail options used:
\&          :      -t: ignore the address given on the command line and 
\&          :          get To:address from the e-mail header.
\&          :     -oi: prevents send_mail from ending the message if it 
\&          :          finds a period at the start of a line.
.Ve
See Also  : the mail_authority manpage()
.Sh "yes_reply"
.IX Subsection "yes_reply"
.Vb 9
\& Title   : yes_reply()
\& Usage   : $Util->yes_reply( [query_string]);
\& Purpose : To test an STDIN input value for affirmation.
\& Example : print +( $Util->yes_reply('Are you ok') ? "great!\en" : "sorry.\en" );
\&         : $Util->yes_reply('Continue') || die;
\& Returns : Boolean, true (1) if input string begins with 'y' or 'Y' 
\& Argument: query_string = string to be used to prompt user (optional)
\&         : If not provided, 'Yes or no' will be used.
\&         : Question mark is automatically appended.
.Ve
.Sh "request_data"
.IX Subsection "request_data"
.Vb 9
\& Title   : request_data()
\& Usage   : $Util->request_data( [value_name]);
\& Purpose : To request data from a user to be entered via keyboard (STDIN).
\& Example : $name = $Util->request_data('Name');
\&         : # User will see: % Enter Name: 
\& Returns : String, (data entered from keyboard, sans terminal newline.)
\& Argument: value_name = string to be used to prompt user.
\&         : If not provided, 'data' will be used, (not very helpful).
\&         : Question mark is automatically appended.
.Ve
.Sh "verify_version"
.IX Subsection "verify_version"
.Vb 3
\& Purpose : Checks the version of Perl used to invoke the script.
\&         : Aborts program if version is less than the given argument.
\& Usage   : verify_version('5.000')
.Ve
