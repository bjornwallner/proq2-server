.\" Automatically generated by Pod::Man version 1.02
.\" Wed Jun 27 13:29:55 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Bio::Root::Err 3"
.TH Bio::Root::Err 3 "perl v5.6.0" "2001-05-16" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Bio::Root::Err.pm \-  Exception class for Perl 5 objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Sh "Object Creation"
.IX Subsection "Object Creation"
\&\fBBio::Root::Object.pm\fR is a wrapper for Bio::Root::Err.pm objects so clients
do not have to create these objects directly. Please see
\&\fB\f(BIBio::Root::Object::throw()\fB\fR as well as the _initialize manpage()
for a more complete treatment
of how to create Bio::Root::Err.pm objects.
.PP
.Vb 1
\&  use Bio::Root::Err;
.Ve
.Vb 3
\&  $err = Bio::Root::Err->new(-MSG     =>"Bad data: $data",
\&                             -STACK   =>[\ecaller(0), \ecaller(1), ...],
\&                             );
.Ve
To use the the throw manpage() method directly:
.PP
.Vb 1
\&  use Bio::Root::Err (:std);
.Ve
.Vb 1
\&  throw( $object_ref, 'Error message', 'additional note', 'technical note');
.Ve
The \f(CW\*(C`$object_ref\*(C'\fR argument should be a reference to a Bio::Root::Object.pm.
.PP
See also the USAGE manpage.
.SH "INSTALLATION"
.IX Header "INSTALLATION"
This module is included with the central Bioperl distribution:
.PP
.Vb 2
\&   http://bio.perl.org/Core/Latest
\&   ftp://bio.perl.org/pub/DIST
.Ve
Follow the installation instructions included in the \s-1README\s0 file.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A Bio::Root::Err.pm object encapsulates data and methods that facilitate
working with errors and exceptional conditions that arise in Perl objects.
There are no biological semantics in this module, as one may suspect from its
location in the Bio:: hierarchy. The location of this module serves to
separate it from the namespaces of other Perl Error modules. It also makes it convenient
for use by Bio:: objects.
.PP
The motivation for having an error object is to allow
Perl 5 objects to deal with errors or exceptional conditions that
can arise during their construction or manipulation. For example:
.PP
.Vb 5
\& (1) A complex object can break in many ways.
\& (2) Tracking errors within a set of nested objects can be difficult.
\& (3) The way an error is reported should be context-sensitive:
\&     a web-user needs different information than does the
\&     software engineer.
.Ve
Bio::Root::Err.pm, along with \fBBio::Root::Object.pm\fR, attempt to make such problems
tractable. Please see the \fBBio::Root::Object.pm\fR documentation for more about
my error handling philosophy.
.PP
A \fBBio::Root::Err.pm\fR object is an example of a Vector-Object: This module inherits
both from \fBBio::Root::Object.pm\fR and \fBBio::Root::Vector.pm\fR. This permits a single Err
object to exist within a linked list of Err objects \s-1OR\s0 alone.
See the \fBBio::Root::Vector.pm\fR documentation for more about Vector-Objects.
.PP
\&\fBThe \s-1API\s0 for this module is not complete since the module is under development.\fR
.Sh "Other Exception Strategies"
.IX Subsection "Other Exception Strategies"
Exception handling with Perl 5 objects is currently not as evolved as one
would like. The error handling used by \fBBio::Root::Object.pm\fR and Bio::Root::Err.pm
relies on Perl's built-in error/exception handling with eval/die,
which is not very object-aware. What I've attempted to do with these
modules is to make eval/die more object-savvy, as well as make Perl 5
objects more eval/die-savvy (but the current strategy is basically a hack).
.PP
It would be great if Perl could throw an object reference with \fIdie()\fR.
This would permit more intelligent and easy to write exception handlers.
For now the Err.pm object is reconstructed from the output of the string manpage().
.PP
There are some other third-party Exception classes such as
Torsten Ekedahl's \fBExperimental::Exception.pm\fR or
Ken Steven's Throwable.pm or
Graham Barr's Error.pm (see the Other Exception Modules entry elsewhere in this document). These modules
attempt to introduce a traditional \*(L"try-catch-throw\*(R"
exception handling mechanism into Perl. Future version of my modules
(and perhaps erl itself) may utilize one of these.
.SH "USAGE"
.IX Header "USAGE"
A demo script that illustrates working with Bio::Root::Err objects is available at:
.PP
.Vb 1
\&    http://bio.perl.org/Core/Examples/Root_object/error.pl
.Ve
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
Bio::Root::Err.pm inherits from \fBBio::Root::Object.pm\fR and \fBBio::Root::Vector.pm\fR.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other Bioperl modules.
Send your comments and suggestions preferably to one of the Bioperl mailing lists.
Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org             - General discussion
\&  http://bioperl.org/MailList.shtml - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track the bugs and
their resolution. Bug reports can be submitted via email or the web:
.PP
.Vb 2
\&    bioperl-bugs@bio.perl.org
\&    http://bio.perl.org/bioperl-bugs/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Steve A. Chervitz, sac@genome.stanford.edu
.PP
See the the FEEDBACK manpage section for where to send bug reports and comments.
.SH "VERSION"
.IX Header "VERSION"
Bio::Root::Err.pm, 0.041
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 3
\&  Bio::Root::Object.pm    - Core object
\&  Bio::Root::Vector.pm    - Vector object
\&  Bio::Root::Global.pm    - Manages global variables/constants
.Ve
.Vb 2
\&  http://bio.perl.org/Projects/modules.html  - Online module documentation
\&  http://bio.perl.org/                       - Bioperl Project Homepage
.Ve
.Sh "Other Exception Modules"
.IX Subsection "Other Exception Modules"
.Vb 3
\&  Experimental::Exception.pm   - ftp://ftp.matematik.su.se/pub/teke/
\&  Error.pm                     - http://www.cpan.org/authors/id/GBARR/
\&  Throwable.pm                 - mailto:kstevens@globeandmail.ca
.Ve
.Vb 1
\&  http://genome-www.stanford.edu/perlOOP/exceptions.html
.Ve
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
This module was developed under the auspices of the Saccharomyces Genome
Database:
    http://genome-www.stanford.edu/Saccharomyces
.PP
Other Bioperl developers contributed ideas including Ewan Birney, Ian Korf,
Chris Dagdigian, Georg Fuellen, and Steven Brenner.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1996\-8 Steve A. Chervitz. All Rights Reserved.
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "TODO"
.IX Header "TODO"
.Ip "\(bu Improve documentation." 2
.IX Item "Improve documentation."
.Ip "\(bu Experiment with other Exception modules." 2
.IX Item "Experiment with other Exception modules."
.SH "APPENDIX"
.IX Header "APPENDIX"
Methods beginning with a leading underscore are considered private
and are intended for internal use by this module. They are
\&\fBnot\fR considered part of the public interface and are described here
for documentation purposes only.
.Sh "_initialize"
.IX Subsection "_initialize"
.Vb 15
\& Usage     : n/a; automatically called by Bio::Root::Object::new()
\& Purpose   : Initializes key Bio::Root::Err.pm data.
\& Returns   : String (the -MAKE constructor option.)
\& Argument  : Named parameters passed from new()
\&           : (PARAMETER TAGS CAN BE UPPER OR LOWER CASE).
\&           :   -MSG     => basic description of the exception.
\&           :   -NOTE    => additional note to indicate cause of exception
\&           :               or provide information about how to fix/report it
\&           :   -TECH    => addition note with technical information
\&           :               of interest to developer.
\&           :   -STACK   => array reference containing caller() data
\&           :   -TYPE    => string, one of @Bio::Root::Err::ERR_TYPES
\&           :               (default = exception).
\&           :   -CONTEXT => array reference
\&           :   -OBJ     => Err object to be cloned.
.Ve
See Also   : \fB\f(BIBio::Root::Object::_set_err()\fB\fR
.Sh "_set_clone"
.IX Subsection "_set_clone"
.Vb 5
\& Usage     : n/a; internal method used by _initialize()
\& Purpose   : Copy all Bio::Root::Err.pm data members into a new object reference.
\& Argument  : object ref for object to be cloned.
\& Comments  : Does not cloning the vector since this method is
\&           : typically used to extract a single Err object from its vector.
.Ve
.Sh "_build_from_string"
.IX Subsection "_build_from_string"
.Vb 5
\& Usage     : n/a; called by _initialize()
\& Purpose   : Re-create an Err.pm object from a string containing Err data.
\& Returns   : boolean, (was the Err.pm object rebuilt?)
\& Argument  : message, note, tech passed from _initialize()
\&           : The message is examined to see if it contains a stringified error.
.Ve
See Also   : the _initialize manpage(), the string manpage(), the _has_err manpage()
.Sh "_has_err"
.IX Subsection "_has_err"
.Vb 3
\& Usage     : n/a; internal method called by _build_from_string()
\& Purpose   : Deterimine if an Err has already been set to prevent duplicate Errs.
\& Returns   : boolean
.Ve
See Also   : the _build_from_string manpage()
.Sh "_set_type"
.IX Subsection "_set_type"
.Vb 4
\& Usage     : n/a; internal method
\& Purpose   : Sets the type of Err (warning, exception, fatal)
\&           : Called by _initialize()
\& Argument  : string
.Ve
.Sh "_set_list_data"
.IX Subsection "_set_list_data"
.Vb 10
\& Usage     : n/a; internal method used by set().
\&           : $err->_set_list_data( $member, $data);
\& Purpose   : For data members which are anonymous arrays: note, tech, stack,
\&           : adds the given data to the list.
\& Arguments : $member = any of qw(note tech stack)
\&           : $data   = string
\& Comments  : Splits $data on tab. Each item
\&           : of the split is a new entry.
\&           : To clobber the current data (unusual situation), you must first
\&           : call set() with no data then call again with desired data.
.Ve
.Sh "_set_context"
.IX Subsection "_set_context"
.Vb 4
\& Usage     : n/a; internal method used by set().
\& Purpose   : Sets the object containment context for the exception.
\&           : (this is the hierarchy of objects in which the
\&           :  exception occurred.)
.Ve
.Sh "set"
.IX Subsection "set"
.Vb 10
\& Usage     : $err->set( $member, $data );
\& Purpose   : General accessor for setting any Err.pm data member.
\& Example   : $err->set('note', 'this is an additional note.');
\& Returns   : n/a
\& Argument  : $member = string, any of qw(msg type note tech stack)
\&           : $data   = string
\& Throws    : n/a
\& Comments  : Note, tech, and stack items are appended to any existing
\&           : notes, tech notes, and stack.
\&           : There should be no need to mess with the stack.
.Ve
.Sh "msg"
.IX Subsection "msg"
.Vb 4
\& Usage     : $message = $err->msg;
\& Purpose   : Get the main message associated with the exception.
\& Returns   : String
\& Argument  : optional string to be used as a delimiter.
.Ve
See Also   : the get manpage(), the string manpage()
.Sh "type"
.IX Subsection "type"
.Vb 4
\& Usage     : $type = $err->type;
\& Purpose   : Get the type of Err (warning, exception, fatal)
\& Returns   : String
\& Argument  : optional string to be used as a delimiter.
.Ve
See Also   : the get manpage(), the string manpage()
.Sh "note"
.IX Subsection "note"
.Vb 5
\& Usage     : $note = $err->note;
\&           : $note = $err->note('<P>');
\& Purpose   : Get any general note associated with the exception.
\& Returns   : String
\& Argument  : optional string to be used as a delimiter.
.Ve
See Also   : the get manpage(), the string manpage()
.Sh "tech"
.IX Subsection "tech"
.Vb 5
\& Usage     : $tech = $err->tech;
\&           : $tech = $err->tech('<P>');
\& Purpose   : Get any technical note associate with the exception.
\& Returns   : String
\& Argument  : optional string to be used as a delimiter.
.Ve
See Also   : the get manpage(), the string manpage()
.Sh "stack"
.IX Subsection "stack"
.Vb 5
\& Usage     : $stack = $err->stack;
\&           : $stack = $err->stack('<P>');
\& Purpose   : Get the call stack for the exception.
\& Returns   : String
\& Argument  : optional string to be used as a delimiter.
.Ve
See Also   : the get manpage(), the string manpage()
.Sh "context"
.IX Subsection "context"
.Vb 5
\& Usage     : $context = $err->context;
\&           : $context = $err->context('<P>');
\& Purpose   : Get the containment context of the object which generated the exception.
\& Returns   : String
\& Argument  : optional string to be used as a delimiter.
.Ve
See Also   : the get manpage(), the string manpage()
.Sh "get"
.IX Subsection "get"
.Vb 7
\& Usage     : $err->get($member, $delimiter);
\& Purpose   : Get specific data from the Err.pm object.
\& Returns   : String in scalar context.
\&           : Array in list context.
\& Argument  : $member = any of qw(msg type note tech stack context) or combination.
\&           : $delimiter = optional string to be used as a delimiter
\&           : between member data.
.Ve
See Also   : the string manpage(), the msg manpage(), the note manpage(), the tech manpage(), the type manpage(), the context manpage(), the stack manpage()
.Sh "_get_list_data"
.IX Subsection "_get_list_data"
.Vb 4
\& Usage     : n/a; internal method used by get()
\& Purpose   : Gets data for members which are list refs (note, tech, stack, context)
\& Returns   : Array
\& Argument  : ($member, $delimiter)
.Ve
See Also   : the get manpage()
.Sh "get_all"
.IX Subsection "get_all"
.Vb 5
\& Usage     : (same as get())
\& Purpose   : Get specific data from all errors in an Err.pm object.
\& Returns   : Array in list context.
\&           : String in scalar context.
\& Argument  : (same as get())
.Ve
See Also   : the get manpage()
.Sh "_add_note"
.IX Subsection "_add_note"
.Vb 2
\& Usage     : n/a; internal method called by _add_list_data()
\& Purpose   : adds a new note.
.Ve
See Also   : the _add_list_data manpage()
.Sh "_add_list_data"
.IX Subsection "_add_list_data"
.Vb 2
\& Usage     : n/a; called by _set_list_data()
\& Purpose   : adds a new note or tech note.
.Ve
See Also   : the _set_list_data manpage()
.Sh "print"
.IX Subsection "print"
.Vb 5
\& Usage     : $err->print;
\& Purpose   : Prints Err data to STDOUT or a FileHandle.
\& Returns   : Call to print
\& Argument  : Named parameters for string()
\& Comments  : Uses string() to get data.
.Ve
See Also   : the string manpage()
.Sh "string"
.IX Subsection "string"
.Vb 6
\& Usage     : $err->string( %named_parameters);
\& Purpose   : Stringify the data contained in the Err.pm object.
\& Example   : print STDERR $err->string;
\& Returns   : String
\& Argument  : Named parameters (optional) passed to
\&           : Bio::Root::IOManager::set_display().
.Ve
See Also   : the print manpage(), the _build_from_string manpage(), \fB\f(BIBio::Root::IOManager::set_display()\fB\fR
.Sh "is_fatal"
.IX Subsection "is_fatal"
.Vb 4
\& Usage     : $err->is_fatal;
\& Purpose   : Determine if the error is of type 'FATAL'
\& Returns   : Boolean
\& Status    : Experimental, Deprecated
.Ve
.Sh "throw"
.IX Subsection "throw"
.Vb 15
\& Usage     : throw($object, [message], [note], [technical note]);
\&           : This method is exported.
\& Purpose   : Class method version of Bio::Root::Object::throw().
\& Returns   : die()s with the contents of the Err object in a string.
\&           : If the global strictness is less than -1, die is not called and
\&           : the error is printed to STDERR.
\& Argument  : [0] = object throwing the error.
\&           : [1] = optional message about the error.
\&           : [2] = optional note about the error.
\&           : [3] = optional technical note about the error.
\& Comments  : The glogal verbosity level is not used. For verbosity-sensitive
\&           : behavior, use Bio::Root::Object::throw().
\& Status    : Experimental
\&           : This method is an alternative to Bio::Root::Object::throw()
\&           : and is not as well developed or documented as that method.
.Ve
See Also   : the warning manpage(), \fB\f(BIBio::Root::Object::throw()\fB\fR \fBBio::Root::Global::strictness\fR()
.Sh "warning"
.IX Subsection "warning"
.Vb 16
\& Usage     : warning($object, [message], [note], [technical note]);
\&           : This method is exported.
\& Purpose   : Class method version of Bio::Root::Object::warn().
\& Returns   : Prints the contents of the error to STDERR and returns false (0).
\&           : If the global strictness() is > 1, warn() calls are converted
\&           : into throw() calls.
\& Argument  : [0] = object producing the warning.
\&           : [1] = optional message about the error.
\&           : [2] = optional note about the error.
\&           : [3] = optional technical note about the error.
\&           :
\& Comments  : The glogal verbosity level is not used. For verbosity-sensitive
\&           : behavior, use Bio::Root::Object::warn().
\& Status    : Experimental
\&           : This method is an alternative to Bio::Root::Object::warn()
\&           : and is not as well developed or documented as that method.
.Ve
See Also   : the throw manpage, \fB\f(BIBio::Root::Object::warn()\fB\fR, \fB\f(BIBio::Root::Global::strictness()\fB\fR
.Sh "format_stack_entry"
.IX Subsection "format_stack_entry"
.Vb 6
\& Usage     : &format_stack_entry(<class>,<file>,<line>,<class_method>,<has_args>,<wantarray>)
\&           : This function is exported.
\& Purpose   : Creates a single stack entry given a caller() list.
\& Argument  : List of scalars (output of the caller() method).
\& Returns   : String = class_method($line)
\&           : e.g., Bio::Root::Object::name(1234)
.Ve
.SH "FOR DEVELOPERS ONLY"
.IX Header "FOR DEVELOPERS ONLY"
.Sh "Data Members"
.IX Subsection "Data Members"
Information about the various data members of this module is provided for those
wishing to modify or understand the code. Two things to bear in mind:
.Ip "1 Do \s-1NOT\s0 rely on these in any code outside of this module." 4
.IX Item "1 Do NOT rely on these in any code outside of this module."
All data members are prefixed with an underscore to signify that they are private.
Always use accessor methods. If the accessor doesn't exist or is inadequate,
create or modify an accessor (and let me know, too!).
.Ip "2 This documentation may be incomplete and out of date." 4
.IX Item "2 This documentation may be incomplete and out of date."
It is easy for this documentation to become obsolete as this module is still evolving.
Always double check this info and search for members not described here.
.PP
An instance of Bio::Root::Err.pm is a blessed reference to a hash containing
all or some of the following fields:
.PP
.Vb 3
\& FIELD     VALUE
\& ------------------------------------------------------------------------
\& _type     fatal | warning | exception (one of @Bio::Root::Err::ERR_TYPES).
.Ve
.Vb 1
\& _msg      Terse description: Main cause of error.
.Ve
.Vb 1
\& _note     List reference. Verbose description: probable cause & troubleshooting for user.
.Ve
.Vb 1
\& _tech     List reference. Technical notes of interest to programmer.
.Ve
.Vb 1
\& _stack    List reference. Stack trace: list of "class::method(line number)" strings.
.Ve
