.\" Automatically generated by Pod::Man version 1.02
.\" Wed Jun 27 13:30:41 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Bio::Tools::Fasta 3"
.TH Bio::Tools::Fasta 3 "perl v5.6.0" "2001-06-18" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Bio::Tools::Fasta.pm \- Bioperl Fasta utility object
.SH "INSTALLATION"
.IX Header "INSTALLATION"
This module is included with the central Bioperl distribution:
.PP
.Vb 2
\&   http://bio.perl.org/Core/Latest
\&   ftp://bio.perl.org/pub/DIST
.Ve
Follow the installation instructions included in the \s-1README\s0 file.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Sh "Object Creation"
.IX Subsection "Object Creation"
Bio::Tools::Fasta.pm cannot yet build sequence analysis objects given output from 
the \s-1FASTA\s0 program. This module can only be used for parsing Fasta multiple sequence
files. This situation may change.
.Sh "Parse a Fasta multiple-sequence file."
.IX Subsection "Parse a Fasta multiple-sequence file."
If \f(CW$file\fR is not a valid filename, data will be read from \s-1STDIN\s0.
See the the parse manpage() method for a complete description of parameters.
.PP
.Vb 1
\&    use Bio::Tools::Fasta qw(:obj);
.Ve
.Vb 9
\&    $seqCount = $Fasta->parse(-file        => $file,
\&                              -seqs        => \e@seqs,
\&                              -ids         => \e@ids,
\&                              -edit_id     => 1,
\&                              -edit_seq    => 1,
\&                              -descs       => \e@descs,
\&                              -filt_func   => \e&filter_seq   # filter input sequences.
\&                              -exec_func   => \e&process_seq  # process each seq as it is parsed.
\&                              );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Bio::Tools::Fasta.pm module, in its present incarnation, encapsulates data 
and methods for managing Fasta multiple sequence files (reading, parsing).
It does not yet work with output from the Fasta sequence analysis program
(the References & Information about the FASTA program entry elsewhere in this document).
.PP
The documentation of this module is incomplete. For some examples of
usage, see the \fB\s-1DEMO\s0 \s-1SCRIPTS\s0\fR section.
.PP
Unlike \*(L"Blast\*(R", the term \*(L"Fasta\*(R" is ambiguous since it refers to 
both a sequence file format and a sequence analysis utility
(I use \*(L"\s-1FASTA\s0\*(R" to refer to the program; \*(L"Fasta\*(R" for the file format).
Ultimately, this module will be able to work with both
Fasta sequence files as well as result files 
generated by \s-1FASTA\s0 sequence analysis, analogous to the way the
\&\fBBio::Tools::Blast.pm\fR object is used for working with Blast output.
.Sh "References & Information about the \s-1FASTA\s0 program"
.IX Subsection "References & Information about the FASTA program"
\&\fB\s-1WEBSITES:\s0\fR
.PP
.Vb 2
\&   ftp://ftp.virginia.edu/pub/fasta/    - FASTA software
\&   http://www2.ebi.ac.uk/fasta3/        - FASTA server at EBI
.Ve
\&\fB\s-1PUBLICATIONS:\s0\fR (with PubMed links)
.PP
.Vb 2
\&  Pearson W.R. and Lipman, D.J. (1988). Improved tools for biological
\&  sequence comparison. PNAS 85:2444-2448
.Ve
http://www.ncbi.nlm.nih.gov/htbin-post/Entrez/query?uid=3162770&form=6&db=m&Dopt=b
.PP
.Vb 2
\&  Pearson, W.R. (1990). Rapid and sensitive sequence comparison with FASTP and FASTA.
\&  Methods in Enzymology 183:63-98.
.Ve
http://www.ncbi.nlm.nih.gov/htbin-post/Entrez/query?uid=2156132&form=6&db=m&Dopt=b
.SH "USAGE"
.IX Header "USAGE"
A simple demo script is included with the central Bioperl distribution (the INSTALLATION manpage)
and is also available from:
.PP
.Vb 1
\&    http://bio.perl.org/Core/Examples/seq/
.Ve
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
Bio::Tools::Fasta.pm is a concrete class that inherits from \fBBio::Tools::SeqAnal.pm\fR.
This module also relies on \fBBio::Seq.pm\fR for producing sequence objects.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other Bioperl modules.
Send your comments and suggestions preferably to one of the Bioperl mailing lists.
Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                  - General discussion
\&  http://www.bioperl.org/MailList.shtml  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track the bugs and 
their resolution. Bug reports can be submitted via email or the web:
.PP
.Vb 2
\&    bioperl-bugs@bio.perl.org                   
\&    http://bio.perl.org/bioperl-bugs/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Steve A. Chervitz, sac@genome.stanford.edu
.SH "VERSION"
.IX Header "VERSION"
Bio::Tools::Fasta.pm, 0.014
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1998 Steve A. Chervitz. All Rights Reserved.
This module is free software; you can redistribute it and/or 
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 3
\&  Bio::Tools::SeqAnal.pm   - Sequence analysis object base class.
\&  Bio::Seq.pm              - Biosequence object  
\&  Bio::Root::Object.pm     - Proposed base class for all Bioperl objects.
.Ve
.Vb 2
\&  http://bio.perl.org/Projects/modules.html  - Online module documentation
\&  http://bio.perl.org/                       - Bioperl Project Homepage
.Ve
the References & Information about the FASTA program entry elsewhere in this document.
.SH "TODO"
.IX Header "TODO"
.Ip "\(bu Incorporate code for parsing Fasta sequence analysis reports." 4
.IX Item "Incorporate code for parsing Fasta sequence analysis reports."
.Ip "\(bu Improve documentation." 4
.IX Item "Improve documentation."
.SH "APPENDIX"
.IX Header "APPENDIX"
Methods beginning with a leading underscore are considered private
and are intended for internal use by this module. They are
\&\fBnot\fR considered part of the public interface and are described here
for documentation purposes only.
.Sh "_initialize"
.IX Subsection "_initialize"
.Vb 5
\& Usage     : n/a; automatically called by Bio::Root::Object::new()
\& Purpose   : Calls superclass constructor.
\& Returns   : n/a
\& Argument  : Named parameters passed to new() are processed by this method.
\&           : At present, none are processed.
.Ve
See Also   : \fB\f(BIBio::Tools::SeqAnal::_initialize()\fB\fR
.Sh "parse"
.IX Subsection "parse"
.Vb 52
\& Usage     : $fasta_obj->$parse( %named_parameters)
\& Purpose   : Parse a set of Fasta sequences or Fasta reports from a file or STDIN.
\&           : (Currently only Fasta sequence parsing is supported).
\& Returns   : Integer (number of sequences or Fasta reports parsed).
\& Argument  : Named parameters: (TAGS CAN BE UPPER OR LOWER CASE)
\&           :   -FILE       => string (name of file containing Fasta-formatted sequences.
\&           :                          Optional. If a valid file is not supplied, 
\&           :                          STDIN will be used).
\&           :   -SEQS       => boolean (true = parse a Fasta multi-sequence file
\&           :                           false = parse a Fasta sequence analysis report).
\&           :   -IDS        => array_ref (optional).
\&           :   -DESCS      => array_ref (optional).
\&           :   -EDIT_ID    => boolean  (true = edit sequence identifiers).
\&           :   -EDIT_SEQ   => boolean  (true = edit sequence data).
\&           :   -TYPE       => string   (type of sequences to be processed: 
\&           :                            'dna', 'rna', 'amino'),
\&           :   -FILT_FUNC  => func_ref (reference to a function for filtering out
\&           :                            sequences as they are being parsed. 
\&           :                            This function should return a boolean
\&           :                            (true if the sequence should be filtered out)
\&           :                            and accept three arguments as shown 
\&           :                            in this sample filter function:
\&           :                            sub filt { 
\&           :                                my($len, $id, $desc);
\&           :                                # $len is the sequence length
\&           :                                return ($len < 25 and $id =~ /^123/);
\&           :                            }
\&           :                            This function will screen out any sequence
\&           :                            less than 25 in length and having an id
\&           :                            starting with '123'.
\&           :   -SAVE_ARRAY => array_ref (reference to an array for storing all
\&           :                             sequence objects as they are created.)
\&           :   -EXEC_FUNC  => func_ref (reference to a function for processing each 
\&           :                            sequence object) as it is parsed.
\&           :                            When working with sequences, this function 
\&           :                            should accept a Bio::Seq.pm object as its 
\&           :                            sole argument. Return value will be ignored).
\&           :   -STRICT     => boolean (increases sensitivity to errors).
\&           :
\&           :  ----------------------------------------------------------------
\&           :   NOTE: Parameters such as seqs, ids, desc, edit_id, edit_seq, type
\&           :         are used only when parsing Fasta sequence files.
\&           :         Additional parameters will be added as necessary for
\&           :         parsing Fasta sequence analysis reports.
\&           :
\&           :   NOTE: When retreiving sequence data instead of objects,
\&           :         the -SEQS, -IDS, and -DESCS parameters should all be array refs.
\&           :         This constitutes a signal that sequence objects are not 
\&           :         to be constructed.
\&           :
\& Throws    : Propagates any exceptions thrown by _parse_seq_stream()
\& Comments  :
.Ve
.Vb 9
\&  WORKING WITH SEQUENCE DATA:
\&  ---------------------------
\&  The parse method can return sequence data bundled into Bio::Seq.pm objects 
\&  or in raw format (separate arrays for seq, id, and desc data). The reason for
\&  this is that in some cases, you don't particularly need to work with sequence
\&  objects and it is inefficient to build objects just to have them broken apart. 
\&  However, there is something to be said for choosing one approach -- 
\&  always return seq objects. In this way, the object 
\&  becomes the basic unit of exchange. For now, both options are allowed.
.Ve
.Vb 3
\&  The story will be different for Fasta sequence analysis report objects
\&  since these are a much more complex data type and it would be unwieldy
\&  and dangerous to return parsed data unencapsulated from an object.
.Ve
See Also   : the _parse_seq_stream manpage(), the _set_id_desc manpage(), the _get_parse_seq_func manpage()
.Sh "_parse_seq_stream"
.IX Subsection "_parse_seq_stream"
.Vb 6
\& Usage     : n/a. Internal method called by parse()
\& Purpose   : Obtains the function to be used during parsing and calls read().
\& Returns   : Integer (the number of sequences read)
\& Argument  : Named parameters  (forwarded from parse())
\& Throws    : Propagates any exception thrown by _get_parse_seq_func() and read().
\& Comments  :
.Ve
.Vb 4
\&  This method permits the sequence data to be parsed as it is being read in. 
\&  The motivation here is that when working with a potentially huge set of
\&  sequences, there is no need to read them all into memory before you start
\&  processing them. In fact, you may only be interested in a few of them.
.Ve
.Vb 3
\&  This method constructs and returns a closure for parsing a single Fasta sequence.
\&  It is called automatically by the read() method inherited from 
\&  Bio::Root::Object.pm.
.Ve
.Vb 6
\&  Another issue concerns what to do with the parsed data: save it or
\&  use it? Sometimes you need to process all sequence data as a group
\&  (eg., sorting). Other times, you can safely process each sequence
\&  as it gets parsed and then move on to the next. By delivering each
\&  sequence as it gets parsed, the client is free to decide what to
\&  do with it.
.Ve
See Also   : the _get_parse_seq_func manpage(), \fB\f(BIBio::Root::Object::read()\fB\fR
.Sh "_get_parse_seq_func"
.IX Subsection "_get_parse_seq_func"
.Vb 19
\& Usage     : n/a. Internal method called by _parse_seq_stream()
\& Purpose   : Generates a function reference to be used for parsing raw sequence data
\&           : as it is being loaded by read().
\&           : Used when parsing Fasta sequence files.
\& Returns   : Function reference (actually a closure)
\& Argument  : Named parameters forwared from _parse_seq_stream()
\& Throws    : Exceptions due to improper argument types.
\&           :   (to be elaborated...)
\& Comments  : The function generated performs sequence editing if
\&           : the -EDIT_SEQ parse() parameter is is non-zero.
\&           : This consists of removing any ambiguous residues at begin 
\&           : or end of seq.
\&           : Regardless of -EDIT_SEQ, all sequence will be edited to remove
\&           : whitespace and non-alphabetic chars.
\&           : Gaps characters are permitted ('.' and '-').
\&           : (Need a more universal way to identify gap characters.)
\&           : If sequence objects are generated and an -EXEC_FUNC is supplied,
\&           : each object will be destroyed after calling this function.
\&           : This prevents memory usage problems for large runs.
.Ve
See Also   : the parse manpage(), the _parse_seq_stream manpage(), \fBBio::Root::Object::_rearrange\fR()
.Sh "edit_id"
.IX Subsection "edit_id"
.Vb 6
\& Usage     : $fasta_obj->edit_id()
\& Purpose   : Set/Get a boolean indicator as to whether sequence IDs should be edited.
\&           : Used when parsing Fasta sequence files.
\& Returns   : Boolean (true if the IDs are to be edited).
\& Argument  : Boolean (optional)
\& Throws    : n/a
.Ve
See Also   : the _set_id_desc manpage(), the _get_parse_seq_func manpage()
.Sh "edit_seqs"
.IX Subsection "edit_seqs"
.Vb 6
\& Usage     : $fasta_obj->edit_seqs()
\& Purpose   : Set/Get a boolean indicator as to whether sequences should be edited.
\&           : Used when parsing Fasta sequence files.
\& Returns   : Boolean (true if the sequences are to be edited).
\& Argument  : Boolean (optional)
\& Throws    : n/a
.Ve
See Also   : the _get_parse_seq_func manpage()
.Sh "_set_id_desc"
.IX Subsection "_set_id_desc"
.Vb 22
\& Usage     : n/a. Internal method called by _get_parse_seq_func()
\& Purpose   : Sets the _id and _desc data members, optionally editing the id.
\&           : Used when parsing Fasta sequence files.
\& Returns   : 2-element list containing: ($id, $description)
\& Argument  : String containing raw ID + description (leading '>' will be stripped)
\& Throws    : n/a
\& Comments  : Optionally edits the ID if the '_edit_id' field is true.
\&           : Descriptions are not altered.
\&           : ID Edits:
\&           :   1) Uppercases the ID.
\&           :   2) If the ID has any | characters the following is performed:
\&           :        a) Replace | characters with _ characters.
\&           :           (prevent regexp and shell trouble).
\&           :        b) Cleans up complex identifiers. 
\&           :           Some GenBank specifiers have multiple parts:
\&           :           >gi|2980872|gnl|PID|e1283615 homeobox protein SHOTb
\&           :           Only the first ID is saved as the official ID. 
\&           :           Extra ids will be included at the end of the 
\&           :           description between brackets:
\&           :           GI_2980872 homeobox protein SHOTb [ GNL PID e1283615 ]
\&           :
\&           : ID editing is somewhat experimental.
.Ve
See Also   : the _get_parse_seq_func manpage(), the edit_id manpage()
.Sh "num_seqs"
.IX Subsection "num_seqs"
.Vb 5
\& Usage     : $fasta_obj->num_seqs()
\& Purpose   : Get the number of sequences read by the Fasta object.
\& Returns   : Integer 
\& Argument  : n/a
\& Throws    : n/a
.Ve
.SH "FOR DEVELOPERS ONLY"
.IX Header "FOR DEVELOPERS ONLY"
.Sh "Data Members"
.IX Subsection "Data Members"
Information about the various data members of this module is provided for those 
wishing to modify or understand the code. Two things to bear in mind: 
.Ip "1 Do \s-1NOT\s0 rely on these in any code outside of this module." 4
.IX Item "1 Do NOT rely on these in any code outside of this module."
All data members are prefixed with an underscore to signify that they are private.
Always use accessor methods. If the accessor doesn't exist or is inadequate, 
create or modify an accessor (and let me know, too!). 
.Ip "2 This documentation may be incomplete and out of date." 4
.IX Item "2 This documentation may be incomplete and out of date."
It is easy for these data member descriptions to become obsolete as 
this module is still evolving. Always double check this info and search 
for members not described here.
.PP
An instance of Bio::Tools::Fasta.pm is a blessed reference to a hash containing
all or some of the following fields:
.PP
.Vb 3
\& FIELD           VALUE
\& --------------------------------------------------------------
\& _seqCount       Number of sequences parsed.
.Ve
.Vb 1
\& _edit_seq       Boolean. Should sequences be edited during parsing?
.Ve
.Vb 1
\& _edit_id        Boolean. Should ids be edited during parsing?
.Ve
.Vb 2
\& More data members will be added when code for Fasta report
\& processing is incorporated.
.Ve
.Vb 1
\& INHERITED DATA MEMBERS
.Ve
(See Bio::Tools::SeqAnal.pm for inherited data members.)
