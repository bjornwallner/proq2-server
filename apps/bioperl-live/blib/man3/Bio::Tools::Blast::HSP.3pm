.\" Automatically generated by Pod::Man version 1.02
.\" Wed Jun 27 13:30:32 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Bio::Tools::Blast::HSP 3"
.TH Bio::Tools::Blast::HSP 3 "perl v5.6.0" "2001-06-18" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Bio::Tools::Blast::HSP.pm \- Bioperl \s-1BLAST\s0 High-Scoring Segment Pair object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Sh "Object Creation"
.IX Subsection "Object Creation"
The construction of \s-1HSP\s0 objects is handled by Bio::Tools::Blast:: Sbjct.pm. 
You should not need to use this package directly. See the _initialize manpage()
for a description of constructor parameters.
.PP
.Vb 1
\&    require Bio::Tools::Blast::HSP;
.Ve
.Vb 6
\&    $hspObj = eval{ new Bio::Tools::Blast::HSP(-DATA    =>\e@hspData, 
\&                                               -PARENT  =>$sbjct_object, 
\&                                               -NAME    =>$hspCount,
\&                                               -PROGRAM =>'TBLASTN',
\&                                               );
\&                };
.Ve
@hspData includes the raw \s-1BLAST\s0 report data for a specific \s-1HSP\s0,
and is prepared by Bio::Tools::Blast::Sbjct.pm. 
.SH "INSTALLATION"
.IX Header "INSTALLATION"
This module is included with the central Bioperl distribution:
.PP
.Vb 2
\&   http://bio.perl.org/Core/Latest
\&   ftp://bio.perl.org/pub/DIST
.Ve
Follow the installation instructions included in the \s-1README\s0 file.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Bio::Tools::Blast::HSP.pm module encapsulates data and methods for 
manipulating, parsing, and analyzing HSPs (\*(L"High-scoring Segment Pairs\*(R")
derived from \s-1BLAST\s0 sequence analysis.
.PP
This module is a utility module used by the \fBBio::Tools::Blast::Sbjct.pm\fR
and is not intended for separate use. Please see documentation for 
\&\fBBio::Tools::Blast.pm\fR for some basic information about using
\&\s-1HSP\s0 objects (the Links: manpage).
.Ip "\(bu Supports \s-1BLAST\s0 versions 1.x and 2.x, gapped and ungapped."
.IX Item "Supports BLAST versions 1.x and 2.x, gapped and ungapped."
.PP
Bio::Tools::Blast::HSP.pm has the ability to extract a list of all
residue indices for identical and conservative matches along both
query and sbjct sequences. Since this degree of detail is not always
needed, this behavior does not occur during construction of the \s-1HSP\s0
object.  These data will automatically be collected as necessary as
the \s-1HSP\s0.pm object is used.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
Bio::Tools::Blast::HSP.pm is a concrete class that inherits from
\&\fBBio::Root::Object.pm\fR and relies on \fBBio::Tools::Sbjct.pm\fR as a
container for \s-1HSP\s0.pm objects.  \fBBio::Seq.pm\fR and \fBBio::UnivAln.pm\fR
are employed for creating sequence and alignment objects,
respectively.
.Sh "Relationship to UnivAln.pm & Seq.pm"
.IX Subsection "Relationship to UnivAln.pm & Seq.pm"
\&\s-1HSP\s0.pm can provide the query or sbjct sequence as a \fBBio::Seq.pm\fR
object via the the seq manpage() method. The \s-1HSP\s0.pm object can also create a
two-sequence \fBBio::UnivAln.pm\fR alignment object using the the query
and sbjct sequences via the the get_aln manpage() method. Creation of alignment
objects is not automatic when constructing the \s-1HSP\s0.pm object since
this level of functionality is not always required and would generate
a lot of extra overhead when crunching many reports.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules.  Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&    bioperl-l@bioperl.org          - General discussion
\&    http://bio.perl.org/MailList.html             - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution. Bug reports can be submitted via email
or the web:
.PP
.Vb 2
\&    bioperl-bugs@bio.perl.org                   
\&    http://bio.perl.org/bioperl-bugs/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Steve A. Chervitz, sac@genome.stanford.edu
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 5
\& Bio::Tools::Blast::Sbjct.pm   - Blast hit object.
\& Bio::Tools::Blast.pm          - Blast object.
\& Bio::Seq.pm                   - Biosequence object  
\& Bio::UnivAln.pm               - Biosequence alignment object.
\& Bio::Root::Object.pm          - Proposed base class for all Bioperl objects.
.Ve
.Sh "Links:"
.IX Subsection "Links:"
.Vb 1
\& http://bio.perl.org/Core/POD/Tools/Blast/Sbjct.pm.html
.Ve
.Vb 3
\& http://bio.perl.org/Projects/modules.html  - Online module documentation
\& http://bio.perl.org/Projects/Blast/        - Bioperl Blast Project     
\& http://bio.perl.org/                       - Bioperl Project Homepage
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1996\-98 Steve A. Chervitz. All Rights Reserved.
This module is free software; you can redistribute it and/or 
modify it under the same terms as Perl itself.
.SH "APPENDIX"
.IX Header "APPENDIX"
Methods beginning with a leading underscore are considered private
and are intended for internal use by this module. They are
\&\fBnot\fR considered part of the public interface and are described here
for documentation purposes only.
.Sh "_initialize"
.IX Subsection "_initialize"
.Vb 14
\& Usage     : n/a; automatically called by Bio::Root::Object::new()
\&           : Bio::Tools::Blast::HSP.pm objects are constructed 
\&           : automatically by Bio::Tools::Sbjct.pm, so there is no need
\&           : for direct consumption.
\& Purpose   : Initializes HSP data and calls private methods to extract 
\&           : the data for a given HSP.
\&           : Calls superclass constructor first (Bio::Root::Object.pm).
\& Returns   : n/a
\& Argument  : Named parameters passed from new():
\&           : All tags must be uppercase (does not call _rearrange()).
\&           :      -DATA    => array ref containing raw data for one HSP.
\&           :      -PARENT  => Sbjct.pm object ref.
\&           :      -NAME    => integer (1..n).
\&           :      -PROGRAM => string ('TBLASTN', 'BLASTP', etc.).
.Ve
See Also   : the _set_data manpage(), \fB\f(BIBio::Root::Object::new()\fB\fR, \fB\f(BIBio::Tools::Blast::Sbjct::_set_hsps()\fB\fR
.Sh "_set_data"
.IX Subsection "_set_data"
.Vb 6
\& Usage     : n/a; called automatically during object construction.
\& Purpose   : Sets the query sequence, sbjct sequence, and the "match" data
\&           : which consists of the symbols between the query and sbjct lines
\&           : in the alignment.
\& Argument  : Array (all lines from a single, complete HSP, one line per element)
\& Throws    : Propagates any exceptions from the methods called ("See Also")
.Ve
See Also   : the _set_seq manpage(), the _set_residues manpage(), the _set_score_stats manpage(), the _set_match_stats manpage(), the _initialize manpage()
.Sh "_set_score_stats"
.IX Subsection "_set_score_stats"
.Vb 9
\& Usage     : n/a; called automatically by _set_data()
\& Purpose   : Sets various score statistics obtained from the HSP listing.
\& Argument  : String with any of the following formats:
\&           : blast2:  Score = 30.1 bits (66), Expect = 9.2
\&           : blast2:  Score = 158.2 bits (544), Expect(2) = e-110
\&           : blast1:  Score = 410 (144.3 bits), Expect = 1.7e-40, P = 1.7e-40
\&           : blast1:  Score = 55 (19.4 bits), Expect = 5.3, Sum P(3) = 0.99
\& Throws    : Exception if the stats cannot be parsed, probably due to a change
\&           : in the Blast report format.
.Ve
See Also   : the _set_data manpage()
.Sh "_set_match_stats"
.IX Subsection "_set_match_stats"
.Vb 15
\& Usage     : n/a; called automatically by _set_data()
\& Purpose   : Sets various matching statistics obtained from the HSP listing.
\& Argument  : blast2: Identities = 23/74 (31%), Positives = 29/74 (39%), Gaps = 17/74 (22%)
\&           : blast2: Identities = 57/98 (58%), Positives = 74/98 (75%)
\&           : blast1: Identities = 87/204 (42%), Positives = 126/204 (61%)
\&           : blast1: Identities = 87/204 (42%), Positives = 126/204 (61%), Frame = -3
\&           : WU-blast: Identities = 310/553 (56%), Positives = 310/553 (56%), Strand = Minus / Plus
\& Throws    : Exception if the stats cannot be parsed, probably due to a change
\&           : in the Blast report format.
\& Comments  : The "Gaps = " data in the HSP header has a different meaning depending
\&           : on the type of Blast: for BLASTP, this number is the total number of
\&           : gaps in query+sbjct; for TBLASTN, it is the number of gaps in the
\&           : query sequence only. Thus, it is safer to collect the data
\&           : separately by examining the actual sequence strings as is done
\&           : in _set_seq().
.Ve
See Also   : the _set_data manpage(), the _set_seq manpage()
.Sh "_set_seq_data"
.IX Subsection "_set_seq_data"
.Vb 9
\& Usage     : n/a; called automatically when sequence data is requested.
\& Purpose   : Sets the HSP sequence data for both query and sbjct sequences.
\&           : Includes: start, stop, length, gaps, and raw sequence.
\& Argument  : n/a
\& Throws    : Propagates any exception thrown by _set_match_seq()
\& Comments  : Uses raw data stored by _set_data() during object construction.
\&           : These data are not always needed, so it is conditionally
\&           : executed only upon demand by methods such as gaps(), _set_residues(),
\&           : etc. _set_seq() does the dirty work.
.Ve
See Also   : the _set_seq manpage()
.Sh "_set_seq"
.IX Subsection "_set_seq"
.Vb 15
\& Usage     : n/a; called automatically by _set_seq_data()
\&           : $hsp_obj->($seq_type, @data);
\& Purpose   : Sets sequence information for both the query and sbjct sequences.
\&           : Directly counts the number of gaps in each sequence (if gapped Blast).
\& Argument  : $seq_type = 'query' or 'sbjct'
\&           : @data = all seq lines with the form:
\&           : Query: 61  SPHNVKDRKEQNGSINNAISPTATANTSGSQQINIDSALRDRSSNVAAQPSLSDASSGSN 120
\& Throws    : Exception if data strings cannot be parsed, probably due to a change
\&           : in the Blast report format.
\& Comments  : Uses first argument to determine which data members to set
\&           : making this method sensitive data member name changes.
\&           : Behavior is dependent on the type of BLAST analysis (TBLASTN, BLASTP, etc).
\& Warning   : Sequence endpoints are normalized so that start < end. This affects HSPs
\&           : for TBLASTN/X hits on the minus strand. Normalization facilitates use
\&           : of range information by methods such as match().
.Ve
See Also   : the _set_seq_data manpage(), the matches manpage(), the range manpage(), the start manpage(), the end manpage()
.Sh "_set_residues"
.IX Subsection "_set_residues"
.Vb 9
\& Usage     : n/a; called automatically when residue data is requested.
\& Purpose   : Sets the residue numbers representing the identical and
\&           : conserved positions. These data are obtained by analyzing the
\&           : symbols between query and sbjct lines of the alignments.
\& Argument  : n/a
\& Throws    : Propagates any exception thrown by _set_seq_data() and _set_match_seq().
\& Comments  : These data are not always needed, so it is conditionally
\&           : executed only upon demand by methods such as seq_inds().
\&           : Behavior is dependent on the type of BLAST analysis (TBLASTN, BLASTP, etc).
.Ve
See Also   : the _set_seq_data manpage(), the _set_match_seq manpage(), \fIseq_inds()\fR
.Sh "_set_match_seq"
.IX Subsection "_set_match_seq"
.Vb 10
\& Usage     : n/a. Internal method.
\&           : $hsp_obj->_set_match_seq()
\& Purpose   : Set the 'match' sequence for the current HSP (symbols in between
\&           : the query and sbjct lines.)                                
\& Returns   : Array reference holding the match sequences lines.
\& Argument  : n/a
\& Throws    : Exception if the _matchList field is not set.
\& Comments  : The match information is not always necessary. This method
\&           : allows it to be conditionally prepared.
\&           : Called by _set_residues>() and seq_str().
.Ve
See Also   : the _set_residues manpage(), the seq_str manpage()
.Sh "score"
.IX Subsection "score"
.Vb 5
\& Usage     : $hsp_obj->score()
\& Purpose   : Get the Blast score for the HSP.
\& Returns   : Integer
\& Argument  : n/a
\& Throws    : n/a
.Ve
See Also   : the bits manpage()
.Sh "bits"
.IX Subsection "bits"
.Vb 5
\& Usage     : $hsp_obj->bits()
\& Purpose   : Get the Blast score in bits for the HSP.
\& Returns   : Float
\& Argument  : n/a
\& Throws    : n/a
.Ve
See Also   : the score manpage()
.Sh "n"
.IX Subsection "n"
.Vb 11
\& Usage     : $hsp_obj->n()
\& Purpose   : Get the N value (num HSPs on which P/Expect is based).
\&           : This value is not defined with NCBI Blast2 with gapping.
\& Returns   : Integer or null string if not defined.
\& Argument  : n/a
\& Throws    : n/a
\& Comments  : The 'N' value is listed in parenthesis with P/Expect value:
\&           : e.g., P(3) = 1.2e-30  ---> (N = 3).
\&           : Not defined in NCBI Blast2 with gaps.
\&           : This typically is equal to the number of HSPs but not always.
\&           : To obtain the number of HSPs, use Bio::Tools::Blast::Sbjct::num_hsps().
.Ve
See Also   : the score manpage()
.Sh "frame"
.IX Subsection "frame"
.Vb 5
\& Usage     : $hsp_obj->frame()
\& Purpose   : Get the reading frame number (-/+ 1, 2, 3) (TBLASTN/X only).
\& Returns   : Integer or null string if not defined.
\& Argument  : n/a
\& Throws    : n/a
.Ve
.Sh "\fIsignif()\fR"
.IX Subsection "signif()"
.Vb 10
\& Usage     : $hsp_obj->signif()
\& Purpose   : Get the P-value or Expect value for the HSP.
\& Returns   : Float (0.001 or 1.3e-43)
\&           : Returns P-value if it is defined, otherwise, Expect value.
\& Argument  : n/a
\& Throws    : n/a
\& Comments  : Provided for consistency with Sbjct::signif()
\&           : Support for returning the significance data in different
\&           : formats (e.g., exponent only), is not provided for HSP objects.
\&           : This is only available for the Sbjct or Blast object.
.Ve
See Also   : the p manpage(), the expect manpage(), \fB\f(BIBio::Tools::Blast::Sbjct::signif()\fB\fR
.Sh "expect"
.IX Subsection "expect"
.Vb 8
\& Usage     : $hsp_obj->expect()
\& Purpose   : Get the Expect value for the HSP.
\& Returns   : Float (0.001 or 1.3e-43)
\& Argument  : n/a
\& Throws    : n/a
\& Comments  : Support for returning the expectation data in different
\&           : formats (e.g., exponent only), is not provided for HSP objects.
\&           : This is only available for the Sbjct or Blast object.
.Ve
See Also   : the p manpage()
.Sh "p"
.IX Subsection "p"
.Vb 9
\& Usage     : $hsp_obj->p()
\& Purpose   : Get the P-value for the HSP.
\& Returns   : Float (0.001 or 1.3e-43) or undef if not defined.
\& Argument  : n/a
\& Throws    : n/a
\& Comments  : P-value is not defined with NCBI Blast2 reports.
\&           : Support for returning the expectation data in different
\&           : formats (e.g., exponent only) is not provided for HSP objects.
\&           : This is only available for the Sbjct or Blast object.
.Ve
See Also   : the expect manpage()
.Sh "length"
.IX Subsection "length"
.Vb 11
\& Usage     : $hsp->length( [seq_type] )
\& Purpose   : Get the length of the aligned portion of the query or sbjct.
\& Example   : $hsp->length('query')
\& Returns   : integer
\& Argument  : seq_type: 'query' | 'sbjct' | 'total'  (default = 'total')
\& Throws    : n/a
\& Comments  : 'total' length is the full length of the alignment
\&           : as reported in the denominators in the alignment section: 
\&           : "Identical = 34/120 Positives = 67/120".
\&           : Developer note: when using the built-in length function within
\&           : this module, call it as CORE::length().
.Ve
See Also   : the gaps manpage()
.Sh "gaps"
.IX Subsection "gaps"
.Vb 13
\& Usage     : $hsp->gaps( [seq_type] )
\& Purpose   : Get the number of gaps in the query, sbjct, or total alignment.
\&           : Also can return query gaps and sbjct gaps as a two-element list
\&           : when in array context.
\& Example   : $total_gaps      = $hsp->gaps();
\&           : ($qgaps, $sgaps) = $hsp->gaps();
\&           : $qgaps           = $hsp->gaps('query');
\& Returns   : scalar context: integer
\&           : array context without args: (int, int)  =  ('queryGaps', 'sbjctGaps')
\& Argument  : seq_type: 'query' | 'sbjct' | 'total'  
\&           : (default = 'total', scalar context)
\&           : Array context can be "induced" by providing an argument of 'list' or 'array'.
\& Throws    : n/a
.Ve
See Also   : the length manpage(), the matches manpage()
.Sh "matches"
.IX Subsection "matches"
.Vb 16
\& Usage     : $hsp->matches([seq_type], [start], [stop]);
\& Purpose   : Get the total number of identical and conservative matches 
\&           : in the query or sbjct sequence for the given HSP. Optionally can
\&           : report data within a defined interval along the seq.
\&           : (Note: 'conservative' matches are called 'positives' in the
\&           : Blast report.)
\& Example   : ($id,$cons) = $hsp_object->matches('sbjct');
\&           : ($id,$cons) = $hsp_object->matches('query',300,400);
\& Returns   : 2-element array of integers 
\& Argument  : (1) seq_type = 'query' | 'sbjct' (default = query)
\&           : (2) start = Starting coordinate (optional)
\&           : (3) stop  = Ending coordinate (optional)
\& Throws    : Exception if the supplied coordinates are out of range.
\& Comments  : Relies on seq_str('match') to get the string of alignment symbols
\&           : between the query and sbjct lines which are used for determining
\&           : the number of identical and conservative matches.
.Ve
See Also   : the length manpage(), the gaps manpage(), the seq_str manpage(), \fB\f(BIBio::Tools::Blast::Sbjct::_adjust_contigs()\fB\fR
.Sh "frac_identical"
.IX Subsection "frac_identical"
.Vb 20
\& Usage     : $hsp_object->frac_identical( [seq_type] );
\& Purpose   : Get the fraction of identical positions within the given HSP.
\& Example   : $frac_iden = $hsp_object->frac_identical('query');
\& Returns   : Float (2-decimal precision, e.g., 0.75).
\& Argument  : seq_type: 'query' | 'sbjct' | 'total'
\&           : default = 'total' (but see comments below).
\& Throws    : n/a
\& Comments  : Different versions of Blast report different values for the total
\&           : length of the alignment. This is the number reported in the
\&           : denominators in the stats section:
\&           : "Identical = 34/120 Positives = 67/120".
\&           : BLAST-GP uses the total length of the alignment (with gaps)
\&           : WU-BLAST uses the length of the query sequence (without gaps).
\&           : Therefore, when called without an argument or an argument of 'total',
\&           : this method will report different values depending on the
\&           : version of BLAST used.
\&           : 
\&           : To get the fraction identical among only the aligned residues,
\&           : ignoring the gaps, call this method with an argument of 'query'
\&           : or 'sbjct'.
.Ve
See Also   : the frac_conserved manpage(), the num_identical manpage(), the matches manpage()
.Sh "frac_conserved"
.IX Subsection "frac_conserved"
.Vb 22
\& Usage     : $hsp_object->frac_conserved( [seq_type] );
\& Purpose   : Get the fraction of conserved positions within the given HSP.
\&           : (Note: 'conservative' positions are called 'positives' in the
\&           : Blast report.)
\& Example   : $frac_cons = $hsp_object->frac_conserved('query');
\& Returns   : Float (2-decimal precision, e.g., 0.75).
\& Argument  : seq_type: 'query' | 'sbjct' 
\&           : default = 'total' (but see comments below).
\& Throws    : n/a
\& Comments  : Different versions of Blast report different values for the total
\&           : length of the alignment. This is the number reported in the
\&           : denominators in the stats section:
\&           : "Identical = 34/120 Positives = 67/120".
\&           : BLAST-GP uses the total length of the alignment (with gaps)
\&           : WU-BLAST uses the length of the query sequence (without gaps).
\&           : Therefore, when called without an argument or an argument of 'total',
\&           : this method will report different values depending on the
\&           : version of BLAST used.
\&           :
\&           : To get the fraction conserved among only the aligned residues,
\&           : ignoring the gaps, call this method with an argument of 'query'
\&           : or 'sbjct'.
.Ve
See Also   : the frac_conserved manpage(), the num_conserved manpage(), the matches manpage()
.Sh "num_identical"
.IX Subsection "num_identical"
.Vb 6
\& Usage     : $hsp_object->num_identical();
\& Purpose   : Get the number of identical positions within the given HSP.
\& Example   : $num_iden = $hsp_object->num_identical();
\& Returns   : integer
\& Argument  : n/a
\& Throws    : n/a
.Ve
See Also   : the num_conserved manpage(), the frac_identical manpage()
.Sh "num_conserved"
.IX Subsection "num_conserved"
.Vb 6
\& Usage     : $hsp_object->num_conserved();
\& Purpose   : Get the number of conserved positions within the given HSP.
\& Example   : $num_iden = $hsp_object->num_conserved();
\& Returns   : integer
\& Argument  : n/a
\& Throws    : n/a
.Ve
See Also   : the num_identical manpage(), the frac_conserved manpage()
.Sh "range"
.IX Subsection "range"
.Vb 9
\& Usage     : $hsp->range( [seq_type] );
\& Purpose   : Gets the (start, end) coordinates for the query or sbjct sequence
\&           : in the HSP alignment.
\& Example   : ($qbeg, $qend) = $hsp->range('query');
\&           : ($sbeg, $send) = $hsp->range('sbjct');
\& Returns   : Two-element array of integers 
\& Argument  : seq_type = string, 'query' or 'sbjct'  (default = 'query')
\&           : (case insensitive).
\& Throws    : n/a
.Ve
See Also   : the start manpage(), the end manpage()
.Sh "start"
.IX Subsection "start"
.Vb 12
\& Usage     : $hsp->start( [seq_type] );
\& Purpose   : Gets the start coordinate for the query, sbjct, or both sequences
\&           : in the HSP alignment.
\& Example   : $qbeg = $hsp->start('query');
\&           : $sbeg = $hsp->start('sbjct');
\&           : ($qbeg, $sbeg) = $hsp->start();
\& Returns   : scalar context: integer
\&           : array context without args: list of two integers
\& Argument  : In scalar context: seq_type = 'query' or 'sbjct'
\&           :  (case insensitive). If not supplied, 'query' is used.
\&           : Array context can be "induced" by providing an argument of 'list' or 'array'.
\& Throws    : n/a
.Ve
See Also   : the end manpage(), the range manpage()
.Sh "end"
.IX Subsection "end"
.Vb 12
\& Usage     : $hsp->end( [seq_type] );
\& Purpose   : Gets the end coordinate for the query, sbjct, or both sequences
\&           : in the HSP alignment.
\& Example   : $qbeg = $hsp->end('query');
\&           : $sbeg = $hsp->end('sbjct');
\&           : ($qbeg, $sbeg) = $hsp->end();
\& Returns   : scalar context: integer
\&           : array context without args: list of two integers
\& Argument  : In scalar context: seq_type = 'query' or 'sbjct'
\&           :  (case insensitive). If not supplied, 'query' is used.
\&           : Array context can be "induced" by providing an argument of 'list' or 'array'.
\& Throws    : n/a
.Ve
See Also   : the start manpage(), the range manpage()
.Sh "strand"
.IX Subsection "strand"
.Vb 14
\& Usage     : $hsp_object->strand( [seq_type] )
\& Purpose   : Get the strand of the query or sbjct sequence.
\& Example   : print $hsp->strand('query');
\&           : ($qstrand, $sstrand) = $hsp->strand();
\& Returns   : -1, 0, or 1
\&           : -1 = Minus strand, +1 = Plus strand
\&           : Returns 0 if strand is not defined, which occurs
\&           : for non-TBLASTN/X reports.
\&           : In scalar context without arguments, returns queryStrand value.
\&           : In array context without arguments, returns a two-element list 
\&           :    of strings (queryStrand, sbjctStrand).
\&           : Array context can be "induced" by providing an argument of 'list' or 'array'.
\& Argument  : seq_type: 'query' | 'sbjct' or undef
\& Throws    : n/a
.Ve
See Also   : the _set_seq manpage(), the _set_match_stats manpage()
.Sh "seq"
.IX Subsection "seq"
.Vb 10
\& Usage     : $hsp->seq( [seq_type] );
\& Purpose   : Get the query or sbjct sequence as a Bio::Seq.pm object.
\& Example   : $seqObj = $hsp->seq('query');
\& Returns   : Object reference for a Bio::Seq.pm object.
\& Argument  : seq_type = 'query' or 'sbjct' (default = 'query').
\& Throws    : Propagates any exception that occurs during construction
\&           : of the Bio::Seq.pm object.
\& Comments  : The sequence is returned in an array of strings corresponding
\&           : to the strings in the original format of the Blast alignment.
\&           : (i.e., same spacing).
.Ve
See Also   : the seq_str manpage(), the seq_inds manpage(), \fBBio::Seq.pm\fR
.Sh "seq_str"
.IX Subsection "seq_str"
.Vb 10
\& Usage     : $hsp->seq_str( seq_type );
\& Purpose   : Get the full query, sbjct, or 'match' sequence as a string.
\&           : The 'match' sequence is the string of symbols in between the 
\&           : query and sbjct sequences.
\& Example   : $str = $hsp->seq_str('query');
\& Returns   : String
\& Argument  : seq_Type = 'query' or 'sbjct' or 'match'
\& Throws    : Exception if the argument does not match an accepted seq_type.
\& Comments  : Calls _set_residues() to set the 'match' sequence if it has
\&           : not been set already.
.Ve
See Also   : the seq manpage(), the seq_inds manpage(), the _set_match_seq manpage()
.Sh "seq_inds"
.IX Subsection "seq_inds"
.Vb 19
\& Usage     : $hsp->seq_inds( seq_type, class, collapse );
\& Purpose   : Get a list of residue positions (indices) for all identical 
\&           : or conserved residues in the query or sbjct sequence.
\& Example   : @ind = $hsp->seq_inds('query', 'identical');
\&           : @ind = $hsp->seq_inds('sbjct', 'conserved');
\&           : @ind = $hsp->seq_inds('sbjct', 'conserved', 1);
\& Returns   : List of integers 
\&           : May include ranges if collapse is true.
\& Argument  : seq_type  = 'query' or 'sbjct'  (default = query)
\&           : class     = 'identical' or 'conserved' (default = identical)
\&           :              (can be shortened to 'id' or 'cons')
\&           :              (actually, anything not 'id' will evaluate to 'conserved').
\&           : collapse  = boolean, if true, consecutive positions are merged
\&           :             using a range notation, e.g., "1 2 3 4 5 7 9 10 11" 
\&           :             collapses to "1-5 7 9-11". This is useful for 
\&           :             consolidating long lists. Default = no collapse.
\& Throws    : n/a.
\& Comments  : Calls _set_residues() to set the 'match' sequence if it has
\&           : not been set already.
.Ve
See Also   : the seq manpage(), the _set_residues manpage(), the collapse_nums manpage(), \fB\f(BIBio::Tools::Blast::Sbjct::seq_inds()\fB\fR
.Sh "get_aln"
.IX Subsection "get_aln"
.Vb 14
\& Usage     : $hsp->get_aln()
\& Purpose   : Get a Bio::UnivAln.pm object constructed from the query + sbjct 
\&           : sequences of the present HSP object.
\& Example   : $aln_obj = $hsp->get_aln();
\& Returns   : Object reference for a Bio::UnivAln.pm object.
\& Argument  : n/a.
\& Throws    : Propagates any exception ocurring during the construction of
\&           : the Bio::UnivAln object.
\& Comments  : Requires Bio::UnivAln.pm.
\&           : The Bio::UnivAln.pm object is constructed from the query + sbjct 
\&           : sequence objects obtained by calling seq().
\&           : Gap residues are included (see $GAP_SYMBOL). It is important that 
\&           : Bio::UnivAln.pm recognizes the gaps correctly. A strategy for doing 
\&           : this is being considered. Currently it is hard-wired.
.Ve
See Also   : the seq manpage(), \fBBio::UnivAln.pm\fR
.Sh "display"
.IX Subsection "display"
.Vb 12
\& Usage     : $sbjct_object->display( %named_parameters );
\& Purpose   : Display information about Bio::Tools::Blast::Sbjct.pm data members
\&           : including:  length, gaps, score, significance value, 
\&           :             sequences and sequence indices.
\& Example   : $object->display(-SHOW=>'stats');
\& Argument  : Named parameters: (TAGS CAN BE UPPER OR LOWER CASE)
\&           :          -SHOW  => 'hsp',
\&           :          -WHERE => filehandle (default = STDOUT)
\& Returns   : n/a
\& Status    : Experimental
\& Comments  : For more control over the display of sequence data,
\&           : use seq(), seq_str(), seq_inds().
.Ve
See Also   : the _display_seq manpage(), the seq manpage(), the seq_str manpage(), the seq_inds manpage(), the _display_matches manpage(), \fB\f(BIBio::Root::Object::display()\fB\fR
.Sh "_display_seq"
.IX Subsection "_display_seq"
.Vb 8
\& Usage     : n/a; called automatically by display()
\& Purpose   : Display information about query and sbjct HSP sequences.
\&           : Prints the start, stop coordinates and the actual sequence.
\& Example   : n/a
\& Argument  : 
\& Returns   : printf call.
\& Status    : Experimental
\& Comments  : For more control, use seq(), seq_str(), or seq_inds().
.Ve
See Also   : the display manpage(), the seq manpage(), the seq_str manpage(), the seq_inds manpage(), the _display_matches manpage()
.Sh "_display_matches"
.IX Subsection "_display_matches"
.Vb 8
\& Usage     : n/a; called automatically by display()
\& Purpose   : Display information about identical and conserved positions
\&           : within both the query and sbjct sequences.
\& Example   : n/a
\& Argument  :
\& Returns   : printf call.
\& Status    : Experimental
\& Comments  : For more control, use seq_inds().
.Ve
See Also   : the display manpage(), the seq_inds manpage(), the _display_seq manpage(), 
.Sh "homol_data"
.IX Subsection "homol_data"
.Vb 15
\& Usage     : $data = $hsp_object->homo_data( %named_params );
\& Purpose   : Gets similarity data for a single HSP.
\& Returns   : String:
\&           : "Homology data" for each HSP is in the format:
\&           :  "<integer> <start> <stop>"
\&           :  where integer is the value returned by homol_score().
\& Argument  : Named params:  (UPPER OR LOWERCASE TAGS)
\&           :   currently just one param is used:
\&           :   -SEQ =>'query' or 'sbjct'
\& Throws    : n/a
\& Status    : Experimental
\& Comments  : This is a very experimental method used for obtaining a
\&           : coarse indication of:
\&           :   1) how strong the similarity is between the sequences in the HSP,
\&           :   3) the endpoints of the alignment (sequence monomer numbers)
.Ve
See Also   : the homol_score manpage(), \fBBio::Tools::Blast.::\f(BIhomol_data()\fB\fR, \fB\f(BIBio::Tools::Blast::Sbjct::homol_data()\fB\fR
.Sh "homol_score"
.IX Subsection "homol_score"
.Vb 15
\& Usage     : $self->homol_score();
\& Purpose   : Get a homology score (integer 1 - 3) as a coarse representation of 
\&           : the strength of the similarity independent of sequence composition. 
\&           : Based on the Blast bit score.
\& Example   : $hscore = $hsp->homol_score();
\& Returns   : Integer 
\& Argument  : n/a
\& Throws    : n/a
\& Status    : Experimental
\& Comments  : See @Bio::Tools::Blast::HSP::SCORE_CUTOFFS for the specific values. 
\&           : Currently,  BIT_SCORE  HOMOL_SCORE
\&           :             ---------  -----------
\&           :             >=100     --> 3 
\&           :               30-100  --> 2
\&           :             < 30      --> 1
.Ve
See Also   : the homol_data manpage()
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.Sh "collapse_nums"
.IX Subsection "collapse_nums"
.Vb 11
\& Usage     : @cnums = collapse_nums( @numbers );
\& Purpose   : Collapses a list of numbers into a set of ranges of consecutive terms:
\&           : Useful for condensing long lists of consecutive numbers.
\&           :  EXPANDED:
\&           :     1 2 3 4 5 6 10 12 13 14 15 17 18 20 21 22 24 26 30 31 32
\&           :  COLLAPSED:
\&           :     1-6 10 12-15 17 18 20-22 24 26 30-32
\& Argument  : List of numbers and sorted numerically.
\& Returns   : List of numbers mixed with ranges of numbers (see above).
\& Throws    : n/a
\& Comments  : Probably belongs in a more general utility class.
.Ve
See Also   : the seq_inds manpage()
.SH "FOR DEVELOPERS ONLY"
.IX Header "FOR DEVELOPERS ONLY"
.Sh "Data Members"
.IX Subsection "Data Members"
Information about the various data members of this module is provided for those 
wishing to modify or understand the code. Two things to bear in mind: 
.Ip "1 Do \s-1NOT\s0 rely on these in any code outside of this module." 4
.IX Item "1 Do NOT rely on these in any code outside of this module."
All data members are prefixed with an underscore to signify that they are private.
Always use accessor methods. If the accessor doesn't exist or is inadequate, 
create or modify an accessor (and let me know, too!). 
.Ip "2 This documentation may be incomplete and out of date." 4
.IX Item "2 This documentation may be incomplete and out of date."
It is easy for these data member descriptions to become obsolete as 
this module is still evolving. Always double check this info and search 
for members not described here.
.PP
An instance of Bio::Tools::Blast::HSP.pm is a blessed reference to a hash containing
all or some of the following fields:
.PP
.Vb 3
\& FIELD           VALUE
\& --------------------------------------------------------------
\& (member names are mostly self-explanatory)
.Ve
.Vb 32
\& _score              :
\& _bits               :
\& _p                  :
\& _n                  : Integer. The 'N' value listed in parenthesis with P/Expect value:
\&                     : e.g., P(3) = 1.2e-30  ---> (N = 3).
\&                     : Not defined in NCBI Blast2 with gaps.
\&                     : To obtain the number of HSPs, use Bio::Tools::Blast::Sbjct::num_hsps().
\& _expect             :
\& _queryLength        : 
\& _queryGaps          : 
\& _queryStart         :
\& _queryStop          :
\& _querySeq           :
\& _sbjctLength        :
\& _sbjctGaps          :
\& _sbjctStart         :
\& _sbjctStop          :
\& _sbjctSeq           :
\& _matchSeq           : String. Contains the symbols between the query and sbjct lines
\&                       which indicate identical (letter) and conserved ('+') matches
\&                       or a mismatch (' ').
\& _numIdentical       :
\& _numConserved       :
\& _identicalRes_query :
\& _identicalRes_sbjct :
\& _conservedRes_query :
\& _conservedRes_sbjct :
\& _match_indent       : The number of leading space characters on each line containing
\&                       the match symbols. _match_indent is 13 in this example:
\&                         Query:   285 QNSAPWGLARISHRERLNLGSFNKYLYDDDAG
\&                                      Q +APWGLARIS       G+ + Y YD+ AG
\&                         ^^^^^^^^^^^^^
.Ve
.Vb 1
\& INHERITED DATA MEMBERS
.Ve
.Vb 4
\& _name          : From Bio::Root::Object.pm. 
\&                :
\& _parent        : From Bio::Root::Object.pm. This member contains a reference to the
\&                : Bio::Tools::Blast::Sbjct.pm object to which this hit belongs.
.Ve
