.\" Automatically generated by Pod::Man version 1.02
.\" Wed Jun 27 13:29:58 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Bio::Annotation::DBLink 3"
.TH Bio::Annotation::DBLink 3 "perl v5.6.0" "2001-04-25" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Bio::Annotation::DBLink \- \s-1DESCRIPTION\s0 of Object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&   $link1 = new Bio::Annotation::DBLink(-database => 'TSC',
\&                                        -primary_id => 'TSC0000030'
\&                                        );
.Ve
.Vb 1
\&   #or
.Ve
.Vb 3
\&   $link2 = new Bio::Annotation::DBLink();
\&   $link2->database('dbSNP');
\&   $link2->primary_id('2367');
.Ve
.Vb 2
\&   # $feat is Bio::Annotation object, Bio::SeqFeature::Generic inherits it
\&   $feat->add_DBLink($link2);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Provides an object which represents a link from one onbject to something
in another database without proscribing what is in the other database
.SH "AUTHOR \- Ewan Birney"
.IX Header "AUTHOR - Ewan Birney"
Ewan Birney \- birney@ebi.ac.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "database"
.IX Subsection "database"
.Vb 7
\& Title   : database
\& Usage   : $self->database($newval)
\& Function: set/get on the database string. Databases are just
\&           a string here which can then be interpretted elsewhere
\& Example : 
\& Returns : value of database
\& Args    : newvalue (optional)
.Ve
.Sh "primary_id"
.IX Subsection "primary_id"
.Vb 9
\& Title   : primary_id
\& Usage   : $self->primary_id($newval)
\& Function: set/get on the primary id (a string)
\&           The primary id is the main identifier used for this object in 
\&           the database. Good examples would be accession numbers. The id
\&           is meant to be the main, stable identifier for this object
\& Example : 
\& Returns : value of primary_id
\& Args    : newvalue (optional)
.Ve
.Sh "optional_id"
.IX Subsection "optional_id"
.Vb 12
\& Title   : optional_id
\& Usage   : $self->optional_id($newval)
\& Function: get/set for the optional_id (a string)
\&           optional id is a slot for people to use as they wish. The main
\&           issue is that some databases do not have a clean single string
\&           identifier scheme. It is hoped that the primary_id can behave like
\&           a reasonably sane "single string identifier" of objects, and people
\&           can use/abuse optional ids to their heart's content to provide
\&           precise mappings. 
\& Example : 
\& Returns : value of optional_id
\& Args    : newvalue (optional)
.Ve
.Sh "comment"
.IX Subsection "comment"
.Vb 7
\& Title   : comment
\& Usage   : $self->comment($newval)
\& Function: get/set of comments (comment object)
\&           Sets or gets comments of this dblink, which is sometimes relevant
\& Example : 
\& Returns : value of comment (Bio::Annotation::Comment)
\& Args    : newvalue (optional)
.Ve
