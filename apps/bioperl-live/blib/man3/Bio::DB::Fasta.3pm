.\" Automatically generated by Pod::Man version 1.02
.\" Wed Jun 27 13:29:57 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Bio::DB::Fasta 3"
.TH Bio::DB::Fasta 3 "perl v5.6.0" "2001-06-18" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Bio::DB::Fasta \*(-- Fast indexed access to a directory of fasta files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::DB::Fasta;
.Ve
.Vb 2
\&  # create database from directory of fasta files
\&  my $db      = Bio::DB::Fasta->new('/path/to/fasta/files');
.Ve
.Vb 7
\&  # simple access (for those without Bioperl)
\&  my $seq     = $db->seq('CHROMOSOME_I',4_000_000 => 4_100_000);
\&  my $revseq  = $db->seq('CHROMOSOME_I',4_100_000 => 4_000_000);
\&  my @ids     = $db->ids;
\&  my $length  = $db->length('CHROMOSOME_I');
\&  my $moltype = $db->moltype('CHROMOSOME_I');
\&  my $header  = $db->header('CHROMOSOME_I');
.Ve
.Vb 2
\&  # Bioperl-style access
\&  my $db      = Bio::DB::Fasta->new('/path/to/fasta/files');
.Ve
.Vb 5
\&  my $obj     = $db->get_Seq_by_id('CHROMOSOME_I');
\&  my $seq     = $obj->seq;
\&  my $subseq  = $obj->subseq(4_000_000 => 4_100_000);
\&  my $length  = $obj->length;
\&  # (etc)
.Ve
.Vb 5
\&  # BioSeqI-style access
\&  my $stream  = Bio::DB::Fasta->new('/path/to/fasta/files')->get_PrimarySeq_stream;
\&  while (my $seq = $stream->next_seq) {
\&    # Bio::PrimarySeqI stuff
\&  }
.Ve
.Vb 4
\&  my $fh = Bio::DB::Fasta->newFh('/path/to/fasta/files');
\&  while (my $seq = <$fh>) {
\&    # Bio::PrimarySeqI stuff
\&  }
.Ve
.Vb 3
\&  # tied hash access
\&  tie %sequences,'Bio::DB::Fasta','/path/to/fasta/files';
\&  print $sequences{'CHROMOSOME_I:1,20000'};
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bio::DB::Fasta provides indexed access to one or more Fasta files.  It
provides random access to each sequence entry, and to subsequences
within each entry, allowing you to retrieve portions of very large
sequences without bringing the entire sequence into memory.
.PP
When you initialize the module, you point it at a single fasta file or
a directory of multiple such files.  The first time it is run, the
module generates an index of the contents of the file or directory
using the AnyDBM module (Berkeley \s-1DB\s0 preferred, followed by GDBM_File,
NDBM_File, and SDBM_File).  Thereafter it uses the index file to find
the file and offset for any requested sequence.  If one of the source
fasta files is updated, the module reindexes just that one file.  (You
can also force reindexing manually).  For improved performance, the
module keeps a cache of open filehandles, closing less-recently used
ones when the cache is full.
.PP
The fasta files may contain any combination of nucleotide and protein
sequences; during indexing the module guesses the molecular type.
Entries may have any line length, and different line lengths are
allowed in the same file.  However, within a sequence entry, all lines
must be the same length except for the last.
.PP
The module uses /^>(\eS+)/ to extract each sequence\e's primary \s-1ID\s0 from
the Fasta header.  During indexing, you may pass a callback routine to
modify this primary \s-1ID\s0.  For example, you may wish to extract a
portion of the gi|gb|abc|xyz nonsense that GenBank Fasta files use.
The original header line can be recovered later.
.PP
This module was developed for use with the C. elegans and human
genomes, and has been tested with sequence segments as large as 20
megabases.  Indexing the C. elegans genome (100 megabases of genomic
sequence plus 100,000 ESTs) takes ~5 minutes on my 300 MHz pentium
laptop. On the same system, average access time for any 200\-mer within
the C. elegans genome was <0.02s.
.SH "DATABASE CREATION AND INDEXING"
.IX Header "DATABASE CREATION AND INDEXING"
The two constructors for this class are \fInew()\fR and \fInewFh()\fR.  The former
creates a Bio::DB::Fasta object which is accessed via method calls.
The latter creates a tied filehandle which can be used Bio::SeqIO
style to fetch sequence objects in a stream fashion.  There is also a
tied hash interface.
.Ip "$db = Bio::DB::Fasta->new($fasta_path [,@options])" 4
.IX Item "$db = Bio::DB::Fasta->new($fasta_path [,@options])"
Create a new Bio::DB::Fasta object from the Fasta file or files
indicated by \f(CW$fasta_path\fR.  Indexing will be performed automatically if
needed.  If successful, \fInew()\fR will return the database accessor
object.  Otherwise it will return undef.
.Sp
$fasta_path may be an individual Fasta file, or may refer to a
directory containing one or more of such files.  Following the path,
you may pass a series of name=>value options.  Valid options are:
.Sp
.Vb 2
\& Option Name   Description               Default
\& -----------   -----------               -------
.Ve
.Vb 3
\& -glob         Glob expression to use    *.{fa,fasta,fast,FA,FASTA,FAST}
\&               for searching for Fasta
\&               files in directories.
.Ve
.Vb 2
\& -makeid       A code subroutine for     None
\&               transforming Fasta IDs.
.Ve
.Vb 2
\& -maxopen      Maximum size of           32
\&               filehandle cache.
.Ve
.Vb 2
\& -debug        Turn on status            0
\&               messages.
.Ve
.Vb 2
\& -reindex      Force the index to be     0
\&               rebuilt.
.Ve
.Vb 4
\& -dbmargs      Additional arguments      none
\&               to pass to the DBM
\&               routines when tied
\&               (scalar or array ref).
.Ve
\&\-dbmargs can be used to control the format of the index.  For example,
you can pass \f(CW$DB_BTREE\fR to this argument so as to force the IDs to be
sorted and retrieved alphabetically.  Note that you must use the same
arguments every time you open the index!
.Sp
\&\-reindex can be used to force the index to be recreated from scratch.
.Ip "$fh = Bio::DB::Fasta->newFh($fasta_path [,@options])" 4
.IX Item "$fh = Bio::DB::Fasta->newFh($fasta_path [,@options])"
Create a tied filehandle opened on a Bio::DB::Fasta object.  Reading
from this filehandle with <> will return a stream of sequence objects,
Bio::SeqIO style.
.PP
The \-makeid option gives you a chance to modify sequence IDs during
indexing.  The option\e's value should be a code reference that will
take a scalar argument and return a scalar result, like this:
.PP
.Vb 5
\&  sub make_my_id {
\&    my $original_id = shift;
\&    # modify it somehow
\&    return $modified_id;
\&  }
.Ve
As per the Fasta specification, the sequence \s-1ID\s0 consists of one or
more non-whitespace characters following the initial >.  For example:
.PP
.Vb 1
\& >A12345.3 Predicted C. elegans protein
.Ve
During indexing, the module will use the regular expression /^>(\eS+)/
to extract \*(L"A12345.3\*(R" for use as the \s-1ID\s0.  If a \-makeid callback is
provided, the extracted \s-1ID\s0 will be passed to the subroutine.  This
gives you a chance to extract preferred accession numbers from
multipart IDs such as those provided by GenBank.
.PP
The \-makeid option is ignored after the index is constructed.
.SH "OBJECT METHODS"
.IX Header "OBJECT METHODS"
The following object methods are provided.
.Ip "$raw_seq = \f(CW$db\fR->seq($id [,$start, \f(CW$stop\fR])" 4
.IX Item "$raw_seq = $db->seq($id [,$start, $stop])"
Return the raw sequence (a string) given an \s-1ID\s0 and optionally a start
and stop position in the sequence.  In the case of \s-1DNA\s0 sequence, if
\&\f(CW$stop\fR is less than \f(CW$start\fR, then the reverse complement of the sequence
is returned (this violates Bio::Seq conventions).
.Sp
For your convenience, subsequences can be indicated with this compound 
\&\s-1ID:\s0
.Sp
.Vb 1
\&   $db->seq("$id:$start,$stop")
.Ve
.Ip "$length = \f(CW$db\fR->length($id)" 4
.IX Item "$length = $db->length($id)"
Return the length of the indicated sequence.
.Ip "$header = \f(CW$db\fR->header($id)" 4
.IX Item "$header = $db->header($id)"
Return the header line for the \s-1ID\s0, including the initial ">".
.Ip "$type  = \f(CW$db\fR->moltype($id)" 4
.IX Item "$type  = $db->moltype($id)"
Return the molecular type of the indicated sequence.  One of \*(L"dna\*(R",
\&\*(L"rna\*(R" or \*(L"protein\*(R".
.Ip "$filename  = \f(CW$db\fR->file($id)" 4
.IX Item "$filename  = $db->file($id)"
Return the name of the file in which the indicated sequence can be
found.
.Ip "$offset    = \f(CW$db\fR->offset($id)" 4
.IX Item "$offset    = $db->offset($id)"
Return the offset of the indicated sequence from the beginning of the
file in which it is located.  The offset points to the beginning of
the sequence, not the beginning of the header line.
.Ip "$header_length = \f(CW$db\fR->headerlen($id)" 4
.IX Item "$header_length = $db->headerlen($id)"
Return the length of the header line for the indicated sequence.
.Ip "$header_offset = \f(CW$db\fR->header_offset($id)" 4
.IX Item "$header_offset = $db->header_offset($id)"
Return the offset of the header line for the indicated sequence from
the beginning of the file in which it is located.
.Ip "$index_name  = \f(CW$db\fR->index_name" 4
.IX Item "$index_name  = $db->index_name"
Return the path to the index file.
.Ip "$path = \f(CW$db\fR->path" 4
.IX Item "$path = $db->path"
Return the path to the Fasta \fIfile\fR\|(s).
.PP
For BioPerl-style access, the following methods are provided:
.Ip "$seq = \f(CW$db\fR->get_Seq_by_id($id)" 4
.IX Item "$seq = $db->get_Seq_by_id($id)"
Return a Bio::PrimarySeq::Fasta object, which obeys the
Bio::PrimarySeqI conventions.  For example, to recover the raw \s-1DNA\s0 or
protein sequence, call \f(CW$seq\fR->\fIseq()\fR.
.Sp
Note that \fIget_Seq_by_id()\fR does not bring the entire sequence into
memory until requested.  Internally, the returned object uses the
accessor to generate subsequences as needed.
.Ip "$seq = \f(CW$db\fR->get_Seq_by_acc($id)" 4
.IX Item "$seq = $db->get_Seq_by_acc($id)"
.Ip "$seq = \f(CW$db\fR->get_Seq_by_primary_id($id)" 4
.IX Item "$seq = $db->get_Seq_by_primary_id($id)"
These methods all do the same thing as \fIget_Seq_by_id()\fR.
.Ip "$stream = \f(CW$db\fR->\fIget_PrimarySeq_stream()\fR" 4
.IX Item "$stream = $db->get_PrimarySeq_stream()"
Return a Bio::DB::Fasta::Stream object, which supports a single method
\&\fInext_seq()\fR. Each call to \fInext_seq()\fR returns a new
Bio::PrimarySeq::Fasta object, until no more sequences remain.
.PP
See the Bio::PrimarySeqI manpage for methods provided by the sequence objects
returned from \fIget_Seq_by_id()\fR and \fIget_PrimarySeq_stream()\fR.
.SH "TIED INTERFACES"
.IX Header "TIED INTERFACES"
This module provides two tied interfaces, one which allows you to
treat the sequence database as a hash, and the other which allows you
to treat the database as an I/O stream.
.Sh "Creating a Tied Hash"
.IX Subsection "Creating a Tied Hash"
The tied hash interface is very straightforward
.Ip "$obj = tie \f(CW%db\fR,'Bio::DB::Fasta','/path/to/fasta/files' [,@args]" 4
.IX Item "$obj = tie %db,'Bio::DB::Fasta','/path/to/fasta/files' [,@args]"
Tie \f(CW%db\fR to Bio::DB::Fasta using the indicated path to the Fasta files.
The optional \f(CW@args\fR list is the same set of named argument/value pairs
used by Bio::DB::Fasta->\fInew()\fR.
.Sp
If successful, \fItie()\fR will return the tied object.  Otherwise it will
return undef.
.PP
Once tied, you can use the hash to retrieve an individual sequence by
its \s-1ID\s0, like this:
.PP
.Vb 1
\&  my $seq = $db{CHROMOSOME_I};
.Ve
You may select a subsequence by appending the comma-separated range to 
the sequence \s-1ID\s0 in the format \*(L"$id:$start,$stop\*(R".  For example, here
is the first 1000 bp of the sequence with the \s-1ID\s0 \*(L"\s-1CHROMOSOME_I\s0\*(R":
.PP
.Vb 1
\&  my $seq = $db{'CHROMOSOME_I:1,1000'};
.Ve
(The regular expression used to parse this format allows sequence IDs
to contain colons.)
.PP
When selecting subsequences, if \f(CW$start\fR > stop, then the reverse
complement will be returned for \s-1DNA\s0 sequences.
.PP
The \fIkeys()\fR and \fIvalues()\fR functions will return the sequence IDs and
their sequences, respectively.  In addition, \fIeach()\fR can be used to
iterate over the entire data set:
.PP
.Vb 3
\& while (my ($id,$sequence) = each %db) {
\&    print "$id => $sequence\en";
\& }
.Ve
When dealing with very large sequences, you can avoid bringing them
into memory by calling \fIeach()\fR in a scalar context.  This returns the
key only.  You can then use tied(%db) to recover the Bio::DB::Fasta
object and call its methods.
.PP
.Vb 4
\& while (my $id = each %db) {
\&    print "$id => $db{$sequence:1,100}\en";
\&    print "$id => ",tied(%db)->length($id),"\en";
\& }
.Ve
You may, in addition invoke Bio::DB::Fasta\e's \s-1FIRSTKEY\s0 and \s-1NEXTKEY\s0 tied
hash methods directly.
.Ip "$id = \f(CW$db\fR->\s-1FIRSTKEY\s0" 4
.IX Item "$id = $db->FIRSTKEY"
Return the first \s-1ID\s0 in the database.
.Ip "$id = \f(CW$db\fR->NEXTKEY($id)" 4
.IX Item "$id = $db->NEXTKEY($id)"
Given an \s-1ID\s0, return the next \s-1ID\s0 in sequence.
.PP
This allows you to write the following iterative loop using just the
object-oriented interface:
.PP
.Vb 4
\& my $db = Bio::DB::Fasta->new('/path/to/fasta/files');
\& for (my $id=$db->FIRSTKEY; $id; $id=$db->NEXTKEY($id)) {
\&    # do something with sequence
\& }
.Ve
.Sh "Creating a Tied Filehandle"
.IX Subsection "Creating a Tied Filehandle"
The Bio::DB::Fasta->\fInewFh()\fR method creates a tied filehandle from
which you can read Bio::PrimarySeq::Fasta sequence objects
sequentially.  The following bit of code will iterate sequentially
over all sequences in the database:
.PP
.Vb 4
\& my $fh = Bio::DB::Fasta->newFh('/path/to/fasta/files');
\& while (my $seq = <$fh>) {
\&   print $seq->id,' => ',$seq->length,"\en";
\& }
.Ve
When no more sequences remain to be retrieved, the stream will return
undef.
.SH "BUGS"
.IX Header "BUGS"
When a sequence is deleted from one of the Fasta files, this deletion
is not detected by the module and removed from the index.  As a
result, a \*(L"ghost\*(R" entry will remain in the index and will return
garbage results if accessed.
.PP
Currently, the only way to accomodate deletions is to rebuild the
entire index, either by deleting it manually, or by passing
\&\-reindex=>1 to \fInew()\fR when initializing the module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the bioperl manpage
.SH "AUTHOR"
.IX Header "AUTHOR"
Lincoln Stein <lstein@cshl.org>.  
.PP
Copyright (c) 2001 Cold Spring Harbor Laboratory.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.  See \s-1DISCLAIMER\s0.txt for
disclaimers of warranty.
.Sh "new"
.IX Subsection "new"
.Vb 5
\& Title   : new
\& Usage   : my $db = new Bio::DB::Fasta( $path, @options);
\& Function: initialize a new Bio::DB::Fasta object
\& Returns : new Bio::DB::Fasta object
\& Args    : path to dir of fasta files or a single filename
.Ve
These are optional arguments to pass in as well.
.PP
\&\-glob         Glob expression to use    *.{fa,fasta,fast,FA,FASTA,FAST}
               for searching for Fasta
	       files in directories. 
.PP
.Vb 2
\& -makeid       A code subroutine for     None
\&               transforming Fasta IDs.
.Ve
.Vb 2
\& -maxopen      Maximum size of           32
\&               filehandle cache.
.Ve
.Vb 2
\& -debug        Turn on status            0
\&               messages.
.Ve
.Vb 2
\& -reindex      Force the index to be     0
\&               rebuilt.
.Ve
.Vb 4
\& -dbmargs      Additional arguments      none
\&               to pass to the DBM
\&               routines when tied
\&               (scalar or array ref).
.Ve
.Sh "newFh"
.IX Subsection "newFh"
.Vb 5
\& Title   : newFh
\& Function: gets a new Fh for a file
\& Example : internal method
\& Returns : GLOB 
\& Args    :
.Ve
.Sh "index_dir"
.IX Subsection "index_dir"
.Vb 5
\& Title   : index_dir
\& Usage   : $db->index_dir($dir)
\& Function: set the index dir and load all files in the dir
\& Returns : hashref of seq offsets in each file
\& Args    : dirname, boolean to force a reload of all files
.Ve
.Sh "get_Seq_by_id"
.IX Subsection "get_Seq_by_id"
.Vb 5
\& Title   : get_Seq_by_id
\& Usage   : my $seq = $db->get_Seq_by_id($id)
\& Function: Bio::DB::RandomAccessI method implemented
\& Returns : Bio::PrimarySeqI object
\& Args    : id
.Ve
.Sh "index_file"
.IX Subsection "index_file"
.Vb 6
\& Title   : index_file
\& Usage   : $db->index_file($filename)
\& Function: (re)loads a sequence file and indexes sequences offsets in the file
\& Returns : seq offsets in the file
\& Args    : filename, 
\&           boolean to force reloading a file
.Ve
.Sh "dbmargs"
.IX Subsection "dbmargs"
.Vb 5
\& Title   : dbmargs
\& Usage   : my @args = $db->dbmargs;
\& Function: gets stored dbm arguments
\& Returns : array
\& Args    : none
.Ve
.Sh "index_name"
.IX Subsection "index_name"
.Vb 6
\& Title   : index_name
\& Usage   : my $indexname = $db->index_name($path,$isdir);
\& Function: returns the name of the index for a specific path 
\& Returns : string
\& Args    : path to check, 
\&           boolean if it is a dir
.Ve
.Sh "calculate_offsets"
.IX Subsection "calculate_offsets"
.Vb 6
\& Title   : calculate_offsets
\& Usage   : $db->calculate_offsets($filename,$offsets);
\& Function: calculates the sequence offsets in a file based on id
\& Returns : offset hash for each file
\& Args    : file to process
\&           $offsets - hashref of id to offset storage
.Ve
.Sh "get_all_ids"
.IX Subsection "get_all_ids"
.Vb 5
\& Title   : get_all_ids
\& Usage   : my @ids = $db->get_all_ids
\& Function: gets all the stored ids in all indexes
\& Returns : list of ids
\& Args    : none
.Ve
.Sh "subseq"
.IX Subsection "subseq"
.Vb 5
\& Title   : subseq
\& Usage   : $seqdb->subseq($id,$start,$stop);
\& Function: returns a subseq of a sequence in the db
\& Returns : subsequence data
\& Args    : id of sequence, starting point, ending point
.Ve
.Sh "get_PrimarySeq_stream"
.IX Subsection "get_PrimarySeq_stream"
.Vb 6
\& Title   : get_PrimarySeq_stream
\& Usage   :
\& Function:
\& Example :
\& Returns : 
\& Args    :
.Ve
