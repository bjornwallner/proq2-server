.\" Automatically generated by Pod::Man version 1.02
.\" Wed Jun 27 13:30:19 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Bio::Tools::GFF 3"
.TH Bio::Tools::GFF 3 "perl v5.6.0" "2001-05-16" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Bio::Tools::GFF \- A Bio::SeqAnalysisParserI compliant \s-1GFF\s0 format parser
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Bio::Tool::GFF;
.Ve
.Vb 8
\&    # specify input via -fh or -file
\&    my $gffio = Bio::Tools::GFF(-fh => \e*STDIN, -gff_version => 2);
\&    my $feature;
\&    # loop over the input stream
\&    while($feature = $gffio->next_feature()) {
\&        # do something with feature
\&    }
\&    $gffio->close();
.Ve
.Vb 8
\&    # you can also obtain a GFF parser as a SeqAnalasisParserI in
\&    # HT analysis pipelines (see Bio::SeqAnalysisParserI and
\&    # Bio::Factory::SeqAnalysisParserFactory)
\&    my $factory = Bio::Factory::SeqAnalysisParserFactory->new();
\&    my $parser = $factory->get_parser(-input => \e*STDIN, -method => "gff");
\&    while($feature = $parser->next_feature()) {
\&        # do something with feature
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class provides a simple \s-1GFF\s0 parser and writer. In the sense of a
SeqAnalysisParser, it parses an input file or stream into SeqFeatureI
objects, but is not in any way specific to a particular analysis
program and the output that program produces.
.PP
That is, if you can get your analysis program spit out \s-1GFF\s0, here is
your result parser.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org          - General discussion
\&  http://bio.perl.org/MailList.html             - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via email
or the web:
.PP
.Vb 2
\&  bioperl-bugs@bio.perl.org
\&  http://bio.perl.org/bioperl-bugs/
.Ve
.SH "AUTHOR \- Matthew Pocock"
.IX Header "AUTHOR - Matthew Pocock"
Email mrp@sanger.ac.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods. Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 4
\& Title   : new
\& Usage   : 
\& Function: Creates a new instance. Recognized named parameters are -file, -fh,
\&           and -gff_version.
.Ve
.Vb 2
\& Returns : a new object
\& Args    : names parameters
.Ve
.Sh "next_feature"
.IX Subsection "next_feature"
.Vb 8
\& Title   : next_feature
\& Usage   : $seqfeature = $gffio->next_feature();
\& Function: Returns the next feature available in the input file or stream, or
\&           undef if there are no more features.
\& Example :
\& Returns : A Bio::SeqFeatureI implementing object, or undef if there are no
\&           more features.
\& Args    : none
.Ve
.Sh "from_gff_string"
.IX Subsection "from_gff_string"
.Vb 5
\& Title   : from_gff_string
\& Usage   : $gff->from_gff_string($feature, $gff_string);
\& Function: Sets properties of a SeqFeatureI object from a GFF-formatted
\&           string. Interpretation of the string depends on the version
\&           that has been specified at initialization.
.Ve
.Vb 6
\&           This method is used by next_feature(). It actually dispatches to
\&           one of the version-specific (private) methods.
\& Example :
\& Returns : void
\& Args    : A Bio::SeqFeatureI implementing object to be initialized
\&           The GFF-formatted string to initialize it from
.Ve
.Sh "_from_gff1_string"
.IX Subsection "_from_gff1_string"
.Vb 7
\& Title   : _from_gff1_string
\& Usage   :
\& Function:
\& Example :
\& Returns : void
\& Args    : A Bio::SeqFeatureI implementing object to be initialized
\&           The GFF-formatted string to initialize it from
.Ve
.Sh "_from_gff2_string"
.IX Subsection "_from_gff2_string"
.Vb 7
\& Title   : _from_gff2_string
\& Usage   :
\& Function:
\& Example :
\& Returns : void
\& Args    : A Bio::SeqFeatureI implementing object to be initialized
\&           The GFF2-formatted string to initialize it from
.Ve
.Sh "write_feature"
.IX Subsection "write_feature"
.Vb 7
\& Title   : write_feature
\& Usage   : $gffio->write_feature($feature);
\& Function: Writes the specified SeqFeatureI object in GFF format to the stream
\&           associated with this instance.
\& Example :
\& Returns : 
\& Args    : A Bio::SeqFeatureI implementing object to be serialized
.Ve
.Sh "gff_string"
.IX Subsection "gff_string"
.Vb 4
\& Title   : gff_string
\& Usage   : $gffstr = $gffio->gff_string($feature);
\& Function: Obtain the GFF-formatted representation of a SeqFeatureI object.
\&           The formatting depends on the version specified at initialization.
.Ve
.Vb 5
\&           This method is used by write_feature(). It actually dispatches to
\&           one of the version-specific (private) methods.
\& Example :
\& Returns : A GFF-formatted string representation of the SeqFeature
\& Args    : A Bio::SeqFeatureI implementing object to be GFF-stringified
.Ve
.Sh "_gff1_string"
.IX Subsection "_gff1_string"
.Vb 6
\& Title   : _gff1_string
\& Usage   : $gffstr = $gffio->_gff1_string
\& Function: 
\& Example :
\& Returns : A GFF1-formatted string representation of the SeqFeature
\& Args    : A Bio::SeqFeatureI implementing object to be GFF-stringified
.Ve
.Sh "_gff2_string"
.IX Subsection "_gff2_string"
.Vb 6
\& Title   : _gff2_string
\& Usage   : $gffstr = $gffio->_gff2_string
\& Function: 
\& Example :
\& Returns : A GFF2-formatted string representation of the SeqFeature
\& Args    : A Bio::SeqFeatureI implementing object to be GFF2-stringified
.Ve
.Sh "gff_version"
.IX Subsection "gff_version"
.Vb 6
\& Title   : _gff_version
\& Usage   : $gffversion = $gffio->gff_version
\& Function: 
\& Example :
\& Returns : The GFF version this parser will accept and emit.
\& Args    : none
.Ve
