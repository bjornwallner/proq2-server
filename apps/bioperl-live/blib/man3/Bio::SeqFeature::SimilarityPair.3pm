.\" Automatically generated by Pod::Man version 1.02
.\" Wed Jun 27 13:30:14 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Bio::SeqFeature::SimilarityPair 3"
.TH Bio::SeqFeature::SimilarityPair 3 "perl v5.6.0" "2001-05-16" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Bio::SeqFeature::SimilarityPair \- Sequence feature based on the similarity
                  of two sequences.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  $sim_pair = Bio::SeqFeature::SimilarityPair->from_searchResult($blastHit);
.Ve
.Vb 2
\&  $sim = $sim_pair->query(); # a Bio::SeqFeature::Similarity object
\&  $sim = $sim_pair->subject(); # dto.
.Ve
.Vb 4
\&  # some properties for the similarity pair
\&  $expect = $sim_pair->significance();
\&  $score = $sim_pair->score();
\&  $bitscore = $sim_pair->bits();
.Ve
.Vb 2
\&  # this will not write the description for the sequence (only its name)
\&  print $sim_pair->query()->gff_string(), "\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Lightweight similarity search result as a pair of Similarity
features. This class inherits off Bio::SeqFeature::FeaturePair and
therefore implements Bio::SeqFeatureI, whereas the two features of the
pair are descendants of Bio::SeqFeature::Generic, with better support
for representing similarity search results in a cleaner way.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org              - General discussion
\&  http://bio.perl.org/MailList.html  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
 the bugs and their resolution.  Bug reports can be submitted via
 email or the web:
.PP
.Vb 2
\&  bioperl-bugs@bio.perl.org
\&  http://bio.perl.org/bioperl-bugs/
.Ve
.SH "AUTHOR \- Hilmar Lapp"
.IX Header "AUTHOR - Hilmar Lapp"
Email hlapp@gmx.net or hilmar.lapp@pharma.novartis.com
.PP
Describe contact details here
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods. Internal methods are usually preceded with a _
.Sh "from_searchResult"
.IX Subsection "from_searchResult"
.Vb 5
\& Title   : from_searchResult
\& Usage   : $sim_pair = Bio::SeqFeature::SimilarityPair->from_searchResult($blast_obj);
\&           $sim_pair->from_searchResult($blast_obj);
\& Function: This method creates or fills SimilarityPair objects from objects
\&           representing similarity search results.
.Ve
.Vb 4
\&           Since there is no public interface search result objects are
\&           required to implement, this method basically checks for the type
\&           of the object and dispatches the actual SimilarityPair creation
\&           to a method capable of this.
.Ve
.Vb 5
\&           At present, the following classes are recognized:
\&           Bio::Tools::Blast::Sbjct
\&           Bio::Tools::Blast::HSP
\&           An exception will be thrown if an object of an unrecognized class
\&           is passed.
.Ve
.Vb 3
\&           Note that this is probably the point where you will want to add
\&           your class if you have a method for creating SimilarityPair
\&           objects from it.
.Ve
.Vb 3
\&           Note that passing an object that has already previously been
\&           filled is potentially error-prone, because undefined fields
\&           will not be (re-)set to an undef value.
.Ve
.Vb 2
\& Returns : The object created or filled.
\& Args    :
.Ve
.Sh "_from_blastObject"
.IX Subsection "_from_blastObject"
.Vb 7
\& Title   : from_blastObject
\& Usage   : $sim_pair = Bio::SeqFeature::SimilarityPair->_from_blastObj($blast_obj);
\&           $sim_pair->_from_blastObj($blast_obj);
\& Function: See documentation for from_searchResult(). This one handles
\&           Bio::Tools::Blast::Sbjct and Bio::Tools::Blast::HSP objects.
\& Returns : A SimilarityPair object.
\& Args    :
.Ve
.Sh "query"
.IX Subsection "query"
.Vb 6
\& Title   : query
\& Usage   : $query_feature = $obj->query();
\&           $obj->query($query_feature);
\& Function: 
\& Returns : 
\& Args    :
.Ve
.Sh "subject"
.IX Subsection "subject"
.Vb 6
\& Title   : subject
\& Usage   : $sbjct_feature = $obj->subject();
\&           $obj->subject($sbjct_feature);
\& Function: 
\& Returns : 
\& Args    :
.Ve
.Sh "source_tag"
.IX Subsection "source_tag"
.Vb 6
\& Title   : source_tag
\& Usage   : $source = $obj->source_tag(); # i.e., program
\&           $obj->source_tag($evalue);
\& Function: 
\& Returns : 
\& Args    :
.Ve
.Sh "significance"
.IX Subsection "significance"
.Vb 6
\& Title   : significance
\& Usage   : $evalue = $obj->significance();
\&           $obj->significance($evalue);
\& Function: 
\& Returns : 
\& Args    :
.Ve
.Sh "score"
.IX Subsection "score"
.Vb 6
\& Title   : score
\& Usage   : $score = $obj->score();
\&           $obj->score($value);
\& Function: 
\& Returns : 
\& Args    :
.Ve
.Sh "bits"
.IX Subsection "bits"
.Vb 6
\& Title   : bits
\& Usage   : $bits = $obj->bits();
\&           $obj->bits($value);
\& Function: 
\& Returns : 
\& Args    :
.Ve
