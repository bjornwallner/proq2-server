.\" Automatically generated by Pod::Man version 1.02
.\" Wed Jun 27 13:30:13 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Bio::Tools::SeqPattern 3"
.TH Bio::Tools::SeqPattern 3 "perl v5.6.0" "2001-06-18" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Bio::Tools::SeqPattern.pm \- Bioperl object for a sequence pattern or motif
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Sh "Object Creation"
.IX Subsection "Object Creation"
.Vb 1
\&    use Bio::Tools::SeqPattern ();
.Ve
.Vb 2
\&    $pat1     = 'T[GA]AA...TAAT';
\&    $pattern1 = new Bio::Tools::SeqPattern(-SEQ =>$pattern, -TYPE =>'Dna');
.Ve
.Vb 2
\&    $pat2     = '[VILM]R(GXX){3,2}...[^PG]';
\&    $pattern2 = new Bio::Tools::SeqPattern(-SEQ =>$pattern, -TYPE =>'Amino');
.Ve
.SH "INSTALLATION"
.IX Header "INSTALLATION"
This module is included with the central Bioperl distribution:
.PP
.Vb 2
\&   http://bio.perl.org/Core/Latest
\&   ftp://bio.perl.org/pub/DIST
.Ve
Follow the installation instructions included in the \s-1README\s0 file.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Bio::Tools::SeqPattern.pm module encapsulates generic data and
methods for manipulating regular expressions describing nucleic or
amino acid sequence patterns (a.k.a, \*(L"motifs\*(R").
.PP
Bio::Tools::SeqPattern.pm is a concrete class that inherits from
\&\fBBio::Seq.pm\fR.
.PP
This class grew out of a need to have a standard module for doing routine
tasks with sequence patterns such as:
.PP
.Vb 4
\&  -- Forming a reverse-complement version of a nucleotide sequence pattern
\&  -- Expanding patterns containing ambiguity codes
\&  -- Checking for invalid regexp characters
\&  -- Untainting yet preserving special characters in the pattern
.Ve
Other features to look for in the future:
.PP
.Vb 2
\&  -- Full pattern syntax checking
\&  -- Conversion between expanded and ondensed forms of the pattern
.Ve
.SH "MOTIVATIONS"
.IX Header "MOTIVATIONS"
A key motivation for Bio::Tools::SeqPattern.pm is to have a way to
generate a reverse complement of a nucleotide sequence pattern.
This makes possible simultaneous pattern matching on both sense and 
anti-sense strands of a query sequence. 
.PP
In principle, one could do such a search more inefficiently by testing 
ainst both sense and anti-sense versions of a sequence. 
It is entirely equivalent to test a regexp containing both sense and 
anti-sense versions of the *pattern* against one copy of the sequence.
The latter approach is much more efficient since:
.PP
.Vb 3
\&   1) You need only one copy of the sequence.
\&   2) Only one regexp is executed.
\&   3) Regexp patterns are typically much smaller than sequences.
.Ve
Patterns can be quite complex and it is often difficult to
generate the reverse complement pattern. The Bioperl SeqPattern.pm
addresses this problem, providing a convenient set of tools
for working with biological sequence regular expressions.
.PP
Not all patterns have been tested. If you discover a pattern that
is not handled properly by Bio::Tools::SeqPattern.pm, please
send me some email (sac@genome.stanford.edu). Thanks.
.SH "OTHER FEATURES"
.IX Header "OTHER FEATURES"
.Sh "Extended Alphabet Support"
.IX Subsection "Extended Alphabet Support"
This module supports the same set of ambiguity codes for nucleotide 
sequences as supported by \fBBio::Seq.pm\fR. These ambiguity codes
define the behavior or the \fIexpand()\fR method.
Amino acid alphabet support is different from that of Seq.pm (see below).
.PP
.Vb 21
\& ------------------------------------------
\& Symbol       Meaning      Nucleic Acid
\& ------------------------------------------
\&  A            A           Adenine
\&  C            C           Cytosine
\&  G            G           Guanine
\&  T            T           Thymine
\&  U            U           Uracil
\&  M          A or C  
\&  R          A or G        Any purine
\&  W          A or T    
\&  S          C or G     
\&  Y          C or T        Any pyrimidine
\&  K          G or T     
\&  V        A or C or G  
\&  H        A or C or T  
\&  D        A or G or T  
\&  B        C or G or T   
\&  X      G or A or T or C 
\&  N      G or A or T or C 
\&  .      G or A or T or C
.Ve
.Vb 23
\& ------------------------------------------
\& Symbol           Meaning   
\& ------------------------------------------
\& A        Alanine
\& C        Cysteine
\& D        Aspartic Acid
\& E        Glutamic Acid
\& F        Phenylalanine
\& G        Glycine
\& H        Histidine
\& I        Isoleucine
\& K        Lysine
\& L        Leucine
\& M        Methionine
\& N        Asparagine
\& P        Proline
\& Q        Glutamine
\& R        Arginine
\& S        Serine
\& T        Threonine
\& V        Valine
\& W        Tryptophan
\& Y        Tyrosine
.Ve
.Vb 4
\& B        Any hydrophobic: IFVLWMAGCY
\& Z        Any hydrophilic: TSHEDQNKR
\& X        Any amino acid
\& .        Any amino acid
.Ve
.Sh "Multiple Format Support"
.IX Subsection "Multiple Format Support"
Ultimately, this module should be able to build SeqPattern.pm objects objects 
using a variety of pattern formats such as ProSite, Blocks, Prints, \s-1GCG\s0, etc.
Currently, this module only supports patterns using a grep-like syntax. 
.SH "USAGE"
.IX Header "USAGE"
A simple demo script is included with the central Bioperl distribution
(the INSTALLATION manpage) and is also available from:
.PP
.Vb 1
\&    http://bio.perl.org/Core/Examples/seq_pattern.pl
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 2
\&  Bio::Root::Object.pm    - Base class.
\&  Bio::Seq.pm             - Lightweight sequence object.
.Ve
.Vb 2
\&  http://bio.perl.org/Projects/modules.html  - Online module documentation
\&  http://bio.perl.org/                       - Bioperl Project Homepage
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules.  Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&    bioperl-l@bioperl.org              - General discussion
\&    http://bio.perl.org/MailList.html  - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution. Bug reports can be submitted via email
or the web:
.PP
.Vb 2
\&    bioperl-bugs@bio.perl.org                   
\&    http://bio.perl.org/bioperl-bugs/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Steve A. Chervitz, sac@genome.stanford.edu
.PP
See the the FEEDBACK manpage section for where to send bug reports and comments.
.SH "VERSION"
.IX Header "VERSION"
Bio::Tools::SeqPattern.pm, 0.011
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1997\-8 Steve A. Chervitz. All Rights Reserved.
This module is free software; you can redistribute it and/or 
modify it under the same terms as Perl itself.
.SH "new"
.IX Header "new"
.Vb 9
\& Title     : new
\& Usage     : my $seqpat = new Bio::Tools::SeqPattern();
\& Purpose   : Verifies that the type is correct for superclass (Bio::Seq.pm)
\&           : and calls superclass constructor last.
\& Returns   : n/a
\& Argument  : Parameters passed to new()
\& Throws    : Exception if the pattern string (seq) is empty.
\& Comments  : The process of creating a new SeqPattern.pm object
\&           : ensures that the pattern string is untained.
.Ve
See Also   : the _untaint_pat manpage(), \fB\f(BIBio::Root::RootI::new()\fB\fR, 
             \fB\f(BIBio::Seq::_initialize()\fB\fR
.SH "alphabet_ok"
.IX Header "alphabet_ok"
.Vb 14
\& Title     : alphabet_ok
\& Usage     : $mypat->alphabet_ok;
\& Purpose   : Checks for invalid regexp characters.
\&           : Overrides Bio::Seq::alphabet_ok() to allow 
\&           : additional regexp characters ,.*()[]<>{}^$ 
\&           : in addition to the standard genetic alphabet.
\&           : Also untaints the pattern and sets the sequence
\&           : object's sequence to the untained string.
\& Returns   : Boolean (1 | 0)
\& Argument  : n/a
\& Throws    : Exception if the pattern contains invalid characters.
\& Comments  : Does not call the superclass method.
\&           : Actaully permits any alphanumeric, not just the
\&           : standard genetic alphabet.
.Ve
See Also   : \fB\f(BIBio::Seq::alphabet_ok()\fB\fR, the _initialize manpage()
.SH "expand"
.IX Header "expand"
.Vb 8
\& Title     : expand
\& Usage     : $seqpat_object->expand();
\& Purpose   : Expands the sequence pattern using special ambiguity codes.
\& Example   : $pat = $seq_pat->expand();
\& Returns   : String containing fully expanded sequence pattern
\& Argument  : n/a
\& Throws    : Exception if sequence type is not recognized 
\&           : (i.e., is not one of [DR]NA, Amino)
.Ve
See Also   : \fBExtended Alphabet Support\fR, the _expand_pep manpage(), the _exapand_nuc manpage()
.SH "_expand_pep"
.IX Header "_expand_pep"
.Vb 6
\& Title     : _expand_pep
\& Usage     : n/a; automatically called by expand()
\& Purpose   : Expands peptide patterns
\& Returns   : String (the expanded pattern)
\& Argument  : String (the unexpanded pattern) 
\& Throws    : n/a
.Ve
See Also   : the expand manpage(), the _expand_nuc manpage()
.SH "_expand_nuc"
.IX Header "_expand_nuc"
.Vb 5
\& Title     : _expand_nuc
\& Purpose   : Expands nucleotide patterns
\& Returns   : String (the expanded pattern)
\& Argument  : String (the unexpanded pattern) 
\& Throws    : n/a
.Ve
See Also   : the expand manpage(), the _expand_pep manpage()
.SH "revcom"
.IX Header "revcom"
.Vb 19
\& Title     : revcom
\& Usage     : revcom([1]);
\& Purpose   : Forms a pattern capable of recognizing the reverse complement
\&           : version of a nucleotide sequence pattern.
\& Example   : $pattern_object->revcom(); 
\&           : $pattern_object->revcom(1); ## returns expanded rev complement pattern.
\& Returns   : Object reference for a new Bio::Tools::SeqPattern containing
\&           : the revcom of the current pattern as its sequence.
\& Argument  : (1) boolean (optional) (default= false)
\&           :     true : expand the pattern before rev-complementing. 
\&           :     false: don't expand pattern before or after rev-complementing.
\& Throws    : Exception if called for amino acid sequence pattern.
\& Comments  : This method permits the simultaneous searching of both
\&           : sense and anti-sense versions of a nucleotide pattern
\&           : by means of a grep-type of functionality in which any
\&           : number of patterns may be or-ed into the recognition
\&           : pattern.
\&           : Overrides Bio::Seq::revcom() and calls it first thing. 
\&           : The order of _fixpat() calls is critical.
.Ve
See Also   : \fB\f(BIBio::Seq::revcom()\fB\fR, the _fixpat_1 manpage(), the _fixpat_2 manpage(), the _fixpat_3 manpage(), the _fixpat_4 manpage(), the _fixpat_5 manpage()
.SH "_fixpat_1"
.IX Header "_fixpat_1"
.Vb 9
\& Title     : _fixpat_1
\& Usage     : n/a; called automatically by revcom()
\& Purpose   : Utility method for revcom()
\&           : Converts all {7,5} --> {5,7}     (Part I)
\&           :           and [T^] --> [^T]      (Part II)
\&           :           and *N   --> N*        (Part III)
\& Returns   : String (the new, partially reversed pattern)
\& Argument  : String (the expanded pattern)
\& Throws    : n/a
.Ve
See Also   : the revcom manpage()
.SH "_fixpat_2"
.IX Header "_fixpat_2"
.Vb 8
\& Title     : _fixpat_2
\& Usage     : n/a; called automatically by revcom()
\& Purpose   : Utility method for revcom()
\&           : Converts all {5,7}Y ---> Y{5,7}
\&           :          and {10,}. ---> .{10,}
\& Returns   : String (the new, partially reversed pattern)
\& Argument  : String (the expanded, partially reversed pattern)
\& Throws    : n/a
.Ve
See Also   : the revcom manpage()
.SH "_fixpat_3"
.IX Header "_fixpat_3"
.Vb 7
\& Title     : _fixpat_3
\& Usage     : n/a; called automatically by revcom()
\& Purpose   : Utility method for revcom()
\&           : Converts all {5,7}(XXX) ---> (XXX){5,7}
\& Returns   : String (the new, partially reversed pattern)
\& Argument  : String (the expanded, partially reversed pattern)
\& Throws    : n/a
.Ve
See Also   : the revcom manpage()
.SH "_fixpat_4"
.IX Header "_fixpat_4"
.Vb 7
\& Title     : _fixpat_4
\& Usage     : n/a; called automatically by revcom()
\& Purpose   : Utility method for revcom()
\&           : Converts all {5,7}[XXX] ---> [XXX]{5,7}
\& Returns   : String (the new, partially reversed pattern)
\& Argument  : String (the expanded, partially reversed  pattern)
\& Throws    : n/a
.Ve
See Also   : the revcom manpage()
.SH "_fixpat_5"
.IX Header "_fixpat_5"
.Vb 8
\& Title     : _fixpat_5
\& Usage     : n/a; called automatically by revcom()
\& Purpose   : Utility method for revcom()
\&           : Converts all *[XXX]  ---> [XXX]*
\&           :          and *(XXX)  ---> (XXX)*
\& Returns   : String (the new, partially reversed pattern)
\& Argument  : String (the expanded, partially reversed pattern)
\& Throws    : n/a
.Ve
See Also   : the revcom manpage()
.SH "_fixpat_6"
.IX Header "_fixpat_6"
.Vb 9
\& Title     : _fixpat_6
\& Usage     : n/a; called automatically by revcom()
\& Purpose   : Utility method for revcom()
\&           : Converts all ?Y{5,7}  ---> Y{5,7}?
\&           :          and ?(XXX){5,7}  ---> (XXX){5,7}?
\&           :          and ?[XYZ]{5,7}  ---> [XYZ]{5,7}?
\& Returns   : String (the new, partially reversed pattern)
\& Argument  : String (the expanded, partially reversed pattern)
\& Throws    : n/a
.Ve
See Also   : the revcom manpage()
.Sh "str"
.IX Subsection "str"
.Vb 5
\& Title   : str
\& Usage   : $obj->str($newval)
\& Function: 
\& Returns : value of str
\& Args    : newvalue (optional)
.Ve
.Sh "type"
.IX Subsection "type"
.Vb 5
\& Title   : type
\& Usage   : $obj->type($newval)
\& Function: 
\& Returns : value of type
\& Args    : newvalue (optional)
.Ve
.SH "FOR DEVELOPERS ONLY"
.IX Header "FOR DEVELOPERS ONLY"
.Sh "Data Members"
.IX Subsection "Data Members"
Information about the various data members of this module is provided
for those wishing to modify or understand the code. Two things to bear
in mind:
.Ip "1 Do \s-1NOT\s0 rely on these in any code outside of this module." 4
.IX Item "1 Do NOT rely on these in any code outside of this module."
All data members are prefixed with an underscore to signify that they
are private.  Always use accessor methods. If the accessor doesn't
exist or is inadequate, create or modify an accessor (and let me know,
too!).
.Ip "2 This documentation may be incomplete and out of date." 4
.IX Item "2 This documentation may be incomplete and out of date."
It is easy for this documentation to become obsolete as this module is
still evolving.  Always double check this info and search for members
not described here.
.PP
An instance of Bio::Tools::RestrictionEnzyme.pm is a blessed reference
to a hash containing all or some of the following fields:
.PP
.Vb 3
\& FIELD          VALUE
\& ------------------------------------------------------------------------
\& _rev     : The corrected reverse complement of the fully expanded pattern.
.Ve
.Vb 1
\& INHERITED DATA MEMBERS:
.Ve
.Vb 2
\& _seq     : (From Bio::Seq.pm) The original, unexpanded input sequence after untainting.
\& _type    : (From Bio::Seq.pm) 'Dna' or 'Amino'
.Ve
