.\" Automatically generated by Pod::Man version 1.02
.\" Wed Jun 27 13:30:10 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Bio::Tools::Sigcleave 3"
.TH Bio::Tools::Sigcleave 3 "perl v5.6.0" "2000-12-29" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Bio::Tools::Sigcleave.pm \- Bioperl object for sigcleave analysis
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Sh "Object Creation"
.IX Subsection "Object Creation"
.Vb 1
\&    use Bio::Tools::Sigcleave ();
.Ve
.Vb 5
\&    $sigcleave_object = new Bio::Tools::Sigcleave(-file=>'sigtest.aa',
\&                                                  -desc=>'test sigcleave protein seq',
\&                                                  -type=>'AMINO',
\&                                                  -threshold=>'3.5',
\&                                                 );
.Ve
Sigcleave objects can be created via the same methods as Bio::Seq objects. The
one additional parameter is \*(L"\-threshold\*(R" which sets the score reporting limit
for the algorithim. The above exmple shows a sigcleave object being created
from a protein sequence file. See the Bio::Seq documention to see the other ways
that objects can be created.
.Sh "Object Methods & Accessors"
.IX Subsection "Object Methods & Accessors"
.Vb 1
\&     %raw_results      = $sigcleave_object->signals;
.Ve
.Vb 1
\&     $formatted_output = $sigcleave_object->pretty_print;
.Ve
.SH "INSTALLATION"
.IX Header "INSTALLATION"
This module is included with the central Bioperl distribution:
.PP
.Vb 2
\&   http://bioperl.org/Core/Latest
\&   ftp://bioperl.org/pub/DIST
.Ve
Follow the installation instructions included in the \s-1README\s0 file.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\*(L"Sigcleave\*(R" was a program distributed as part of the free \s-1EGCG\s0 add-on to
earlier versions of the \s-1GCG\s0 Sequence Analysis package. 
.PP
From the \s-1EGCG\s0 documentation:
  SigCleave uses the von Heijne method to locate signal sequences, and to identify 
  the cleavage site. The method is 95% accurate in resolving signal sequences from 
  non-signal sequences with a cutoff score of 3.5, and 75\-80% accurate in identifying 
  the cleavage site. The program reports all hits above a minimum value. 
.PP
The \s-1EGCG\s0 Sigcleave program was written by Peter Rice 
(E-mail: pmr@sanger.ac.uk Post: Informatics Division, The Sanger Centre,
Wellcome Trust Genome Campus, Hinxton, Cambs, \s-1CB10\s0 1SA, \s-1UK\s0). 
.PP
Since \s-1EGCG\s0 is no longer distributed for the latest versions of \s-1GCG\s0, this code
was developed to emulate the output of the original program as much as possible for
those who lost access to sigcleave when upgrading to newer versions of \s-1GCG\s0.
.PP
There are 2 accessor methods for this object. \*(L"signals\*(R" will return a perl
associative array containing the sigcleave scores keyed by amino acid position.
\&\*(L"pretty_print\*(R" returns a formatted string similar to the output of the original
sigcleave utility.
.PP
In both cases, the \*(L"threshold\*(R" setting controls the score reporting level. If no
value for threshold is passed in by the user, the code defaults to a reporting value
of 3.5. 
.PP
In this implemntation the accessor will never return any score/position pair which does not
meet the threshold limit. This is the slightly different from the behaviour of
the 8.1 \s-1EGCG\s0 sigcleave program which will report the highest of the under-threshold
results if nothing else is found.
.PP
Example of pretty_print output:
.PP
.Vb 1
\&        SIGCLEAVE of sigtest from: 1 to 146
.Ve
.Vb 2
\&        Report scores over 3.5
\&        Maximum score 4.9 at residue 131
.Ve
.Vb 3
\&         Sequence:  FVILAAMSIQGSA-NLQTQWKSTASLALET
\&                    | (signal)    | (mature peptide)
\&                118            131
.Ve
.Vb 1
\&         Other entries above 3.5
.Ve
.Vb 1
\&        Maximum score 3.7 at residue 112
.Ve
.Vb 3
\&         Sequence:  CSRQLFGWLFCKV-HPGAIVFVILAAMSIQGSANLQTQWKSTASLALET
\&                   | (signal)    | (mature peptide)
\&                99            112
.Ve
.SH "USAGE"
.IX Header "USAGE"
No warranty implied or expressed. Use at your own risk :) Users unfamiliar
with the original Sigcleave application should read the von Heijne papers. 
.PP
The emphasis here is on correctly replicating the calls that 8.1 \s-1EGCG\s0 sigcleave
would make. This code has been tested against a non-redundant curated set
of 405 Swissprot proteins representing secreted, non-secreted, membrane and
transit proteins. Except for the \s-1EGCG\s0 sigcleave habit of reporting an
under-threshold score if nothing better is found the output was identical.
.PP
The weight matrix in this code is for eukaryote signal sequences.
.PP
Please see the example script located in the bioperl distribution
to see how this code can be used.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
When updating and maintaining a module, it helps to know that people
are actually using it. Let us know if you find a bug, think this code
is useful or have any improvements/features to suggest.
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track the bugs and 
their resolution. Bug reports can be submitted via email or the web:
.PP
.Vb 2
\&    bioperl-bugs@bio.perl.org                   
\&    http://bioperl.org/bioperl-bugs/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Chris Dagdigian, dag@sonsorol.org  & others
.SH "VERSION"
.IX Header "VERSION"
Bio::Tools::Sigcleave.pm, \f(CW$Id:\fR Sigcleave.pm,v 1.12 2000/12/29 07:43:27 lapp Exp $
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1999 Chris Dagdigian & others. All Rights Reserved.
This module is free software; you can redistribute it and/or 
modify it under the same terms as Perl itself.
.SH "REFERENCES / SEE ALSO"
.IX Header "REFERENCES / SEE ALSO"
von Heijne G. (1986) \*(L"A new method for predicting signal sequences cleavage sites.\*(R" 
Nucleic Acids Res. 14, 4683\-4690. 
.PP
von Heijne G. (1987) in \*(L"Sequence Analysis in Molecular Biology: Treasure Trove or Trivial Pursuit\*(R" 
(Acad. Press, (1987), 113\-117). 
.SH "APPENDIX"
.IX Header "APPENDIX"
The following documentation describes the various functions
contained in this module. Some functions are for internal 
use and are not meant to be called by the user; they are 
preceded by an underscore (\*(L"_\*(R").
.SH "_Analyze"
.IX Header "_Analyze"
.Vb 15
\& Title     : _Analyze
\& Usage     : N/A This is an internal method. Not meant to be called from outside
\&           : the package
\&           :
\& Purpose   : calculates sigcleave score and amino acid position for the
\&           : given protein sequence. The score reporting threshold can
\&           : be adjusted by passing in the "threshold" parameter during
\&           : object construction. If no threshold is passed in, the code
\&           : defaults to reporting any scores equal to or above 3.5
\&           :
\& Returns   : nothing. results are added to the object
\& Argument  : none.
\& Throws    : nothing.
\& Comments  : nothing.
\&See Also   : n/a
.Ve
.SH "threshold"
.IX Header "threshold"
.Vb 11
\& Title     : threshold
\& Usage     : $value = $self->threshold 
\&           :
\& Purpose   : Accessor method sigcleave score reporting threshold.
\&           : 
\& Returns   : float.
\&           : 
\& Argument  : none. 
\& Throws    : none.
\& Comments  : none.
\&See Also   : n/a
.Ve
.SH "signals"
.IX Header "signals"
.Vb 13
\& Title     : signals
\& Usage     : %sigcleave_results = $sigcleave_object->signals;
\&           :
\& Purpose   : Accessor method for sigcleave results
\&           : 
\& Returns   : Associative array. The key value represents the amino acid position
\&           : and the value represents the score. Only scores that
\&           : are greater than or equal to the THRESHOLD value are reported.
\&           : 
\& Argument  : none. 
\& Throws    : none.
\& Comments  : none.
\&See Also   : THRESHOLD
.Ve
.SH "pretty_print"
.IX Header "pretty_print"
.Vb 12
\& Title     : pretty_print
\& Usage     : $output = $sigcleave_object->pretty_print;
\&           : print $sigcleave_object->pretty_print;
\&           :
\& Purpose   : Emulates the output of the EGCG Sigcleave
\&           : utility.  
\&           : 
\& Returns   : A formatted string.
\& Argument  : none.
\& Throws    : none.
\& Comments  : none.
\&See Also   : n/a
.Ve
