.\" Automatically generated by Pod::Man version 1.02
.\" Wed Jun 27 13:30:16 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Bio::SeqFeature::Gene::Transcript 3"
.TH Bio::SeqFeature::Gene::Transcript 3 "perl v5.6.0" "2001-06-18" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Bio::SeqFeature::Gene::Transcript \- A feature representing a transcript
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See documentation of methods.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A feature representing a transcript.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this
and other Bioperl modules. Send your comments and suggestions preferably
 to one of the Bioperl mailing lists.
Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org          - General discussion
\&  http://bio.perl.org/MailList.html             - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
 the bugs and their resolution.
 Bug reports can be submitted via email or the web:
.PP
.Vb 2
\&  bioperl-bugs@bio.perl.org
\&  http://bio.perl.org/bioperl-bugs/
.Ve
.SH "AUTHOR \- Hilmar Lapp"
.IX Header "AUTHOR - Hilmar Lapp"
Email hlapp@gmx.net
.PP
Describe contact details here
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods. Internal methods are usually preceded with a _
.Sh "promoters"
.IX Subsection "promoters"
.Vb 3
\& Title   : promoters()
\& Usage   : @proms = $transcript->promoters();
\& Function: Get the promoter features/sites of this transcript.
.Ve
.Vb 3
\&           Note that OO-modeling of regulatory elements is not stable yet.
\&           This means that this method might change or even disappear in a
\&           future release. Be aware of this if you use it.
.Ve
.Vb 3
\& Returns : An array of Bio::SeqFeatureI implementing objects representing the
\&           promoter regions or sites.
\& Args    :
.Ve
.Sh "add_promoter"
.IX Subsection "add_promoter"
.Vb 3
\& Title   : add_promoter()
\& Usage   : $transcript->add_promoter($feature);
\& Function: Add a promoter feature/site to this transcript.
.Ve
.Vb 3
\&           Note that OO-modeling of regulatory elements is not stable yet.
\&           This means that this method might change or even disappear in a
\&           future release. Be aware of this if you use it.
.Ve
.Vb 2
\& Returns : 
\& Args    : A Bio::SeqFeatureI implementing object.
.Ve
.Sh "flush_promoters"
.IX Subsection "flush_promoters"
.Vb 3
\& Title   : flush_promoters()
\& Usage   : $transcript->flush_promoters();
\& Function: Remove all promoter features/sites from this transcript.
.Ve
.Vb 3
\&           Note that OO-modeling of regulatory elements is not stable yet.
\&           This means that this method might change or even disappear in a
\&           future release. Be aware of this if you use it.
.Ve
.Vb 2
\& Returns : 
\& Args    : none
.Ve
.Sh "exons"
.IX Subsection "exons"
.Vb 5
\& Title   : exons()
\& Usage   : @exons = $gene->exons();
\&           ($inital_exon) = $gene->exons('Initial');
\& Function: Get all exon features or all exons of specified type of this gene
\&           structure.
.Ve
.Vb 5
\&           Exon type is treated as a case-insensitive regular expression and 
\&           optional. For consistency, use only the following types: 
\&           initial, internal, terminal, utr, utr5prime, and utr3prime. 
\&           A special and virtual type is 'coding', which refers to all types
\&           except UTR (utr, utr5prime, utr3prime).
.Ve
.Vb 2
\& Returns : An array of Bio::SeqFeature::Gene::ExonI implementing objects.
\& Args    : An optional string specifying the primary_tag of the feature.
.Ve
.Sh "add_exon"
.IX Subsection "add_exon"
.Vb 3
\& Title   : add_exon()
\& Usage   : $transcript->add_exon($exon,'initial');
\& Function: Add a exon feature to this transcript.
.Ve
.Vb 3
\&           The second argument denotes the type of exon. Mixing exons with and
\&           without a type is likely to cause trouble in exons(). Either
\&           leave out the type for all exons or for none.
.Ve
.Vb 3
\&           Presently, the following types are known: initial, internal, 
\&           terminal, utr, utr5prime, and utr3prime (all case-insensitive).
\&           UTR should better be added through utrs()/add_utr().
.Ve
.Vb 4
\&           If you wish to use other or additional types, you will almost
\&           certainly have to call exon_type_sortorder() in order to replace
\&           the default sort order, or mrna(), cds(), protein(), and exons()
\&           may yield unexpected results.
.Ve
.Vb 3
\& Returns : 
\& Args    : A Bio::SeqFeature::Gene::ExonI implementing object.
\&           A string indicating the type of the exon (optional).
.Ve
.Sh "flush_exons"
.IX Subsection "flush_exons"
.Vb 4
\& Title   : flush_exons()
\& Usage   : $transcript->flush_exons();
\&           $transcript->flush_exons('terminal');
\& Function: Remove all or a certain type of exon features from this transcript.
.Ve
.Vb 1
\&           See add_exon() for documentation about types.
.Ve
.Vb 4
\&           Calling without a type will not flush UTRs. Call flush_utrs() for
\&           this purpose.
\& Returns : 
\& Args    : A string indicating the type of the exon (optional).
.Ve
.Sh "exon_type_sortorder"
.IX Subsection "exon_type_sortorder"
.Vb 5
\& Title   : exon_type_sortorder
\& Usage   : $transcript->exon_type_sortorder('type1','type2','type3');
\&           $tableref = $transcript->exon_type_sortorder();
\&           Bio::SeqFeature::Gene::Transcript->exon_type_sortorder('type1','type2','type3');
\& Function: Install or retrieve the sort-order of exon types.
.Ve
.Vb 4
\&           Ordering exons by type is only of relevance for methods
\&           constructing a sequence corresponding to the transcript object
\&           (e.g., mrna(), cds(), etc). For instance, an initial exon would
\&           have to be put before an internal exon.
.Ve
.Vb 6
\&           The sort-order installed by default covers only the exon types
\&           documented in exons(). If you use a different set or additional
\&           types, you must call this method with the proper ordering before
\&           you can obtain meaningful results from methods that concatenate
\&           the sequence of exons. On installing a sort-order, pass all types
\&           you are using in ascending order.
.Ve
.Vb 4
\&           You can also retrieve the installed order. Do not modify the
\&           returned hash table (the method returns a reference) unless you know
\&           exactly what you are doing. Inspecting the keys of the table will
\&           tell you which types are currently known.
.Ve
.Vb 5
\&           This method can also be called as a class method. When called as
\&           class method it will operate on the default sort-order, which will
\&           be propagated to every object instantiated thereafter. When called
\&           as instance method it will operate only on the private copy of the
\&           object.
.Ve
.Vb 2
\& Returns : A reference to a hash table representing the sort-order.
\& Args    : On installing an order, an array of exon types in ascending order.
.Ve
.Sh "introns"
.IX Subsection "introns"
.Vb 3
\& Title   : introns()
\& Usage   : @introns = $gene->introns();
\& Function: Get all intron features this gene structure.
.Ve
.Vb 9
\&           Note that this implementation generates these features on-the-fly,
\&           that is, it simply treats all regions between exons as introns,
\&           assuming that exons do not overlap. A consequence is that a
\&           consistent correspondence between the elements in the returned
\&           array and the array exons() returns will exist only if the
\&           exons are properly sorted within their types (forward for plus-
\&           strand and reverse for minus-strand transcripts). To ensure
\&           correctness the elements in the array returned will always be
\&           sorted.
.Ve
.Vb 3
\& Returns : An array of Bio::SeqFeatureI implementing objects representing the
\&           intron regions.
\& Args    :
.Ve
.Sh "poly_A_site"
.IX Subsection "poly_A_site"
.Vb 7
\& Title   : poly_A_site()
\& Usage   : $polyAsite = $transcript->poly_A_site();
\& Function: Get/set the poly-adenylation feature/site of this transcript.
\& Returns : A Bio::SeqFeatureI implementing object representing the
\&           poly-adenylation region.
\& Args    : A Bio::SeqFeatureI implementing object on set, or FALSE to flush
\&           a previously set object.
.Ve
.Sh "utrs"
.IX Subsection "utrs"
.Vb 6
\& Title   : utrs()
\& Usage   : @utr_sites = $transcript->utrs('3prime');
\&           @utr_sites = $transcript->utrs('5prime');
\&           @utr_sites = $transcript->utrs();
\& Function: Get the features representing untranslated regions (UTR) of this
\&           transcript.
.Ve
.Vb 3
\&           You may provide an argument specifying the type of UTR. Currently
\&           the following types are recognized: 5prime 3prime for UTR on the
\&           5' and 3' end of the CDS, respectively.
.Ve
.Vb 4
\& Returns : An array of Bio::SeqFeature::Gene::ExonI implementing objects
\&           representing the UTR regions or sites.
\& Args    : Optionally, either 3prime, or 5prime for the the type of UTR
\&           feature.
.Ve
.Sh "add_utr"
.IX Subsection "add_utr"
.Vb 4
\& Title   : add_utr()
\& Usage   : $transcript->add_utr($utrobj, '3prime');
\&           $transcript->add_utr($utrobj);
\& Function: Add a UTR feature/site to this transcript.
.Ve
.Vb 3
\&           The second parameter is optional and denotes the type of the UTR
\&           feature. Presently recognized types include '5prime' and '3prime'
\&           for UTR on the 5' and 3' end of a gene, respectively.
.Ve
.Vb 4
\&           Calling this method is the same as calling 
\&           add_exon($utrobj, 'utr'.$type). In this sense a UTR object is a
\&           special exon object, which is transcribed, not spliced out, but
\&           not translated.
.Ve
.Vb 2
\&           Note that the object supplied should return FALSE for is_coding().
\&           Otherwise cds() and friends will become confused.
.Ve
.Vb 2
\& Returns : 
\& Args    : A Bio::SeqFeature::Gene::ExonI implementing object.
.Ve
.Sh "flush_utrs"
.IX Subsection "flush_utrs"
.Vb 5
\& Title   : flush_utrs()
\& Usage   : $transcript->flush_utrs();
\&           $transcript->flush_utrs('3prime');
\& Function: Remove all or a specific type of UTR features/sites from this
\&           transcript.
.Ve
.Vb 3
\&           Cf. add_utr() for documentation about recognized types.
\& Returns : 
\& Args    : Optionally a string denoting the type of UTR feature.
.Ve
.Sh "sub_SeqFeature"
.IX Subsection "sub_SeqFeature"
.Vb 3
\& Title   : sub_SeqFeature
\& Usage   : @feats = $transcript->sub_SeqFeature();
\& Function: Returns an array of all subfeatures.
.Ve
.Vb 2
\&           This method is defined in Bio::SeqFeatureI. We override this here
\&           to include the exon etc features.
.Ve
.Vb 2
\& Returns : An array Bio::SeqFeatureI implementing objects.
\& Args    : none
.Ve
.Sh "flush_sub_SeqFeature"
.IX Subsection "flush_sub_SeqFeature"
.Vb 4
\& Title   : flush_sub_SeqFeature
\& Usage   : $transcript->flush_sub_SeqFeature();
\&           $transcript->flush_sub_SeqFeature(1);
\& Function: Removes all subfeatures.
.Ve
.Vb 5
\&           This method is overridden from Bio::SeqFeature::Generic to flush
\&           all additional subfeatures like exons, promoters, etc., which is
\&           almost certainly not what you want. To remove only features added
\&           through $transcript->add_sub_SeqFeature($feature) pass any
\&           argument evaluating to TRUE.
.Ve
.Vb 4
\& Example :
\& Returns : none
\& Args    : Optionally, an argument evaluating to TRUE will suppress flushing
\&           of all transcript-specific subfeatures (exons etc.).
.Ve
.Sh "cds"
.IX Subsection "cds"
.Vb 4
\& Title   : cds
\& Usage   : $seq = $transcript->cds();
\& Function: Returns the CDS (coding sequence) as defined by the exons of this
\&           transcript and the attached sequence.
.Ve
.Vb 1
\&           If no sequence is attached this method will return undef.
.Ve
.Vb 2
\&           Note that the implementation provided here returns a concatenation
\&           of all coding exons, thereby assuming that exons do not overlap.
.Ve
.Vb 3
\&           Note also that you cannot set the CDS via this method. Set a single
\&           CDS feature as a single exon, or derive your own class if you want
\&           to store a predicted CDS.
.Ve
.Vb 3
\& Example :
\& Returns : A Bio::PrimarySeqI implementing object.
\& Args    :
.Ve
.Sh "protein"
.IX Subsection "protein"
.Vb 3
\& Title   : protein()
\& Usage   : $protein = $transcript->protein();
\& Function: Get the protein encoded by the transcript as a sequence object.
.Ve
.Vb 2
\&           The implementation provided here simply calls translate() on the
\&           object returned by cds().
.Ve
.Vb 2
\& Returns : A Bio::PrimarySeqI implementing object.
\& Args    :
.Ve
.Sh "mrna"
.IX Subsection "mrna"
.Vb 3
\& Title   : mrna()
\& Usage   : $mrna = $transcript->mrna();
\& Function: Get the mRNA of the transcript as a sequence object.
.Ve
.Vb 3
\&           The difference to cds() is that the sequence object returned by
\&           this methods will also include UTR and the poly-adenylation site,
\&           but not promoter sequence (TBD).
.Ve
.Vb 1
\&           HL: do we really need this method?
.Ve
.Vb 2
\& Returns : A Bio::PrimarySeqI implementing object.
\& Args    :
.Ve
