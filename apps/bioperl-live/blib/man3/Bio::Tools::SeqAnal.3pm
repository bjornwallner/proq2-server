.\" Automatically generated by Pod::Man version 1.02
.\" Wed Jun 27 13:30:16 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Bio::Tools::SeqAnal 3"
.TH Bio::Tools::SeqAnal 3 "perl v5.6.0" "2001-05-16" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Bio::Tools::SeqAnal.pm \- Bioperl sequence analysis base class.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Sh "Object Creation"
.IX Subsection "Object Creation"
This module is an abstract base class. Perl will let you instantiate it,
but it provides little functionality on its own. This module
should be used via a specialized subclass. See the _initialize manpage()
for a description of constructor parameters.
.PP
.Vb 1
\&    require Bio::Tools::SeqAnal;
.Ve
To run and parse a new report:
.PP
.Vb 2
\&    $hit = new Bio::Tools::SeqAnal ( -run   => \e%runParams,
\&                                     -parse => 1);
.Ve
To parse an existing report:
.PP
.Vb 2
\&    $hit = new Bio::Tools::SeqAnal ( -file  => 'filename.data',
\&                                     -parse => 1);
.Ve
To run a report without parsing:
.PP
.Vb 2
\&    $hit = new Bio::Tools::SeqAnal ( -run   => \e%runParams
\&                                     );
.Ve
To read an existing report without parsing:
.PP
.Vb 2
\&    $hit = new Bio::Tools::SeqAnal ( -file  => 'filename.data',
\&                                     -read  => 1);
.Ve
.SH "INSTALLATION"
.IX Header "INSTALLATION"
This module is included with the central Bioperl distribution:
.PP
.Vb 2
\&   http://bio.perl.org/Core/Latest
\&   ftp://bio.perl.org/pub/DIST
.Ve
Follow the installation instructions included in the \s-1README\s0 file.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bio::Tools::SeqAnal.pm is a base class for specialized
sequence analysis modules such as \fBBio::Tools::Blast.pm\fR and \fBBio::Tools::Fasta.pm\fR.
It provides some basic data and functionalities that are not unique to
a specialized module such as:
.Ip "\(bu reading raw data into memory." 4
.IX Item "reading raw data into memory."
.Ip "\(bu storing name and version of the program." 4
.IX Item "storing name and version of the program."
.Ip "\(bu storing name of the query sequence." 4
.IX Item "storing name of the query sequence."
.Ip "\(bu storing name and version of the database." 4
.IX Item "storing name and version of the database."
.Ip "\(bu storing & determining the date on which the analysis was performed." 4
.IX Item "storing & determining the date on which the analysis was performed."
.Ip "\(bu basic file manipulations (compress, uncompress, delete)." 4
.IX Item "basic file manipulations (compress, uncompress, delete)."
.PP
Some of these functionalities (reading, file maipulation) are inherited from
\&\fBBio::Root::Object.pm\fR, from which Bio::Tools::SeqAnal.pm derives.
.SH "RUN, PARSE, and READ"
.IX Header "RUN, PARSE, and READ"
A SeqAnal.pm object can be created using one of three modes: run, parse, or read.
.PP
.Vb 4
\&  MODE      DESCRIPTION
\&  -----     -----------
\&  run       Run a new sequence analysis report. New results can then
\&            be parsed or saved for analysis later.
.Ve
.Vb 2
\&  parse     Parse the data from a sequence analysis report loading it
\&            into the SeqAnal.pm object.
.Ve
.Vb 3
\&  read      Read in data from an existing raw analysis report without
\&            parsing it. In the future, this may also permit persistent
\&            SeqAnal.pm objects. This mode is considered experimental.
.Ve
The mode is set by supplying switches to the constructor, see the _initialize manpage().
.PP
A key feature of SeqAnal.pm is the ability to access raw data in a generic
fashion. Regardless of what sequence analysis method is used, the raw data
always need to be read into memory.  The SeqAnal.pm class utilizes the the read manpage()
method inherited from \fBBio::Root::Object.pm\fR to permit the following:
.Ip "\(bu read from a file or \s-1STDIN\s0." 4
.IX Item "read from a file or STDIN."
.Ip "\(bu read a single record or a stream containing multiple records." 4
.IX Item "read a single record or a stream containing multiple records."
.Ip "\(bu specify a record separator." 4
.IX Item "specify a record separator."
.Ip "\(bu store all input data in memory or process the data stream as it is being read." 4
.IX Item "store all input data in memory or process the data stream as it is being read."
.PP
By permitting the parsing of data as it is being read, each record can be
analyzed as it is being read and saved or discarded as necessary.
This can be useful when cruching through thousands of reports.
For examples of this, see the the parse manpage() methods defined in \fBBio::Tools::Blast.pm\fR and
\&\fBBio::Tools::Fasta.pm\fR.
.Sh "Parsing & Running"
.IX Subsection "Parsing & Running"
Parsing and running of sequence analysis reports must be implemented for each
specific subclass of SeqAnal.pm. No-op stubs (\*(L"virtual methods\*(R") are provided here for
the the parse manpage() and the run manpage() methods. See \fBBio::Tools::Blast.pm\fR and \fBBio::Tools::Fasta.pm\fR
for examples.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
Bio::Tools::SeqAnal.pm is a concrete class that inherits from \fBBio::Root::Object.pm\fR.
This module also makes use of a number of functionalities inherited from
\&\fBBio::Root::Object.pm\fR (file manipulations such as reading, compressing, decompressing,
deleting, and obtaining date.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other Bioperl modules.
Send your comments and suggestions preferably to one of the Bioperl mailing lists.
Your participation is much appreciated.
.PP
.Vb 2
\&    bioperl-l@bioperl.org          - General discussion
\&    http://bio.perl.org/MailList.html             - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track the bugs and
their resolution. Bug reports can be submitted via email or the web:
.PP
.Vb 2
\&    bioperl-bugs@bio.perl.org
\&    http://bio.perl.org/bioperl-bugs/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Steve A. Chervitz, sac@genome.stanford.edu
.PP
See the the FEEDBACK manpage section for where to send bug reports and comments.
.SH "VERSION"
.IX Header "VERSION"
Bio::Tools::SeqAnal.pm, 0.011
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1998 Steve A. Chervitz. All Rights Reserved.
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 3
\& http://bio.perl.org/Projects/modules.html  - Online module documentation
\& http://bio.perl.org/Projects/Blast/        - Bioperl Blast Project
\& http://bio.perl.org/                       - Bioperl Project Homepage
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
Methods beginning with a leading underscore are considered private
and are intended for internal use by this module. They are
\&\fBnot\fR considered part of the public interface and are described here
for documentation purposes only.
.Sh "_initialize"
.IX Subsection "_initialize"
.Vb 23
\& Usage     : n/a; automatically called by Bio::Root::Object::new()
\& Purpose   : Calls private methods to extract the raw report data,
\&           : Calls superclass constructor first (Bio::Root::Object.pm).
\& Returns   : string containing the make parameter value.
\& Argument  : Named parameters (TAGS CAN BE ALL UPPER OR ALL LOWER CASE).
\&           : The SeqAnal.pm constructor only processes the following
\&           : parameters passed from new()
\&           :     -RUN     => hash reference for named parameters to be used
\&           :                 for running a sequence analysis program.
\&           :                 These are dereferenced and passed to the run() method.
\&           :     -PARSE   => boolean,
\&           :     -READ    => boolean,
\&           :
\&           : If -RUN is HASH ref, the run() method will be called with the
\&           :   dereferenced hash.
\&           : If -PARSE is true, all parameters passed from new() are passed
\&           :   to the parse() method. This occurs after the run method call
\&           :   to enable combined running + parsing.
\&           : If -READ is true, all parameters passed from new() are passed
\&           :   to the read() method.
\&           : Either -PARSE or -READ should be true, not both.
\& Comments  : Does not calls _rearrange() to handle parameters since only
\&           : a few are required and there may be potentially many.
.Ve
See Also   : \fB\f(BIBio::Root::Object::new()\fB\fR, \fB\f(BIBio::Root::Object::_rearrange()\fB\fR
.Sh "best"
.IX Subsection "best"
.Vb 4
\& Usage     : $object->best();
\& Purpose   : Set/Get the indicator for processing only the best match.
\& Returns   : Boolean (1 | 0)
\& Argument  : n/a
.Ve
.Sh "_set_db_stats"
.IX Subsection "_set_db_stats"
.Vb 6
\& Usage     : $object->_set_db_stats(<named parameters>);
\& Purpose   : Set stats about the database searched.
\& Returns   : String
\& Argument  : named parameters:
\&           :   -LETTERS => <int>  (number of letters in db)
\&           :   -SEQS    => <int>  (number of sequences in db)
.Ve
.Sh "database"
.IX Subsection "database"
.Vb 4
\& Usage     : $object->database();
\& Purpose   : Set/Get the name of the database searched.
\& Returns   : String
\& Argument  : n/a
.Ve
.Sh "database_release"
.IX Subsection "database_release"
.Vb 4
\& Usage     : $object->database_release();
\& Purpose   : Set/Get the release date of the queried database.
\& Returns   : String
\& Argument  : n/a
.Ve
.Sh "database_letters"
.IX Subsection "database_letters"
.Vb 4
\& Usage     : $object->database_letters();
\& Purpose   : Set/Get the number of letters in the queried database.
\& Returns   : Integer
\& Argument  : n/a
.Ve
.Sh "database_seqs"
.IX Subsection "database_seqs"
.Vb 4
\& Usage     : $object->database_seqs();
\& Purpose   : Set/Get the number of sequences in the queried database.
\& Returns   : Integer
\& Argument  : n/a
.Ve
.Sh "set_date"
.IX Subsection "set_date"
.Vb 15
\& Usage     : $object->set_date([<string>]);
\& Purpose   : Set the name of the date on which the analysis was performed.
\& Argument  : The optional string argument ca be the date or the
\&           : string 'file' in which case the date will be obtained from
\&           : the report file
\& Returns   : String
\& Throws    : Exception if no date is supplied and no file exists.
\& Comments  : This method attempts to set the date in either of two ways:
\&           :   1) using data passed in as an argument,
\&           :   2) using the Bio::Root::Utilities.pm file_date() method
\&           :      on the output file.
\&           : Another way is to extract the date from the contents of the
\&           : raw output data. Such parsing will have to be specialized
\&           : for different seq analysis reports. Override this method
\&           : to create such custom parsing code if desired.
.Ve
See Also   : the date manpage(), \fB\f(BIBio::Root::Object::file_date()\fB\fR
.Sh "date"
.IX Subsection "date"
.Vb 5
\& Usage     : $object->date();
\& Purpose   : Get the name of the date on which the analysis was performed.
\& Returns   : String
\& Argument  : n/a
\& Comments  : This method is not a combination set/get, it only gets.
.Ve
See Also   : the set_date manpage()
.Sh "length"
.IX Subsection "length"
.Vb 6
\& Usage     : $object->length();
\& Purpose   : Set/Get the length of the query sequence (number of monomers).
\& Returns   : Integer
\& Argument  : n/a
\& Comments  : Developer note: when using the built-in length function within
\&           : this module, call it as CORE::length().
.Ve
.Sh "program"
.IX Subsection "program"
.Vb 4
\& Usage     : $object->program();
\& Purpose   : Set/Get the name of the sequence analysis (BLASTP, FASTA, etc.)
\& Returns   : String
\& Argument  : n/a
.Ve
.Sh "program_version"
.IX Subsection "program_version"
.Vb 5
\& Usage     : $object->program_version();
\& Purpose   : Set/Get the version number of the sequence analysis program.
\&           : (e.g., 1.4.9MP, 2.0a19MP-WashU).
\& Returns   : String
\& Argument  : n/a
.Ve
.Sh "query"
.IX Subsection "query"
.Vb 5
\& Usage     : $name = $object->query();
\& Purpose   : Get the name of the query sequence used to generate the report.
\& Argument  : n/a
\& Returns   : String
\& Comments  : Equivalent to $object->name().
.Ve
.Sh "query_desc"
.IX Subsection "query_desc"
.Vb 4
\& Usage     : $object->desc();
\& Purpose   : Set/Get the description of the query sequence for the analysis.
\& Returns   : String
\& Argument  : n/a
.Ve
.Sh "display"
.IX Subsection "display"
.Vb 8
\& Usage     : $object->display(<named parameters>);
\& Purpose   : Display information about Bio::Tools::SeqAnal.pm data members.
\&           : Overrides Bio::Root::Object::display().
\& Example   : $object->display(-SHOW=>'stats');
\& Argument  : Named parameters: -SHOW  => 'file' | 'stats'
\&           :                   -WHERE => filehandle (default = STDOUT)
\& Returns   : n/a
\& Status    : Experimental
.Ve
See Also   : the _display_stats manpage(), the _display_file manpage(), \fBBio::Root::Object::display\fR
.Sh "_display_file"
.IX Subsection "_display_file"
.Vb 6
\& Usage     : n/a; called automatically by display()
\& Purpose   : Print the contents of the raw report file.
\& Example   : n/a
\& Argument  : one argument = filehandle object.
\& Returns   : true (1)
\& Status    : Experimental
.Ve
See Also   : the display manpage()
.Sh "_display_stats"
.IX Subsection "_display_stats"
.Vb 8
\& Usage     : n/a; called automatically by display()
\& Purpose   : Display information about Bio::Tools::SeqAnal.pm data members.
\&           : Prints the file name, program, program version, database name,
\&           : database version, query name, query length,
\& Example   : n/a
\& Argument  : one argument = filehandle object.
\& Returns   : printf call.
\& Status    : Experimental
.Ve
See Also   : \fBBio::Root::Object.pm\fR::\fIdisplay()\fR
.SH "VIRTUAL METHODS"
.IX Header "VIRTUAL METHODS"
.Sh "parse"
.IX Subsection "parse"
.Vb 9
\& Usage     : $object->parse( %named_parameters )
\& Purpose   : Parse a raw sequence analysis report.
\& Returns   : Integer (number of sequence analysis reports parsed).
\& Argument  : Named parameters.
\& Throws    : Exception: virtual method not defined.
\&           : Propagates any exception thrown by read()
\& Status    : Virtual
\& Comments  : This is virtual method that should be overridden to
\&           : parse a specific type of data.
.Ve
See Also   : \fB\f(BIBio::Root::Object::read()\fB\fR
.Sh "run"
.IX Subsection "run"
.Vb 8
\& Usage     : $object->run( %named_parameters )
\& Purpose   : Run a sequence analysis program on one or more sequences.
\& Returns   : n/a
\&           : Run mode should be configurable to return a parsed object or
\&           : the raw results data.
\& Argument  : Named parameters:
\& Throws    : Exception: virtual method not defined.
\& Status    : Virtual
.Ve
.SH "FOR DEVELOPERS ONLY"
.IX Header "FOR DEVELOPERS ONLY"
.Sh "Data Members"
.IX Subsection "Data Members"
Information about the various data members of this module is provided for those
wishing to modify or understand the code. Two things to bear in mind:
.Ip "1 Do \s-1NOT\s0 rely on these in any code outside of this module." 4
.IX Item "1 Do NOT rely on these in any code outside of this module."
All data members are prefixed with an underscore to signify that they are private.
Always use accessor methods. If the accessor doesn't exist or is inadequate,
create or modify an accessor (and let me know, too!).
.Ip "2 This documentation may be incomplete and out of date." 4
.IX Item "2 This documentation may be incomplete and out of date."
It is easy for these data member descriptions to become obsolete as
this module is still evolving. Always double check this info and search
for members not described here.
.PP
An instance of Bio::Tools::SeqAnal.pm is a blessed reference to a hash containing
all or some of the following fields:
.PP
.Vb 3
\& FIELD           VALUE
\& --------------------------------------------------------------
\&  _file            Full path to file containing raw sequence analysis report.
.Ve
.Vb 2
\&  _mode            Affects how much detail to extract from the raw report.
\&                   Future mode will also distinguish 'running' from 'parsing'
.Ve
.Vb 1
\& THE FOLLOWING MAY BE EXTRACTABLE FROM THE RAW REPORT FILE:
.Ve
.Vb 1
\&  _prog            Name of the sequence analysis program.
.Ve
.Vb 1
\&  _progVersion     Version number of the program.
.Ve
.Vb 1
\&  _db              Database searched.
.Ve
.Vb 1
\&  _dbRelease       Version or date of the database searched.
.Ve
.Vb 1
\&  _dbLetters       Total number of letters in the database.
.Ve
.Vb 1
\&  _dbSequences     Total number of sequences in the database.
.Ve
.Vb 1
\&  _query           Name of query sequence.
.Ve
.Vb 1
\&  _length          Length of the query sequence.
.Ve
.Vb 1
\&  _date            Date on which the analysis was performed.
.Ve
.Vb 1
\&  INHERITED DATA MEMBERS
.Ve
.Vb 2
\&  _name            From Bio::Root::Object.pm. String representing the name of the query sequence.
\&                   Typically obtained from the report file.
.Ve
.Vb 3
\&  _parent          From Bio::Root::Object.pm. This member contains a reference to the
\&                   object to which this seq anal report belongs. Optional & experimenta.
\&                   (E.g., a protein object could create and own a Blast object.)
.Ve
