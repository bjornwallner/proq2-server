.\" Automatically generated by Pod::Man version 1.02
.\" Wed Jun 27 13:30:08 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Bio::LiveSeq::IO::SRS 3"
.TH Bio::LiveSeq::IO::SRS 3 "perl v5.6.0" "2001-06-18" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Bio::LiveSeq::IO::SRS \- Loader for LiveSeq from \s-1EMBL\s0 entries with \s-1SRS\s0
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  my $db="EMBL";
\&  my $acc_id="M20132";
\&  my $query="embl-acc:$acc_id";
.Ve
.Vb 1
\&  my $loader=Bio::LiveSeq::IO::SRS->load(-db=>"EMBL", -query=>"$query");
.Ve
.Vb 1
\&  my @translationobjects=$loader->entry2liveseq();
.Ve
.Vb 2
\&  my $gene="AR";
\&  my $gene=$loader->gene2liveseq("gene");
.Ve
.Vb 1
\&  NOTE: The only -db now supported is EMBL. Hence it defaults to EMBL.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package uses the \s-1SRS\s0 (Sequence Retrieval System) to fetch a sequence
database entry, analyse it and create LiveSeq objects out of it.
.PP
An embl-acc \s-1ID\s0 has to be passed to this package which will return references
to all translation objects created from the \s-1EMBL\s0 entry.
References to Transcription, \s-1DNA\s0 and Exon objects can all be retrieved departing
from these.
.PP
Alternatively, a specific \*(L"gene\*(R" name can be specified, together with the
embl-acc \s-1ID\s0. This will create a LiveSeq::Gene object with all relevant gene
features attached/created.
.SH "AUTHOR \- Joseph A.L. Insana"
.IX Header "AUTHOR - Joseph A.L. Insana"
Email:  Insana@ebi.ac.uk, jinsana@gmx.net
.PP
Address: 
.PP
.Vb 3
\&     EMBL Outstation, European Bioinformatics Institute
\&     Wellcome Trust Genome Campus, Hinxton
\&     Cambs. CB10 1SD, United Kingdom
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.Sh "load"
.IX Subsection "load"
.Vb 4
\&  Title   : load
\&  Usage   : my $acc_id="M20132";
\&            my $query="embl-acc:$acc_id";
\&            $loader=Bio::LiveSeq::IO::SRS->load(-db=>"EMBL", -query=>"$query");
.Ve
.Vb 4
\&  Function: loads an entry with SRS from a database into a hash
\&  Returns : reference to a new object of class IO::SRS holding an entry
\&  Errorcode 0
\&  Args    : an SRS query resulting in one fetched EMBL (by default) entry
.Ve
.Sh "embl2hash"
.IX Subsection "embl2hash"
.Vb 12
\&  Title   : embl2hash
\&  Function: retrieves with SRS an EMBL entry, parses it and creates
\&            a hash that contains all the information.
\&  Returns : a reference to a hash
\&  Errorcode: 0
\&  Args    : an SRS query resulting in one fetched EMBL entry
\&              i.e. a string in a form like "embl-acc:accession_number"
\&            two array references to skip features and qualifiers (for
\&            performance)
\&  Example: @valid_features=qw(CDS exon prim_transcript mRNA);
\&           @valid_qualifiers=qw(gene codon_start db_xref product rpt_family);
\&           $hashref=&embl2hash("$query",\e@valid_features,\e@valid_qualifiers);
.Ve
.Sh "get_swisshash"
.IX Subsection "get_swisshash"
.Vb 11
\&  Title   : get_swisshash
\&  Usage   : $loader->get_swisshash();
\&  Example : $swisshash=$loader->swissprot2hash("SWISS-PROT:P10275")
\&  Function: retrieves with SRS a SwissProt entry, parses it and creates
\&            a hash that contains all the information.
\&  Returns : a reference to a hash
\&  Errorcode: 0
\&  Args    : the db_xref qualifier's value from an EMBL CDS Feature
\&            i.e. a string in the form "SWISS-PROT:accession_number"
\&  Note    : this can be modified (adding a second argument) to retrieve
\&            and parse SWTREMBL, SWALL... entries
.Ve
.Sh "swissprot2hash"
.IX Subsection "swissprot2hash"
.Vb 11
\&  Title   : swissprot2hash
\&  Usage   : $loader->swissprot2hash();
\&  Example : $swisshash=$loader->swissprot2hash("swissprot-acc:P10275")
\&  Function: retrieves with SRS a SwissProt entry, parses it and creates
\&            a hash that contains all the information.
\&  Returns : a reference to a hash
\&  Errorcode: 0
\&  Args    : an SRS query resulting in one entry from SwissProt database
\&            i.e. a string in the form "swissprot-acc:accession_number"
\&  Note    : this can be modified (adding a second argument) to retrieve
\&            and parse SWTREMBL, SWALL... entries
.Ve
.Sh "novelaasequence2gene"
.IX Subsection "novelaasequence2gene"
.Vb 7
\&  Title   : novelaasequence2gene
\&  Usage   : $gene=Bio::LiveSeq::IO::SRS->novelaasequence2gene(-aasequence => "MGLAAPTRS*");
\&          : $gene=Bio::LiveSeq::IO::SRS->novelaasequence2gene(-aasequence => "MGLAAPTRS*",
\&                                             -genome => "Homo sapiens");
\&          : $gene=Bio::LiveSeq::IO::SRS->novelaasequence2gene(-aasequence => "MGLAAPTRS*",
\&                                             -genome => "Mitochondrion Homo sapiens",
\&                                             -gene_name => "tyr-kinase");
.Ve
.Vb 11
\&  Function: creates LiveSeq objects from a novel amino acid sequence,
\&            using codon usage database to choose codons according to
\&            relative frequencies.
\&            If a genome latin name is not specified, the default is to use
\&            'Homo sapiens' (taxonomy ID 9606).
\&  Returns : reference to a Gene object containing references to LiveSeq objects
\&  Errorcode 0
\&  Args    : string containing an amino acid sequence
\&            string (optional) with a species/genome latin name
\&            string specifying a gene name
\&  Note    : SRS access to TAXON and CODONUSAGE databases is required
.Ve
