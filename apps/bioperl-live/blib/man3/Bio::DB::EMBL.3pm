.\" Automatically generated by Pod::Man version 1.02
.\" Wed Jun 27 13:30:22 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Bio::DB::EMBL 3"
.TH Bio::DB::EMBL 3 "perl v5.6.0" "2001-05-16" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Bio::DB::EMBL \- Database object interface to \s-1EMBL\s0 retrieval
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::DB::EMBL;
.Ve
.Vb 1
\&  $embl = new Bio::DB::EMBL;
.Ve
.Vb 3
\&  # remember that EMBL_ID does not equal GenBank_ID!
\&  $seq = $embl->get_Seq_by_id('BUM'); # EMBL ID
\&        print "cloneid is ", $seq->id, "\en";
.Ve
.Vb 4
\&  # or changeing to accession number and Fasta format ...
\&  $embl->request_format('fasta');
\&  $seq = $embl->get_Seq_by_acc('J02231'); # EMBL ACC
\&        print "cloneid is ", $seq->id, "\en";
.Ve
.Vb 6
\&  # especially when using versions, you better be prepared
\&  # in not getting what what want
\&  eval {
\&      $seq = $embl->get_Seq_by_version('J02231.1'); # EMBL VERSION
\&  }
\&  print "cloneid is ", $seq->id, "\en" unless $@;
.Ve
.Vb 2
\&  # or ... best when downloading very large files, prevents
\&  # keeping all of the file in memory
.Ve
.Vb 8
\&  # also don't want features, just sequence so let's save bandwith
\&  # and request Fasta sequence
\&  $embl = new Bio::DB::EMBL(-retrievaltype => 'tempfile' ,
\&                               -format => 'fasta');
\&   my $seqio = $embl->get_Stream_by_batch(['AC013798', 'AC021953'] );
\&  while( my $clone =  $seqio->next_seq ) {
\&        print "cloneid is ", $clone->id, "\en";
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Allows the dynamic retrieval of sequence objects the Bio::Seq manpage from the
\&\s-1EMBL\s0 database using the emblfetch script at \s-1EBI:\s0
the http:E<sol>E<sol>www.ebi.ac.ukE<sol>cgi-binE<sol>emblfetch entry elsewhere in this document.
.PP
In order to make changes transparent we have host type (currently only
ebi) and location (defaults to ebi) separated out.  This allows later
additions of more servers in different geographical locations.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this
and other Bioperl modules. Send your comments and suggestions preferably
 to one of the Bioperl mailing lists.
Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                         - General discussion
\&  http://bio.perl.org/MailList.html             - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
 the bugs and their resolution.
 Bug reports can be submitted via email or the web:
.PP
.Vb 2
\&  bioperl-bugs@bio.perl.org
\&  http://bio.perl.org/bioperl-bugs/
.Ve
.SH "AUTHOR \- Heikki Lehvaslaiho"
.IX Header "AUTHOR - Heikki Lehvaslaiho"
Email Heikki Lehvaslaiho <Heikki@ebi.ac.uk>
=head1 \s-1APPENDIX\s0
.PP
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SH "Routines from Bio::DB::WebDBSeqI"
.IX Header "Routines from Bio::DB::WebDBSeqI"
.Sh "get_request"
.IX Subsection "get_request"
.Vb 5
\& Title   : get_request
\& Usage   : my $url = $self->get_request
\& Function: returns a HTTP::Request object
\& Returns :
\& Args    : %qualifiers = a hash of qualifiers (ids, format, etc)
.Ve
.Sh "postprocess_data"
.IX Subsection "postprocess_data"
.Vb 8
\& Title   : postprocess_data
\& Usage   : $self->postprocess_data ( 'type' => 'string',
\&                                     'location' => \e$datastr);
\& Function: process downloaded data before loading into a Bio::SeqIO
\& Returns : void
\& Args    : hash with two keys - 'type' can be 'string' or 'file'
\&                              - 'location' either file location or string
\&                                           reference containing data
.Ve
.Sh "default_format"
.IX Subsection "default_format"
.Vb 5
\& Title   : default_format
\& Usage   : my $format = $self->default_format
\& Function: Returns default sequence format for this module
\& Returns : string
\& Args    : none
.Ve
.SH "Bio::DB::EMBL specific routines"
.IX Header "Bio::DB::EMBL specific routines"
.Sh "get_Stream_by_batch"
.IX Subsection "get_Stream_by_batch"
.Vb 9
\&  Title   : get_Stream_by_batch
\&  Usage   : $seq = $db->get_Stream_by_batch($ref);
\&  Function: Retrieves Seq objects from Entrez 'en masse', rather than one
\&            at a time.  For large numbers of sequences, this is far superior
\&            than get_Stream_by_[id/acc]().
\&  Example :
\&  Returns : a Bio::SeqIO stream object
\&  Args    : $ref : either an array reference, a filename, or a filehandle
\&            from which to get the list of unique ids/accession numbers.
.Ve
.Sh "get_Seq_by_version"
.IX Subsection "get_Seq_by_version"
.Vb 6
\& Title   : get_Seq_by_version
\& Usage   : $seq = $db->get_Seq_by_version('X77802.1');
\& Function: Gets a Bio::Seq object by accession number
\& Returns : A Bio::Seq object
\& Args    : version number (as a string)
\& Throws  : "version does not exist" exception
.Ve
.Sh "request_format"
.IX Subsection "request_format"
.Vb 9
\& Title   : request_format
\& Usage   : my ($req_format, $ioformat) = $self->request_format;
\&           $self->request_format("genbank");
\&           $self->request_format("fasta");
\& Function: Get/Set sequence format retrieval. The get-form will normally not
\&           be used outside of this and derived modules.
\& Returns : Array of two strings, the first representing the format for
\&           retrieval, and the second specifying the corresponding SeqIO format.
\& Args    : $format = sequence format
.Ve
.Sh "servertype"
.IX Subsection "servertype"
.Vb 6
\& Title   : servertype
\& Usage   : my $servertype = $self->servertype
\&            $self->servertype($servertype);
\& Function: Get/Set server type
\& Returns : string
\& Args    : server type string [optional]
.Ve
.Sh "hostlocation"
.IX Subsection "hostlocation"
.Vb 6
\& Title   : hostlocation
\& Usage   : my $location = $self->hostlocation()
\&          $self->hostlocation($location)
\& Function: Set/Get Hostlocation
\& Returns : string representing hostlocation
\& Args    : string specifying hostlocation [optional]
.Ve
.Sh "location_url"
.IX Subsection "location_url"
.Vb 5
\& Title   : location
\& Usage   : my $url = $self->location_url()
\& Function: Get host url
\& Returns : string representing url
\& Args    : none
.Ve
