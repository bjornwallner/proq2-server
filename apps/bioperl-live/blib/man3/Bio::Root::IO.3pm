.\" Automatically generated by Pod::Man version 1.02
.\" Wed Jun 27 13:30:42 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Bio::Root::IO 3"
.TH Bio::Root::IO 3 "perl v5.6.0" "2001-06-18" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Bio::Root::IO \- module providing several methods often needed when dealing with file \s-1IO\s0
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&    # utilize stream I/O in your module
\&    $self->{'io'} = Bio::Root::IO->new(-file => "myfile");
\&    $self->{'io'}->_print("some stuff");
\&    $line = $self->{'io'}->_readline();
\&    $self->{'io'}->_pushback($line);
\&    $self->{'io'}->close();
.Ve
.Vb 4
\&    # obtain platform-compatible filenames
\&    $path = Bio::Root::IO->catfile($dir, $subdir, $filename);
\&    # obtain a temporary file (created in $TEMPDIR)
\&    ($handle) = $io->tempfile();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides methods that will usually be needed for any sort
of file- or stream-related input/output, e.g., keeping track of a file
handle, transient printing and reading from the file handle, a close
method, automatically closing the handle on garbage collection, etc.
.PP
To use this for your own code you will either want to inherit from
this module, or instantiate an object for every file or stream you are
dealing with. In the first case this module will most likely not be
the first class off which your class inherits; therefore you need to
call \fI_initialize_io()\fR with the named parameters in order set file
handle, open file, etc automatically.
.PP
Most methods start with an underscore, indicating they are private. In
\&\s-1OO\s0 speak, they are not private but protected, that is, use them in
your module code, but a client code of your module will usually not
want to call them (except those not starting with an underscore).
.PP
In addition this module contains a couple of convenience methods for
cross-platform safe tempfile creation and similar tasks. There are
some \s-1CPAN\s0 modules related that may be not be available on all
platforms. At present, File::Spec and File::Temp are attempted. This
module exports \f(CW$TEMPFILE\fR and \f(CW$ROOTDIR\fR, which will always be set,
\&\f(CW$PATHSEP\fR, which will be set if File::Spec fails, and \f(CW$OPENFLAGS\fR, which
will be set if either of File::Spec or File::Temp fails.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.Sh "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this
and other Bioperl modules. Send your comments and suggestions preferably
 to one of the Bioperl mailing lists.
Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl-l@bioperl.org                 - General discussion
\&  http://bio.perl.org/MailList.html             - About the mailing lists
.Ve
.Sh "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
 the bugs and their resolution.
 Bug reports can be submitted via email or the web:
.PP
.Vb 2
\&  bioperl-bugs@bio.perl.org
\&  http://bio.perl.org/bioperl-bugs/
.Ve
.SH "AUTHOR \- Hilmar Lapp"
.IX Header "AUTHOR - Hilmar Lapp"
Email hlapp@gmx.net
.PP
Describe contact details here
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods. Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 6
\& Title   : new 
\& Usage   : 
\& Function: Overridden here to automatically call _initialize_io().
\& Example :
\& Returns : new instance of this class
\& Args    : named parameters
.Ve
.Sh "_initialize_io"
.IX Subsection "_initialize_io"
.Vb 3
\& Title   : initialize_io
\& Usage   : $self->_initialize_io(@params);
\& Function: Initializes filehandle and other properties.
.Ve
.Vb 4
\&           Currently recognized the following named parameters: -file, -fh
\& Example :
\& Returns : TRUE
\& Args    : named parameters
.Ve
.Sh "_fh"
.IX Subsection "_fh"
.Vb 6
\& Title   : _fh
\& Usage   : $obj->_fh($newval)
\& Function:
\& Example :
\& Returns : value of _filehandle
\& Args    : newvalue (optional)
.Ve
.Sh "_print"
.IX Subsection "_print"
.Vb 5
\& Title   : _print
\& Usage   : $obj->_print(@lines)
\& Function:
\& Example :
\& Returns : writes output
.Ve
.Sh "_readline"
.IX Subsection "_readline"
.Vb 3
\& Title   : _readline
\& Usage   : $obj->_readline
\& Function: Reads a line of input.
.Ve
.Vb 2
\&           Note that this method implicitely uses the value of $/ that is
\&           in effect when called.
.Ve
.Vb 5
\&           Note also that the current implementation does not handle pushed
\&           back input correctly unless the pushed back input ends with the
\&           value of $/.
\& Example :
\& Returns :
.Ve
.Sh "_pushback"
.IX Subsection "_pushback"
.Vb 6
\& Title   : _pushback
\& Usage   : $obj->_pushback($newvalue)
\& Function: puts a line previously read with _readline back into a buffer
\& Example :
\& Returns :
\& Args    : newvalue
.Ve
.Sh "close"
.IX Subsection "close"
.Vb 6
\& Title   : close
\& Usage   : $seqio->close()
\& Function: Closes the file handle associated with this seqio system
\& Example :
\& Returns :
\& Args    :
.Ve
.Sh "tempfile"
.IX Subsection "tempfile"
.Vb 4
\& Title   : tempfile
\& Usage   : my ($handle,$tempfile) = $io->tempfile(); 
\& Function: Returns a temporary filename and a handle opened for writing and
\&           and reading.
.Ve
.Vb 7
\& Caveats : If you do not have File::Temp on your system you should avoid
\&           specifying TEMPLATE and SUFFIX. (We don't want to recode
\&           everything, okay?)
\& Returns : a 2-element array, consisting of temporary handle and temporary 
\&           file name
\& Args    : named parameters compatible with File::Temp: DIR (defaults to
\&           $Bio::Root::IO::TEMPDIR), TEMPLATE, SUFFIX.
.Ve
.Sh "tempdir"
.IX Subsection "tempdir"
.Vb 3
\& Title   : tempdir
\& Usage   : my ($tempdir) = $io->tempdir(CLEANUP=>1); 
\& Function: Creates and returns the name of a new temporary directory.
.Ve
.Vb 3
\&           Note that you should not use this function for obtaining "the"
\&           temp directory. Use $Bio::Root::IO::TEMPDIR for that. Calling this
\&           method will in fact create a new directory.
.Ve
.Vb 3
\& Returns : The name of a new temporary directory.
\& Args    : args - ( key CLEANUP ) indicates whether or not to cleanup 
\&           dir on object destruction, other keys as specified by File::Temp
.Ve
.Sh "catfile"
.IX Subsection "catfile"
.Vb 3
\& Title   : catfile
\& Usage   : $path = Bio::Root::IO->catfile(@dirs,$filename);
\& Function: Constructs a full pathname in a cross-platform safe way.
.Ve
.Vb 2
\&           If File::Spec exists on your system, this routine will merely
\&           delegate to it. Otherwise it tries to make a good guess.
.Ve
.Vb 3
\&           You should use this method whenever you construct a path name
\&           from directory and filename. Otherwise you risk cross-platform
\&           compatibility of your code.
.Ve
.Vb 1
\&           You can call this method both as a class and an instance method.
.Ve
.Vb 3
\& Returns : a string
\& Args    : components of the pathname (directories and filename, NOT an
\&           extension)
.Ve
.Sh "rmtree"
.IX Subsection "rmtree"
.Vb 3
\& Title   : rmtree
\& Usage   : Bio::Root::IO->rmtree($dirname );
\& Function: Remove a full directory tree
.Ve
.Vb 2
\&           If File::Path exists on your system, this routine will merely
\&           delegate to it. Otherwise it runs a local version of that code.
.Ve
.Vb 2
\&           You should use this method to remove directories which contain 
\&           files.
.Ve
.Vb 1
\&           You can call this method both as a class and an instance method.
.Ve
.Vb 2
\& Returns : number of files successfully deleted
\& Args    : roots - rootdir to delete or reference to list of dirs
.Ve
.Vb 6
\&           verbose - a boolean value, which if TRUE will cause
\&                     C<rmtree> to print a message each time it
\&                     examines a file, giving the name of the file, and
\&                     indicating whether it's using C<rmdir> or
\&                     C<unlink> to remove it, or that it's skipping it.
\&                     (defaults to FALSE)
.Ve
.Vb 7
\&           safe - a boolean value, which if TRUE will cause C<rmtree>
\&                  to skip any files to which you do not have delete
\&                  access (if running under VMS) or write access (if
\&                  running under another OS).  This will change in the
\&                  future when a criterion for 'delete permission'
\&                  under OSs other than VMS is settled.  (defaults to
\&                  FALSE)
.Ve
