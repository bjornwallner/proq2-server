.\" Automatically generated by Pod::Man version 1.02
.\" Wed Jun 27 13:29:55 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Bio::Annotation::Reference 3"
.TH Bio::Annotation::Reference 3 "perl v5.6.0" "2001-05-16" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Bio::Annotation::Reference \- Specialised DBLink object for Literature References
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    $reg = Bio::Annotation::Reference->new( -title => 'title line',
\&                                            -location => 'location line',
\&                                            -authors => 'author line',
\&                                            -medline => 998122 );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Object which presents a literature reference. This is considered to be
a specialised form of database link. The additional methods provided
are all set/get methods to store strings commonly associated with
references, in particular title, location (ie, journal page) and
authors line.
.PP
There is no attempt to do anything more than store these things as
strings for processing elsewhere. This is mainly because parsing these
things suck and generally are specific to the specific format one is
using. To provide an easy route to go format \--> object \--> format
without losing data, we keep them as strings. Feel free to post the
list for a better solution, but in general this gets very messy very
fast...
.SH "CONTACT"
.IX Header "CONTACT"
Describe contact details here
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods. Internal methods are usually preceded with a _
.Sh "new"
.IX Subsection "new"
.Vb 10
\& Title   : new
\& Usage   : $ref = Bio::Annotation::Reference->new( -title => 'title line',
\&                                                   -authors => 'author line',
\&                                                   -location => 'location line',
\&                                                   -medline => 9988812);
\& Function:
\& Example :
\& Returns : a new Bio::Annotation::Reference object
\& Args    : a hash with optional title, authors, location, medline, start and end
\&           attributes
.Ve
.Sh "start"
.IX Subsection "start"
.Vb 6
\& Title   : start
\& Usage   : $self->start($newval)
\& Function: Gives the reference start base
\& Example : 
\& Returns : value of start
\& Args    : newvalue (optional)
.Ve
.Sh "rp"
.IX Subsection "rp"
.Vb 6
\& Title   : rp
\& Usage   : $self->rp($newval)
\& Function: Gives the RP line. No attempt is made to parse this line.
\& Example : 
\& Returns : value of rp
\& Args    : newvalue (optional)
.Ve
.Sh "authors"
.IX Subsection "authors"
.Vb 6
\& Title   : authors
\& Usage   : $self->authors($newval)
\& Function: Gives the author line. No attempt is made to parse the author line
\& Example : 
\& Returns : value of authors
\& Args    : newvalue (optional)
.Ve
.Sh "location"
.IX Subsection "location"
.Vb 6
\& Title   : location
\& Usage   : $self->location($newval)
\& Function: Gives the location line. No attempt is made to parse the location line
\& Example : 
\& Returns : value of location
\& Args    : newvalue (optional)
.Ve
.Sh "title"
.IX Subsection "title"
.Vb 6
\& Title   : title
\& Usage   : $self->title($newval)
\& Function: Gives the title line (if exists)
\& Example : 
\& Returns : value of title
\& Args    : newvalue (optional)
.Ve
.Sh "medline"
.IX Subsection "medline"
.Vb 6
\& Title   : medline
\& Usage   : $self->medline($newval)
\& Function: Gives the medline number
\& Example : 
\& Returns : value of medline
\& Args    : newvalue (optional)
.Ve
.Sh "pubmed"
.IX Subsection "pubmed"
.Vb 7
\& Title   : pubmed
\& Usage   : $refobj->pubmed($newval)
\& Function: Get/Set the PubMed number, if it is different from the MedLine
\&           number.
\& Example : 
\& Returns : value of medline
\& Args    : newvalue (optional)
.Ve
.Sh "database"
.IX Subsection "database"
.Vb 7
\& Title   : database
\& Usage   :
\& Function: Overrides DBLink database to be hard coded to 'MEDLINE', unless
\&           the database has been set explicitely before.
\& Example :
\& Returns : 
\& Args    :
.Ve
.Sh "primary_id"
.IX Subsection "primary_id"
.Vb 6
\& Title   : primary_id
\& Usage   :
\& Function: Overrides DBLink primary_id to provide medline number
\& Example :
\& Returns : 
\& Args    :
.Ve
.Sh "optional_id"
.IX Subsection "optional_id"
.Vb 6
\& Title   : optional_id
\& Usage   :
\& Function: Overrides DBLink optional_id to provide the PubMed number.
\& Example :
\& Returns : 
\& Args    :
.Ve
