#!/usr/local/bin/perl -- # -*-Perl-*-
# $Id: dbfetch,v 1.2 2001/04/15 12:15:47 heikki Exp $
#
# Cared for by Heikki Lehvaslaiho <heikki@ebi.ac.uk>
#
# Copyright Heikki Lehvaslaiho
#
# You may distribute this module under the same terms as perl itself

=head1 NAME

dbfetch - generic CGI program to retrieve biological database entries
in various formats and styles (using SRS)

=head1 SYNOPSIS

  # URL examples:

  # prints the interactive page with the HTML form
  http://www.ebi.ac.uk/cgi-bin/dbfetch

  # for backward compatibility, implements <ISINDEX>
  # single entry queries defaulting to EMBL sequence database
  http://www.ebi.ac.uk/cgi-bin/dbfetch?J00231

  # retrieves one or more entries in default format
  # and default style (html)
  # returns nothing for IDs which are not valid
  http://www.ebi.ac.uk/cgi-bin/dbfetch?id=J00231.1,hsfos,bum

  # retrieve entries in fasta format without html tags
  http://www.ebi.ac.uk/cgi-bin/emblfetch?format=fasta&style=raw&id=J00231,hsfos,bum

  # retrieve a raw Ensembl entry
  http://www.ebi.ac.uk/cgi-bin/emblfetch?db=ensembl&style=raw&id=AL122059


=head1 DESCRIPTION

This program generates a page allowing a web user to retrieve database
entries from a local SRS in two styles: html and raw. Other
database engines can be used to implement the same interfase.

At this stage, on unique identifier queries are supported. Free text
searches returning more than one entry per query term are not in these
specs.

In its default setup, type one or more EMBL accession numbers
(e.g. J00231), entry name (e.g. BUM) or sequence version into the
seach dialog to retieve hypertext linked enties.

Note that for practical reasons only the first 50 identifiers
submitted are processed.

Additional input is needed to change the sequence format or suppress
the HTML tags.  The styles are html and raw. In future there might be
additional styles (e.g. xml). Currently XML is a 'raw' format used by
Medline. Each style is implemented as a separate subroutine.

=head1 MAINTANENCE

A new database can be added simply by adding a new entry in the global
hash %IDS. Additionally, if the database defines new formats add an
entry for each of them into the hash %IDMATCH.  After modifying the
hash, run this script from command line for some sanity checks.

Finally, the user interface needs to be updated in the L<print_prompt>
subroutine.

=head1 AUTHOR - Heikki Lehvaslaiho

Email:  heikki@ebi.ac.uk
Address:

     EMBL Outstation, European Bioinformatics Institute
     Wellcome Trust Genome Campus, Hinxton
     Cambs. CB10 1SD, United Kingdom

=cut

# Let the code begin...

$VERSION = '1.00';
$DATE = '12 Apr 2001';

use CGI "standard";
use POSIX;
use CGI::Carp qw/ fatalsToBrowser /;
#use File::Temp qw/ tempfile tempdir /;
use strict;
no strict "refs";

use constant MAXIDS => 50;
#use constant TMPDIR => '/usr/tmp';

use vars qw( $VERSION $DATE %DBS  %STYLES $RWGETZ $RGETZ  %IDMATCH %IDLIST );

BEGIN {

    # paths to SRS binaries
    $RWGETZ = '/ebi/srs/srs/bin/osf_5/wgetz -e';
    $RGETZ = '/ebi/srs/srs/bin/osf_5/getz -e';
    #$EMBOSSDIR = '/ebi/services/pkgs/emboss/bin';

    # RE matching the unique ID in the db entry
    # - key is the 
    # - put the id string in parenthesis
    %IDMATCH = (        #  123
		embl => 'ID   (\w+)',
		fasta => '>(\w+)',
		medlinefull => '[\n><]MedlineID. ?(\w+)',
                swissprot => 'ID   (\w+)',
		pdb => '.{62}(\w+)'
		);
    %DBS = (
	    embl => {
		update => 'emblnew',
		fields => ['id', 'acc', 'sv'],
		format => {
		    default => 'embl',
		    embl => 1,
		    fasta => 'FastaSeqs'
		    }
	    },
	    medline => {
		update => 'medlinenew',
		fields => ['id'],
		format => {
		    default => 'medlinefull',
#		    medlineref => 'MedlineRef',
		    medlinefull => 'MedlineFull'
		    }
	    },
	    ensembl => {
		fields => ['id'],
		format => {
		    default => 'embl',
		    embl => 1,
		    fasta => 'FastaSeqs'
		    }
	    },
            swall => {
		fields => ['id', 'acc'],
		format => {
		    default => 'swissprot',
		    swissprot => '1',
		    fasta => 'FastaSeqs'
		    }
	    },
            pdb => {
		fields => ['id'],
		format => {
		    default => 'pdb',
		    pdb => '1'
		    }
	    }
            #add more databases here...
	    );

    %STYLES = (
	       html => 1,
	       raw => 1
	       );

    %IDLIST = (); #redundancy check list built during the execution
}

my $q = new CGI;

&debugging unless $q->user_agent; # sanity checks if the script is running from command line

if ( $q->param('id') or $q->param('keywords')  ) {

    # pacify input strings
    my $value;
    $value = protect($q->param('id')) if $q->param('id');
    $value = protect($q->param('keywords')) if $q->param('keywords');
    my $db = lc protect($q->param('db')); # let's keep the case lower
    my $format = lc protect($q->param('format'));
    my $style =  lc protect($q->param('style'));

    # check input and set defaults
    $db ||= 'embl'; # default db
    input_error($q, "Unknown database [$db].") unless $DBS{$db};
    $style ||= 'html';  # default style
    input_error($q, "unknown style [$style]") unless $STYLES{$style};
    $format ||= $DBS{$db}{format}{default}; # default format
    input_error($q, "Format [$format] not known for database [$db]")  
        unless $DBS{$db}{format}{$format};
    $format = $DBS{$db}{format}{default} if $format eq 'default';

    if ($style eq 'html') {
        print $q->header(-type => 'text/html', -charset => 'UTF-8');
     } else {
        print "Content-Type: text/plain; charset=UTF-8\n\n";
     }
    #
    # This is the only really safe way of using temporary files in perl
    #  ... but it needs perl 5.6.0 and is therefore not used
    #
    #use File::Temp qw/ tempfile /; # put this among other use statements
    #$fh = tempfile('emblfetchXXXXXX', DIR => TMPDIR, UNLINK => 1 ); #automatic unlinking
    # example of output, pointer movement and input
    #print $fh "ok\n";
    #seek $fh, 0, 0;
    #print $_ while <$fh>;
    #
    # instead we do:
    #use POSIX;
    my $filename;
    do {
	$filename = tmpnam();
    } until sysopen (TMP, $filename, O_RDWR | O_CREAT | O_EXCL , 0600 );

    my $counter;
    foreach my $id (split (/ /, $value)) {
	$counter++;
	last if $counter > MAXIDS;
        &$style($db, $id, $format);
    }
    no_entries($q) if $style eq 'html' and tell(TMP) == 0;
    seek TMP, 0, 0;
    print '<pre>' if $style eq 'html';
    print $_ while <TMP>;
    unlink $filename;
} else {
    print_prompt($q);
}


=head2 print_prompt

 Title   : print_prompt
 Usage   :
 Function: Prints the default page with the query form
           to STDOUT (Web page)
 Args    :
 Returns :

=cut

sub print_prompt {
    my ($q) = @_;
    print $q->header(),
         $q->start_html(-title => 'DB Entry Retrieval',
                        -bgcolor => 'white',
			-author => 'heikki@ebi.ac.uk'
			),
	 '<IMG align=middle SRC="/icons/ebibanner.gif">',
	  $q->h1('Generic DB Entry Retrieval'),
	  $q->p("This page allows you to retrieve up to ". MAXIDS .
		 " entries at the time from various up-to-date biological databases."),
	  $q->p("For EMBL, enter an  accession number (e.g. J00231) or entry name (e.g.
		 BUM) or a sequence version (e.g. J00231.1), or any combination of them
		 separated by a non-word character into your browser's search dialog.
		 SWALL examples are: fos_human, p53_human.
		 For short Ensembl entries, try : AL122059, AL031002, AL031030 .
		 'Random' Medline entry examples are: 20063307, 98276153.
		 PDB entry examples are: 100D, 1FOS.
		 Only one copy of the latest version of the entry is returned. 
                 (Not true for recent Medline entries.)"),
	  $q->hr,
	  $q->startform,
	  $q->popup_menu(-name => 'db',
			 -values => ['EMBL',
				     'SWALL',
				     'PDB',
				     'Medline',
				     'Ensembl'
				     ]),
	  $q->textfield(-name => 'id',
			 -size => 40,
			 -maxlength => 1000),
	  $q->popup_menu(-name => 'format',
			 -values => ['default','Fasta']),
	  $q->popup_menu(-name => 'style',
			 -values => ['html','raw']),
	  $q->submit('Retrieve'),
	  $q->endform,
	  $q->hr,
	  $q->h2('Direct access'),
	  $q->p('For backward compatibility, the script defaults to EMBL:'),
	  $q->code('<A href="http://www.ebi.ac.uk/cgi-bin/dbfetch?J00231">
		     http://www.ebi.ac.uk/cgi-bin/dbfetch?J00231</a>'),
	  $q->p('but the preferred way of calling it is:'),
	  $q->code('<A href="http://www.ebi.ac.uk/cgi-bin/dbfetch?id=J00231,hsfos,bum">
		     http://www.ebi.ac.uk/cgi-bin/dbfetch?id=J00231.1,hsfos,bum</a>'),
	  $q->p('which can be extended to retrieve entries in alternative sequence formats
		      and other databases:'),
	  $q->code('<A href="http://www.ebi.ac.uk/cgi-bin/dbfetch?db=swall&format=fasta&id=fos_human">
		     http://www.ebi.ac.uk/cgi-bin/dbfetch?db=swall&format=fasta&id=fos_human</a>'),
	  $q->p('Set style to <code>raw</code> to retrieve plain text entries for computational purposes
                 and saving to disk:'),
	  $q->code('<A href="http://www.ebi.ac.uk/cgi-bin/dbfetch?db=medline&style=raw&id=21131735">
                    http://www.ebi.ac.uk/cgi-bin/dbfetch?db=medline&style=raw&id=21131735</a>'),
	  $q->hr,
          $q->address("Version $VERSION, $DATE, <a href=\"mailto:support\@ebi.ac.uk\">support\@ebi.ac.uk</a>"),
	  $q->end_html, "\n" ;
}

=head2 protect

 Title   : protect
 Usage   : $value = protect($q->param('id'));
 Function:

           Removes potentially dangerous characters from the input
	   string.  At the same time, converts word separators into a
	   single space character.

 Args    : scalar, string with one or more EMBL IDs or accession numbers
 Returns : scalar

=cut

sub protect {
    my ($s) = @_;
    $s =~ s![^\w\.]+! !g; # allow version numbers with '.'
    $s =~ s|^\W+||;
    $s =~ s|\W+$||;
    return $s;
}

=head2 input_error

 Title   : input_error
 Usage   : input_error($q, "Error message");
 Function: Standard error message behaviour
 Args    : reference to the CGI object
           scalar, string to display on input error.
 Returns : scalar

=cut

sub input_error {
    my ($q, $s) = @_;

    print $q->header, 
    $q->start_html(-title => 'DB Entry Retrieval: Input error', 
		   -bgcolor => 'white'
		   ),
    "<h2>ERROR in input:<h2>$s\n",
    $q->end_html, "\n";
    exit 0;
}

=head2 no_entries

 Title   : no_entries
 Usage   : no_entries($q, "Message");
 Function: Standard behaviour when no entries found
 Args    : reference to the CGI object
           scalar, string to display on input error.
 Returns : scalar

=cut

sub no_entries {
    my ($q, $s) = @_;

    print $q->start_html(-title => 'DB Entry Retrieval: Input warning',
			 -bgcolor => 'white'
			 ),
	  "<h2>WARNING: Your query retrieved no entries.</h2>",
          'Try again, please. Here is a chocolate bug, instead. <IMG align=top SRC="/mutations/figs/ladybug200.jpg">',
    #'Here is flower instead \n <IMG align=middle SRC="/mutations/figs/flower.gif">',
	   $q->end_html, "\n";
    exit 0;
}


=head2 raw

 Title   : raw
 Usage   :
 Function: Retrieves a single EMBL or EMBLNEW entry in plain text
 Args    : scalar, EMBL ID
           scaler, format
 Returns : scalar

=cut

sub raw {
    my ($db, $value, $format) = @_;
    my ($srsq, $qdb, $entry, $id);
    my ($seqformat) = '';
    $seqformat = '-view '. $DBS{$db}{format}{$format}
       if $format ne $DBS{$db}{format}{default};

#    print "$format : ", $DBS{$db}{format}{default}, "----$seqformat----", "\n";

  QUERY: {
      # update db
      if ($DBS{$db}{update}) {
	  $qdb = $DBS{$db}{update};
	  foreach my $field (@{$DBS{$db}{fields}}) {
	      $srsq .= " [$qdb-$field:$value] |";
	  }
	  chop $srsq;
#	  print "rsh srs $RGETZ $seqformat $srsq \n";
	  $entry = `rsh srs "$RGETZ $seqformat '$srsq'"`;
	  last QUERY if $entry ne '';
      }
      # main db
      $qdb = $db;
      $srsq = '';
      foreach my $field (@{$DBS{$db}{fields}}) {
	  $srsq .= " [$qdb-$field:$value] |";
      }
      chop $srsq;
#      print "rsh srs $RGETZ $seqformat $srsq\n";
      $entry = `rsh srs "$RGETZ $seqformat '$srsq'"`;
  }

    $entry =~ s|EMBL[^\n]+\n||;
    $entry =~ s|^\s+||g;
    $entry =~ s|\s+$|\n|g;

    my $idmatch = $IDMATCH{$format};
    ($id) = $entry =~ /$idmatch/;

#    my $tmp = substr($entry, 0, 20);
#    print "Entry:$tmp\n";
#    print  "-----id=$id---\$1=$1----idmatch=$idmatch=format=$format=\n";
#
    print TMP $entry unless $IDLIST{$id};
    $IDLIST{$id} = 1;
}

=head2 html

 Title   : html
 Usage   :
 Function: Retrieves a single EMBL or EMBLNEW entry with HTML
           hypertext links in place
 Args    : scalar, EMBL ID
           scalar, format
 Returns : scalar

=cut

sub html {
    my ($db, $value, $format) = @_;
    my ($srsq, $qdb, $entry, $id, $idmatch);
    my ($seqformat) = '';
    $seqformat = '-view '. $DBS{$db}{format}{$format}
       if $format ne $DBS{$db}{format}{default};

#    print "$format : '", $DBS{$db}{format}{default}, "'----|$seqformat|----", "\n";
  QUERY: {
      # update db
      if ($DBS{$db}{update}) {
	  $qdb = $DBS{$db}{update};
	  foreach my $field (@{$DBS{$db}{fields}}) {
	      $srsq .= " [$qdb-$field:$value] |";
	  }
	  chop $srsq;
#	  print "rsh srs $RWGETZ $seqformat $srsq \n";
	  $entry = `rsh srs "$RWGETZ $seqformat '$srsq'"`;
	  last QUERY unless $entry =~ /SRS error/;
      }
      # main db
      $qdb = $db;
      $srsq = '';
      foreach my $field (@{$DBS{$db}{fields}}) {
	  $srsq .= " [$qdb-$field:$value] |";
      }
      chop $srsq;
#      print "rsh srs $RWGETZ $seqformat $srsq\n";
      $entry = `rsh srs "$RWGETZ $seqformat '$srsq'"`;
  }
    return if $entry =~ /SRS error/;

    $entry =~ s|^Content-type:[^\n]+\n||;
    $entry =~ s|\n<A  HREF[^\n]+\n||;
    $entry =~ s|<A +HREF=\"?wgetz|<A HREF=http://srs6.ebi.ac.uk/srs6bin/cgi-bin/wgetz|g; #"\
    $entry =~ s/\+-e\"/\+-e/g; #"
    $entry =~ s|<BR>||g;
    $entry =~ s|</?pre>||g;
    $entry =~ s|\n+|\n|g;
    $entry =~ s|^\n+||g;

    $idmatch = $IDMATCH{$format};
    ($id) = $entry =~ /$idmatch/;

#    my $tmp = substr($entry, 0, 20);
#    print "Entry:$tmp\n";
#    print  "-----id=$id---\$1=$1----idmatch=$idmatch=format=$format=\n";
    print TMP $entry unless $IDLIST{$id};
    $IDLIST{$id} = 1;
}


=head2 debugging

 Title   : debugging
 Usage   : 'perl dbfetch'
 Function:

           Performs sanity checks on global hash %IDS when this script
           is run from command line. %IDS holds the description of
           formats and other crusial info for each database accessible
           through the program.

 Args    : none
 Returns : error messages to STDOUT

=cut

sub debugging {

    foreach my $db (keys %DBS) {
	my $status = 1;

	# update
	print "WARNING: [$db]: no update db defined.". "\n"
	    unless $DBS{$db}{update};

	# field
	print "ERROR: [$db]: no SRS fields defined.".
	    " Give an array of field names?\n" and $status = 0
	    unless $DBS{$db}{fields};
	print "ERROR: [$db]: SRS fields are not defined as an array.\n" and $status = 0
	    unless ref $DBS{$db}{fields} eq 'ARRAY';

	# format
	print "ERROR: [$db]: no formats defined.\n" and $status = 0
	    unless $DBS{$db}{format};
	print "ERROR: [$db]: no default format defined.\n" and $status = 0
	    unless $DBS{$db}{format}{default};
	my $format = $DBS{$db}{format}{default};
	print "ERROR: [$db]: no format [$format] defined.".
	    " You declared it as a default and only.\n" and $status = 0
	    unless $DBS{$db}{format}{$format};
	foreach my $dbformat (keys %{$DBS{$db}{format}}) {
	    print "ERROR: [$db]: format [$format] not defined in %IDMATCH.\n"
		and $status = 0
		 unless $IDMATCH{$dbformat} or $dbformat eq 'default';
	}
	printf "%-12s%s", "[$db]", "OK\n" if $status;
    }
    exit;
}
